# cerebro_simulado.py
import openai


def predecir_evento_futuro(mensajes):
    import openai  # ğŸ”§ Import directo dentro de la funciÃ³n para evitar errores

    # AnÃ¡lisis simple de proyecciÃ³n futura basada en contenido
    for mensaje in mensajes[::-1]:  # analizamos desde el mÃ¡s reciente
        if "me va a pasar" in mensaje or "seguro que terminarÃ©" in mensaje:
            return mensaje
    return "sin predicciÃ³n identificable"


def inferir_patron_interactivo(mensajes):
    if len(mensajes) < 3:
        return "patrÃ³n indefinido"
    if all("yo" in m.lower() for m in mensajes[-3:]):
        return "foco en sÃ­ mismo"
    if all("vos" in m.lower() or "usted" in m.lower() for m in mensajes[-3:]):
        return "interpelaciÃ³n al otro"
    return "sin patrÃ³n definido"


def evaluar_coherencia_mensaje(mensaje):
    if len(mensaje.split()) < 3:
        return "mensaje muy breve"
    if any(palabra in mensaje.lower() for palabra in ["odio", "muerte", "desaparecer"]):
        return "mensaje de riesgo"
    return "mensaje coherente"


def clasificar_estado_mental(mensajes):
    texto = " ".join(mensajes).lower()
    if any(palabra in texto for palabra in ["no tiene sentido", "todo me cuesta", "nada me entusiasma", "ya no me importa"]):
        return "apatÃ­a o anhedonia"
    if any(palabra in texto for palabra in ["no puedo mÃ¡s", "me duele todo", "me supera", "quiero llorar"]):
        return "agotamiento emocional"
    if any(palabra in texto for palabra in ["me van a lastimar", "siento peligro", "nadie me entiende", "me odian"]):
        return "estado defensivo o paranoide"
    return "estado emocional no definido"


def inferir_intencion_usuario(mensajes):
    if not mensajes:
        return "intenciÃ³n no determinada"

    ultimo = mensajes[-1].lower()

    # ğŸ§¼ Filtro para saludos simples
    saludos_simples = {
        "hola", "buenas", "buenas tardes", "buenas noches", "buen dÃ­a",
        "holis", "Â¿hola?", "Â¿estÃ¡s ahÃ­?", "hey", "hello", "hi", "holaa", "probando"
    }
    if ultimo in saludos_simples:
        return "cortesÃ­a"

    if "quiero ayuda" in ultimo or "necesito hablar" in ultimo:
        return "bÃºsqueda de asistencia"

    if "solo estoy probando" in ultimo or "estoy testeando" in ultimo:
        return "curiosidad o prueba"

    frases_cierre = [
        "ya dije todo lo que sentÃ­a", "ya no sÃ© quÃ© mÃ¡s decir", "es todo por ahora",
        "no tengo mÃ¡s para contar", "me cansÃ© de hablar", "esto ya me agotÃ³",
        "creo que no me sirve", "siento que esto no ayuda", "no le encuentro sentido a seguir",
        "no sÃ© si seguir hablando de esto tiene sentido", "no me estÃ¡ sirviendo",
        "gracias por todo", "ya estÃ¡", "eso era todo", "te agradezco igual",
        "me ayudÃ³ aunque no lo parezca",

        # AmbigÃ¼edad resignada
        "da igual", "como sea", "ya fue", "me rindo", "dejÃ©moslo ahÃ­",

        # IronÃ­a o sarcasmo resignado
        "sÃ­, seguro que me va a cambiar la vida", "listo, estoy curado",
        "con eso me alcanza, gracias", "gran soluciÃ³n", "eso me lo arregla todo",

        # VacÃ­o o desesperanza implÃ­cita
        "es inÃºtil", "nada cambia", "esto no tiene sentido", "para quÃ© seguir", "ya no importa"
    ]
    if any(frase in ultimo for frase in frases_cierre):
        return "intenciÃ³n de cierre"

    # ğŸ†• DetecciÃ³n especÃ­fica de menciones clÃ­nicas relacionadas con pareja
    if any(p in ultimo for p in ["pareja", "terapia de pareja", "consultar por pareja", "atienden pareja"]):
        return "consulta por terapia de pareja"

    return "intenciÃ³n no determinada"
