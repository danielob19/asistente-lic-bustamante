# üì¶ M√≥dulos est√°ndar de Python
import os
import time
import threading
import random
import re
from datetime import datetime, timedelta
from collections import Counter

# üß™ Librer√≠as externas
import psycopg2
from psycopg2 import sql
import numpy as np
import openai
from pydantic import BaseModel

# üöÄ Framework FastAPI
from fastapi import FastAPI, HTTPException, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, HTMLResponse

# ‚úÖ Funci√≥n reutilizable de seguridad textual
def contiene_elementos_peligrosos(texto: str) -> bool:
    """
    Detecta si un texto contiene patrones potencialmente peligrosos o maliciosos
    como comandos de sistema, c√≥digo fuente o expresiones t√©cnicas sensibles.
    """
    patrones_riesgosos = [
        r"openai\.api_key", r"import\s", r"os\.system", r"eval\(", r"exec\(",
        r"<script", r"</script>", r"\bdrop\b.*\btable\b", r"\bdelete\b.*\bfrom\b",
        r"\brm\s+-rf\b", r"\bchmod\b", r"\bmkfs\b", r"\bshutdown\b", r"\breboot\b",
        r"SELECT\s+.*\s+FROM", r"INSERT\s+INTO", r"UPDATE\s+\w+\s+SET", r"DELETE\s+FROM"
    ]
    return any(re.search(patron, texto, re.IGNORECASE) for patron in patrones_riesgosos)

# üß† Lista de preguntas frecuentes (FAQ) y sus respuestas fijas
faq_respuestas = [
    {
        "pregunta": "¬øQu√© servicios ofrece?",
        "respuesta": (
            "El Lic. Daniel O. Bustamante brinda atenci√≥n psicol√≥gica exclusivamente online, a trav√©s de videoconsultas.\n\n"
            "Entre los principales motivos de consulta que aborda se encuentran:\n"
            "- Psicoterapia individual para adultos (modalidad online)\n"
            "- Tratamiento de crisis emocionales\n"
            "- Abordaje de ansiedad, estr√©s y ataques de p√°nico\n"
            "- Procesos de duelo y cambios vitales\n"
            "- Estados an√≠micos depresivos\n"
            "- Problemas de autoestima y motivaci√≥n\n"
            "- Dificultades vinculares y emocionales\n"
            "- Terapia de pareja online\n\n"
            "Si quer√©s coordinar una consulta o ten√©s dudas, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
        )
    },
    {
        "pregunta": "¬øCu√°nto dura la sesi√≥n?",
        "respuesta": (
            "Las sesiones con el Lic. Daniel O. Bustamante tienen una duraci√≥n aproximada de 50 minutos y se realizan por videoconsulta.\n\n"
            "La frecuencia puede variar seg√∫n cada caso, pero generalmente se recomienda un encuentro semanal para favorecer el proceso terap√©utico.\n\n"
            "Si quer√©s coordinar una sesi√≥n, pod√©s escribirle por WhatsApp al +54 911 3310-1186."
        )
    },
    {
        "pregunta": "¬øTrabaja con obras sociales?",
        "respuesta": (
            "El Lic. Daniel O. Bustamante no trabaja con obras sociales ni prepagas. Atiende √∫nicamente de manera particular. "
            "Si quer√©s coordinar una sesi√≥n, pod√©s escribirle al WhatsApp +54 911 3310-1186."
        )
    }
]

# ‚ö° Generar embeddings de las preguntas frecuentes (una sola vez al iniciar la app)
def generar_embeddings_faq():
    preguntas = [item["pregunta"] for item in faq_respuestas]
    response = openai.Embedding.create(
        model="text-embedding-ada-002",
        input=preguntas
    )
    for i, embedding in enumerate(response["data"]):
        faq_respuestas[i]["embedding"] = np.array(embedding["embedding"])

from numpy.linalg import norm

def buscar_respuesta_semantica(mensaje: str, umbral=0.88) -> str | None:
    try:
        # Embedding del mensaje del usuario
        embedding_usuario = openai.Embedding.create(
            model="text-embedding-ada-002",
            input=mensaje
        )["data"][0]["embedding"]
        embedding_usuario = np.array(embedding_usuario)

        # Calcular similitud con cada pregunta frecuente
        mejor_score = 0
        mejor_respuesta = None
        for item in faq_respuestas:
            emb_faq = item.get("embedding")
            if emb_faq is not None:
                similitud = np.dot(embedding_usuario, emb_faq) / (norm(embedding_usuario) * norm(emb_faq))
                if similitud > mejor_score and similitud >= umbral:
                    mejor_score = similitud
                    mejor_respuesta = item["respuesta"]

        return mejor_respuesta

    except Exception as e:
        print(f"‚ùå Error en detecci√≥n sem√°ntica: {e}")
        return None

def buscar_respuesta_semantica_con_score(mensaje: str, umbral=0.88):
    try:
        embedding_usuario = openai.Embedding.create(
            model="text-embedding-ada-002",
            input=mensaje
        )["data"][0]["embedding"]
        embedding_usuario = np.array(embedding_usuario)

        mejor_score = 0
        mejor_pregunta = None
        mejor_respuesta = None

        for item in faq_respuestas:
            emb_faq = item.get("embedding")
            if emb_faq is not None:
                similitud = np.dot(embedding_usuario, emb_faq) / (norm(embedding_usuario) * norm(emb_faq))
                if similitud > mejor_score:
                    mejor_score = similitud
                    mejor_pregunta = item["pregunta"]
                    mejor_respuesta = item["respuesta"]

        if mejor_score >= umbral:
            return mejor_pregunta, mejor_respuesta, mejor_score
        return None

    except Exception as e:
        print(f"‚ùå Error en buscar_respuesta_semantica_con_score: {e}")
        return None

# Configuraci√≥n de la clave de API de OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise ValueError("OPENAI_API_KEY no est√° configurada en las variables de entorno.")

# Configuraci√≥n de la URL de la base de datos PostgreSQL
DATABASE_URL = "postgresql://my_postgres_db_oahe_user:AItPOENiOHIGPNva0eiCT0kK1od4UhZf@dpg-ctqqj0bqf0us73f4ar1g-a/my_postgres_db_oahe"

# Generaci√≥n de respuestas con OpenAI
def generar_respuesta_con_openai(prompt):
    try:
        print("\n===== DEPURACI√ìN - GENERACI√ìN DE RESPUESTA CON OPENAI =====")
        print(f"Prompt enviado a OpenAI: {prompt}")

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150,
            temperature=0.3
        )
        
        respuesta = response.choices[0].message['content'].strip()
        print(f"Respuesta generada por OpenAI: {respuesta}\n")
        return respuesta

    except Exception as e:
        print(f"Error al generar respuesta con OpenAI: {e}")
        return "Lo siento, hubo un problema al generar una respuesta. Por favor, intenta nuevamente."

# Funci√≥n para detectar emociones negativas usando OpenAI
def detectar_emociones_negativas(mensaje):
    prompt = (
        "Analiz√° el siguiente mensaje desde una perspectiva cl√≠nica y detect√° exclusivamente emociones negativas o estados afectivos vinculados a malestar psicol√≥gico. "
        "Tu tarea es identificar manifestaciones emocionales que indiquen sufrimiento, alteraci√≥n afectiva o malestar cl√≠nico.\n\n"

        "Indicaciones:\n"
        "- Devolv√© una lista separada por comas, sin explicaciones ni texto adicional.\n"
        "- Si hay ambig√ºedad, asign√° la emoci√≥n negativa m√°s cercana desde el punto de vista cl√≠nico.\n"
        "- Si hay m√∫ltiples emociones, incluilas todas separadas por comas.\n"
        "- Si no se detectan emociones negativas, devolv√© √∫nicamente: ninguna.\n\n"

        "Ejemplos cl√≠nicamente v√°lidos:\n"
        "- Emociones simples: tristeza, ansiedad, culpa, verg√ºenza, impotencia, miedo, irritabilidad, angustia.\n"
        "- Estados complejos: vac√≠o emocional, desgaste emocional, desesperanza, sensaci√≥n de abandono, temor al rechazo, apat√≠a profunda.\n\n"

        f"Mensaje: {mensaje}"
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=50,
            temperature=0.0
        )
        emociones = response.choices[0].message.get("content", "").strip().lower()

        print("\n===== DEPURACI√ìN - DETECCI√ìN DE EMOCIONES =====")
        print(f"Mensaje analizado: {mensaje}")
        print(f"Respuesta de OpenAI: {emociones}")

        emociones = emociones.replace("emociones negativas detectadas:", "").strip()
        emociones = [emocion.strip() for emocion in emociones.split(",") if emocion.strip()]

        if "ninguna" in emociones:
            print("No se detectaron emociones negativas.\n")
            return []

        print(f"Emociones detectadas: {emociones}\n")
        return emociones

    except Exception as e:
        print(f"‚ùå Error al detectar emociones negativas: {e}")
        return []

# Generar frase disparadora seg√∫n emoci√≥n detectada
def generar_disparador_emocional(emocion):
    disparadores = {
        "tristeza": "La tristeza puede ser muy pesada. A veces aparece sin aviso y cuesta ponerla en palabras.",
        "ansiedad": "La ansiedad a veces no tiene una causa clara, pero se siente intensamente en el cuerpo y en los pensamientos.",
        "culpa": "La culpa suele cargar con cosas no dichas o no resueltas.",
        "enojo": "El enojo puede ser una forma de defensa frente a algo que doli√≥ primero.",
        "miedo": "El miedo muchas veces se disfraza de prudencia o de silencio, pero su impacto se nota.",
        "confusi√≥n": "La confusi√≥n puede surgir cuando algo en nuestro mundo interno se mueve sin aviso.",
        "desgano": "A veces el desgano no es flojera, sino cansancio de sostener tanto por dentro.",
        "agotamiento": "El agotamiento emocional aparece cuando dimos mucho y recibimos poco o nada.",
        "soledad": "La soledad puede sentirse incluso rodeado de personas. A veces es una falta de resonancia m√°s que de compa√±√≠a."
    }
    return disparadores.get(emocion.lower())

# Gestionar combinaci√≥n emocional devolviendo una frase o registr√°ndola si es nueva
def gestionar_combinacion_emocional(emocion1, emocion2):
    """
    Consulta la tabla 'disparadores_emocionales' para una frase cl√≠nica correspondiente a una combinaci√≥n de emociones.
    Si no la encuentra, registra autom√°ticamente la combinaci√≥n en 'combinaciones_no_registradas'.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        # Consulta para buscar el disparador emocional cl√≠nico, sin importar el orden
        consulta = """
            SELECT texto_disparador FROM disparadores_emocionales
            WHERE (emocion_1 = %s AND emocion_2 = %s)
               OR (emocion_1 = %s AND emocion_2 = %s)
            LIMIT 1;
        """
        cursor.execute(consulta, (emocion1, emocion2, emocion2, emocion1))
        resultado = cursor.fetchone()

        if resultado:
            conn.close()
            return resultado[0]

        # Registrar la combinaci√≥n no contemplada
        print(f"üÜï Combinaci√≥n emocional no registrada: {emocion1} + {emocion2}")
        cursor.execute("""
            INSERT INTO combinaciones_no_registradas (emocion_1, emocion_2)
            VALUES (%s, %s)
            ON CONFLICT DO NOTHING;
        """, (emocion1.lower(), emocion2.lower()))

        conn.commit()
        conn.close()
        return None

    except Exception as e:
        print(f"‚ùå Error al gestionar combinaci√≥n emocional: {e}")
        return None

# Inicializaci√≥n de FastAPI
app = FastAPI()

# Configuraci√≥n de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuraci√≥n de la base de datos PostgreSQL
def init_db():
    """
    Crea las tablas necesarias si no existen en PostgreSQL.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS palabras_clave (
                id SERIAL PRIMARY KEY,
                sintoma TEXT UNIQUE NOT NULL,
                cuadro TEXT NOT NULL
            );
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS interacciones (
                id SERIAL PRIMARY KEY,
                user_id TEXT NOT NULL,
                consulta TEXT NOT NULL,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS emociones_detectadas (
                id SERIAL PRIMARY KEY,
                emocion TEXT NOT NULL,
                contexto TEXT NOT NULL,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS faq_similitud_logs (
                id SERIAL PRIMARY KEY,
                user_id TEXT NOT NULL,
                consulta TEXT NOT NULL,
                pregunta_faq TEXT NOT NULL,
                similitud FLOAT NOT NULL,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        conn.commit()
        conn.close()
        print("Base de datos inicializada en PostgreSQL.")
    except Exception as e:
        print(f"Error al inicializar la base de datos: {e}")

# ===================== OPERACIONES CL√çNICAS SOBRE 'palabras_clave' =====================

# Registrar un s√≠ntoma con cuadro cl√≠nico asignado por OpenAI si no se proporciona
def registrar_sintoma(sintoma: str, estado_emocional: str = None):
    """
    Registra un s√≠ntoma en la base de datos con su estado emocional.
    Si no se proporciona un estado, lo clasifica autom√°ticamente con OpenAI.
    """

    # Si no se proporciona un estado emocional, usar OpenAI para asignarlo
    if not estado_emocional or not estado_emocional.strip():
        try:
            prompt = (
                f"Asigna un estado emocional cl√≠nicamente relevante a la siguiente emoci√≥n o s√≠ntoma: '{sintoma}'.\n\n"
                "Seleccion√° un estado con base en categor√≠as cl√≠nicas como trastornos, s√≠ndromes o patrones emocionales reconocidos.\n\n"
                "Si no corresponde a ninguno en particular, clasific√° como 'Patr√≥n emocional detectado'.\n\n"
                "Respond√© exclusivamente con el nombre del estado, sin explicaciones.\n\n"
                "Ejemplos v√°lidos:\n"
                "- Trastorno de ansiedad\n"
                "- Cuadro de depresi√≥n\n"
                "- Estr√©s postraum√°tico\n"
                "- Baja autoestima\n"
                "- Desgaste emocional\n"
                "- Sentimientos de inutilidad\n"
                "- Trastorno de impulsividad\n"
                "- Insomnio cr√≥nico\n"
                "- Patr√≥n emocional detectado"
            )

            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=50,
                temperature=0
            )

            estado_emocional = response.choices[0].message["content"].strip()

            if not estado_emocional:
                print(f"‚ö†Ô∏è OpenAI devolvi√≥ vac√≠o. Se asignar√° 'Patr√≥n emocional detectado' para '{sintoma}'.")
                estado_emocional = "Patr√≥n emocional detectado"

            print(f"üß† OpenAI asign√≥ el estado emocional: {estado_emocional} para '{sintoma}'.")

        except Exception as e:
            print(f"‚ùå Error al clasificar '{sintoma}' con OpenAI: {e}")
            estado_emocional = "Patr√≥n emocional detectado"

    # Insertar o actualizar en la base de datos
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO palabras_clave (sintoma, estado_emocional)
            VALUES (%s, %s)
            ON CONFLICT (sintoma) DO UPDATE SET estado_emocional = EXCLUDED.estado_emocional;
        """, (sintoma.strip().lower(), estado_emocional))
        conn.commit()
        conn.close()
        print(f"‚úÖ S√≠ntoma '{sintoma}' registrado con estado emocional '{estado_emocional}'.")
    except Exception as e:
        print(f"‚ùå Error al registrar s√≠ntoma '{sintoma}' en la base: {e}")

def actualizar_sintomas_sin_estado_emocional():
    """
    Busca s√≠ntomas en la base de datos que no tienen estado_emocional asignado,
    les solicita una clasificaci√≥n cl√≠nica a OpenAI y actualiza la tabla.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        # Obtener s√≠ntomas sin estado emocional asignado
        cursor.execute("SELECT sintoma FROM palabras_clave WHERE estado_emocional IS NULL;")
        sintomas_pendientes = [row[0] for row in cursor.fetchall()]
        conn.close()

        if not sintomas_pendientes:
            print("‚úÖ No hay s√≠ntomas pendientes de clasificaci√≥n en estado_emocional.")
            return

        print(f"üîç Clasificando {len(sintomas_pendientes)} s√≠ntomas sin estado_emocional...")

        for sintoma in sintomas_pendientes:
            prompt = (
                f"Asign√° un estado emocional cl√≠nico adecuado al siguiente s√≠ntoma: '{sintoma}'.\n\n"
                "Seleccion√° un estado emocional cl√≠nico compatible con clasificaciones como: Trastorno de ansiedad, Depresi√≥n mayor, Estr√©s postraum√°tico, "
                "Trastorno de p√°nico, Baja autoestima, Desgaste emocional, Sentimientos de aislamiento, Insomnio cr√≥nico, etc.\n\n"
                "Si el s√≠ntoma no se vincula a un estado cl√≠nico espec√≠fico, respond√© con: 'Patr√≥n emocional detectado'.\n\n"
                "Devolv√© exclusivamente el nombre del estado emocional sin texto adicional ni explicaciones."
            )

            try:
                respuesta = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=50,
                    temperature=0.0
                )

                estado_emocional = respuesta["choices"][0]["message"]["content"].strip()
                print(f"üìå Estado emocional para '{sintoma}': {estado_emocional}")

                # Actualizar en la base de datos
                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    "UPDATE palabras_clave SET estado_emocional = %s WHERE sintoma = %s;",
                    (estado_emocional, sintoma)
                )
                conn.commit()
                conn.close()

            except Exception as e:
                print(f"‚ö†Ô∏è Error al clasificar o actualizar '{sintoma}': {e}")

    except Exception as e:
        print(f"‚ùå Error al conectar con la base de datos para actualizar estado_emocional: {e}")

# Obtener s√≠ntomas existentes
def obtener_sintomas_existentes():
    """
    Obtiene todos los s√≠ntomas almacenados en la base de datos PostgreSQL y los devuelve como un conjunto en min√∫sculas.
    Esto mejora la comparaci√≥n y evita problemas con may√∫sculas/min√∫sculas.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT LOWER(sintoma) FROM palabras_clave")  # Convierte a min√∫sculas desde la BD
        sintomas = {row[0] for row in cursor.fetchall()}  # Convierte en un conjunto para b√∫squeda eficiente
        conn.close()
        return sintomas
    except Exception as e:
        print(f"‚ùå Error al obtener s√≠ntomas existentes: {e}")
        return set()

# ===================== REGISTRO DE EMOCIONES DETECTADAS =====================

def registrar_emocion(emocion: str, contexto: str, user_id: str = None):
    """
    Registra una emoci√≥n detectada en la base de datos PostgreSQL.
    Si ya existe, actualiza el contexto concatenando. Si no existe, la inserta.
    Si la tabla tiene una columna 'user_id', se registra tambi√©n.
    """
    try:
        print("\n======= üìå REGISTRO DE EMOCI√ìN DETECTADA =======")
        print(f"üß† Emoci√≥n detectada: {emocion}")
        print(f"üßæ Contexto asociado: {contexto}")
        print(f"üë§ Usuario: {user_id if user_id else 'No especificado'}")

        with psycopg2.connect(DATABASE_URL) as conn:
            with conn.cursor() as cursor:
                # Verifica si la columna user_id existe
                cursor.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'emociones_detectadas' AND column_name = 'user_id';
                """)
                tiene_user_id = bool(cursor.fetchone())

                # Verifica si ya existe una emoci√≥n con o sin user_id
                if tiene_user_id and user_id:
                    cursor.execute(
                        "SELECT contexto FROM emociones_detectadas WHERE emocion = %s AND user_id = %s;",
                        (emocion.strip().lower(), user_id)
                    )
                else:
                    cursor.execute(
                        "SELECT contexto FROM emociones_detectadas WHERE emocion = %s;",
                        (emocion.strip().lower(),)
                    )

                resultado = cursor.fetchone()

                if resultado:
                    nuevo_contexto = f"{resultado[0]}; {contexto.strip()}"
                    if tiene_user_id and user_id:
                        cursor.execute(
                            "UPDATE emociones_detectadas SET contexto = %s WHERE emocion = %s AND user_id = %s;",
                            (nuevo_contexto, emocion.strip().lower(), user_id)
                        )
                    else:
                        cursor.execute(
                            "UPDATE emociones_detectadas SET contexto = %s WHERE emocion = %s;",
                            (nuevo_contexto, emocion.strip().lower())
                        )
                    print("üîÑ Emoci√≥n existente. Contexto actualizado.")
                else:
                    if tiene_user_id and user_id:
                        cursor.execute(
                            "INSERT INTO emociones_detectadas (emocion, contexto, user_id) VALUES (%s, %s, %s);",
                            (emocion.strip().lower(), contexto.strip(), user_id)
                        )
                    else:
                        cursor.execute(
                            "INSERT INTO emociones_detectadas (emocion, contexto) VALUES (%s, %s);",
                            (emocion.strip().lower(), contexto.strip())
                        )
                    print("üÜï Nueva emoci√≥n registrada exitosamente.")

                conn.commit()

        print("===============================================\n")

    except Exception as e:
        print(f"‚ùå Error al registrar emoci√≥n '{emocion}': {e}")



# ===================== REGISTRO DE INTERACCIONES Y RESPUESTAS =====================

# Registrar una interacci√≥n (versi√≥n extendida)
def registrar_interaccion(user_id: str, consulta: str, mensaje_original: str = None):
    try:
        print("\n===== DEPURACI√ìN - REGISTRO DE INTERACCI√ìN =====")
        print(f"Intentando registrar interacci√≥n: user_id={user_id}")
        print(f"Consulta purificada: {consulta}")
        print(f"Mensaje original: {mensaje_original}")

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        # Verifica si la columna "mensaje_original" existe; si no, la crea autom√°ticamente
        cursor.execute("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'interacciones' AND column_name = 'mensaje_original';
        """)
        columna_existente = cursor.fetchone()

        if not columna_existente:
            print("‚ö†Ô∏è La columna 'mensaje_original' no existe. Cre√°ndola...")
            cursor.execute("ALTER TABLE interacciones ADD COLUMN mensaje_original TEXT;")
            conn.commit()

        # Inserta la interacci√≥n con el mensaje original
        cursor.execute("""
            INSERT INTO interacciones (user_id, consulta, mensaje_original) 
            VALUES (%s, %s, %s) RETURNING id;
        """, (user_id, consulta, mensaje_original))
        
        interaccion_id = cursor.fetchone()[0]
        conn.commit()
        conn.close()

        print(f"‚úÖ Interacci√≥n registrada con √©xito. ID asignado: {interaccion_id}\n")
        return interaccion_id

    except Exception as e:
        print(f"‚ùå Error al registrar interacci√≥n en la base de datos: {e}\n")
        return None

# Registrar una respuesta generada por OpenAI en la base de datos
def registrar_respuesta_openai(interaccion_id: int, respuesta: str):
    """
    Registra la respuesta generada por OpenAI en la base de datos PostgreSQL.
    """
    try:
        print("\n===== DEPURACI√ìN - REGISTRO DE RESPUESTA OPENAI =====")
        print(f"Intentando registrar respuesta para interacci√≥n ID={interaccion_id}")

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # Verifica si la columna "respuesta" ya existe en la tabla "interacciones"
        cursor.execute("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'interacciones' AND column_name = 'respuesta';
        """)
        columna_existente = cursor.fetchone()

        if not columna_existente:
            print("‚ö†Ô∏è La columna 'respuesta' no existe en la tabla 'interacciones'. Cre√°ndola...")
            cursor.execute("ALTER TABLE interacciones ADD COLUMN respuesta TEXT;")
            conn.commit()

        # Actualiza la interacci√≥n con la respuesta generada por OpenAI
        cursor.execute("""
            UPDATE interacciones 
            SET respuesta = %s 
            WHERE id = %s;
        """, (respuesta, interaccion_id))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Respuesta registrada con √©xito para interacci√≥n ID={interaccion_id}\n")

    except Exception as e:
        print(f"‚ùå Error al registrar respuesta en la base de datos: {e}\n")

def registrar_auditoria_input_original(user_id: str, mensaje_original: str, mensaje_purificado: str):
    """
    Registra el input original y su versi√≥n purificada en una tabla de auditor√≠a.
    Permite trazabilidad entre lo que dijo el usuario y c√≥mo fue interpretado.
    """
    try:
        print("\nüìã Registrando input original y purificado en auditor√≠a")
        print(f"üë§ user_id: {user_id}")
        print(f"üìù Original: {mensaje_original}")
        print(f"üßº Purificado: {mensaje_purificado}")

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS auditoria_input_original (
                id SERIAL PRIMARY KEY,
                user_id TEXT NOT NULL,
                mensaje_original TEXT NOT NULL,
                mensaje_purificado TEXT NOT NULL,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)

        cursor.execute("""
            INSERT INTO auditoria_input_original (user_id, mensaje_original, mensaje_purificado)
            VALUES (%s, %s, %s);
        """, (user_id, mensaje_original.strip(), mensaje_purificado.strip()))

        conn.commit()
        conn.close()
        print("‚úÖ Auditor√≠a registrada exitosamente.\n")

    except Exception as e:
        print(f"‚ùå Error al registrar auditor√≠a del input original: {e}")

# Registrar una similitud sem√°ntica en la base de datos
def registrar_similitud_semantica(user_id: str, consulta: str, pregunta_faq: str, similitud: float):
    """
    Registra la similitud sem√°ntica en la tabla faq_similitud_logs.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO faq_similitud_logs (user_id, consulta, pregunta_faq, similitud)
            VALUES (%s, %s, %s, %s);
        """, (user_id, consulta, pregunta_faq, similitud))

        conn.commit()
        conn.close()
        print(f"üß† Similitud registrada con √©xito (Score: {similitud}) para FAQ: '{pregunta_faq}'\n")

    except Exception as e:
        print(f"‚ùå Error al registrar similitud sem√°ntica: {e}")

# Lista de palabras irrelevantes
palabras_irrelevantes = {
    "un", "una", "el", "la", "lo", "es", "son", "estoy", "siento", "me siento", "tambien", "tambien tengo", "que", "de", "en", 
    "por", "a", "me", "mi", "tengo", "mucho", "muy", "un", "poco", "tengo", "animicos", "si", "supuesto", "frecuentes", "verdad", "s√©", "hoy", "quiero", 
    "bastante", "mucho", "tambien", "gente", "frecuencia", "entendi", "hola", "estoy", "vos", "entiendo", 
    "soy", "mi", "de", "es", "4782-6465", "me", "siento", "para", "mucha", "y", "sufro", "vida", 
    "que", "opinas", "¬ø","?", "reinicia", "con", "del", "necesito", "me", "das"
}

def purificar_input_clinico(texto: str) -> str:
    import re

    try:
        if not isinstance(texto, str):
            return ""

        muletillas = [
            r'\b(este|eh+|mmm+|aj√°|tipo|digamos|o sea|viste|nada|bueno|a ver|me explico|ehh+)\b',
            r'\b(s√≠ s√≠|no no|claro claro)\b'
        ]

        for patron in muletillas:
            texto = re.sub(patron, '', texto, flags=re.IGNORECASE)

        texto = re.sub(r'\b(\w+)( \1\b)+', r'\1', texto, flags=re.IGNORECASE)
        texto = re.sub(r'\b(\w)( \1\b)+', r'\1', texto, flags=re.IGNORECASE)
        texto = re.sub(r'\s{2,}', ' ', texto)
        texto = re.sub(r'([.,!?]){2,}', r'\1', texto)
        texto = re.sub(r'\s+([.,!?])', r'\1', texto)

        texto = texto.strip()
        if texto:
            texto = texto[0].upper() + texto[1:]

        return texto

    except Exception as e:
        print(f"‚ùå Error en purificar_input_clinico: {e}")
        return ""

def clasificar_input_inicial(mensaje: str) -> str:
    saludo_simple = ["hola", "buenas", "buenos d√≠as", "buenas tardes", "buenas noches"]
    preguntas_administrativas = [
        "contacto", "n√∫mero", "numero", "whatsapp", "tel√©fono", "psic√≥logo", "psicologo", "terapia", "turno",
        "atenci√≥n", "consulta", "sesi√≥n", "precio", "valor", "cobertura", "obras sociales"
    ]
    indicadores_malestar = [
        "me siento", "estoy", "siento", "no puedo", "me cuesta", "me duele", "tengo miedo", "ansiedad", "triste", "deprimido"
    ]
    frases_cortesia = [
        "gracias", "muchas gracias", "muy amable", "te agradezco", "mil gracias", "ok gracias", "gracias por todo"
    ]

    mensaje_limpio = mensaje.lower().strip()

    if any(p in mensaje_limpio for p in indicadores_malestar):
        return "CLINICO"
    elif any(p in mensaje_limpio for p in preguntas_administrativas):
        return "ADMINISTRATIVO"
    elif mensaje_limpio in saludo_simple:
        return "SALUDO"
    elif mensaje_limpio in frases_cortesia:
        return "CORTESIA"
    return "OTRO"

# An√°lisis de texto del usuario
def analizar_texto(mensajes_usuario):
    """
    Analiza los mensajes del usuario para detectar coincidencias con los s√≠ntomas almacenados
    y muestra un cuadro probable y emociones o patrones de conducta adicionales detectados.
    """
    sintomas_existentes = obtener_sintomas()
    if not sintomas_existentes:
        return "No se encontraron s√≠ntomas en la base de datos para analizar."

    keyword_to_cuadro = {sintoma.lower(): cuadro for sintoma, cuadro in sintomas_existentes}
    coincidencias = []
    emociones_detectadas = []
    sintomas_sin_coincidencia = []

    # Procesar mensajes del usuario para detectar s√≠ntomas
    for mensaje in mensajes:
        user_words = mensaje.lower().split()
        # Filtrar palabras irrelevantes y descartar palabras cortas (como "se", "las")
        user_words = [
            palabra for palabra in user_words
            if palabra not in palabras_irrelevantes and len(palabra) > 2 and palabra.isalpha()
        ]

        for palabra in user_words:
            if palabra in keyword_to_cuadro:
                coincidencias.append(keyword_to_cuadro[palabra])
            elif palabra not in nuevos_sintomas:
                nuevos_sintomas.append(palabra)


    # Generar emociones detectadas a partir de mensajes sin coincidencia
    if len(coincidencias) < 2:
        texto_usuario = " ".join(mensajes_usuario)
        prompt = (
            f"Detect√° emociones negativas o patrones emocionales con implicancia cl√≠nica en el siguiente texto del usuario:\n\n"
            f"{texto_usuario}\n\n"
            "Identific√° √∫nicamente t√©rminos emocionalmente relevantes (individuales o compuestos), separados por comas, sin explicaciones adicionales.\n\n"
            "Si el contenido no incluye ning√∫n elemento cl√≠nico relevante, respond√© √∫nicamente con 'ninguna'."
        )

        try:
            emociones_detectadas = generar_respuesta_con_openai(prompt).split(",")
            emociones_detectadas = [
                emocion.strip().lower() for emocion in emociones_detectadas
                if emocion.strip().lower() not in palabras_irrelevantes
            ]

            # Registrar cada emoci√≥n detectada como s√≠ntoma en la base de datos
            for emocion in emociones_detectadas:
                registrar_sintoma(emocion, "patr√≥n emocional detectado")

        except Exception as e:
            print(f"Error al usar OpenAI para detectar emociones: {e}")


    if not coincidencias and not emociones_detectadas:
        return "No se encontraron suficientes coincidencias para determinar un cuadro probable."

    respuesta = ""
    if coincidencias:
        category_counts = Counter(coincidencias)
        cuadro_probable, _ = category_counts.most_common(1)[0]
        respuesta = (
            f"Con base en los s√≠ntomas detectados ({', '.join(set(coincidencias))}), "
            f"el malestar emocional predominante es: {cuadro_probable}. "
        )

    if emociones_detectadas:
        respuesta += (
            f"Adem√°s, notamos emociones o patrones de conducta humanos como {', '.join(set(emociones_detectadas))}, "
            f"por lo que sugiero solicitar una consulta con el Lic. Daniel O. Bustamante escribiendo al WhatsApp "
            f"+54 911 3310-1186 para una evaluaci√≥n m√°s detallada."
        )

    return respuesta

# Clase para solicitudes del usuario
class UserInput(BaseModel):
    mensaje: str
    user_id: str

# Gesti√≥n de sesiones (en memoria)
user_sessions = {}
SESSION_TIMEOUT = 600  # Tiempo en segundos para limpiar sesiones inactivas

@app.on_event("startup")
def startup_event():
    init_db()
    generar_embeddings_faq()  # ‚úÖ Genera embeddings de las preguntas frecuentes al iniciar la app
    start_session_cleaner()   # üßπ Limpia sesiones inactivas peri√≥dicamente

# Funci√≥n para limpiar sesiones inactivas
def start_session_cleaner():
    """
    Limpia las sesiones inactivas despu√©s de un tiempo definido (SESSION_TIMEOUT).
    """
    def cleaner():
        while True:
            current_time = time.time()
            inactive_users = [
                user_id for user_id, session in user_sessions.items()
                if current_time - session["ultima_interaccion"] > SESSION_TIMEOUT
            ]
            for user_id in inactive_users:
                del user_sessions[user_id]
            time.sleep(30)  # Intervalo para revisar las sesiones

    # Ejecutar la limpieza de sesiones en un hilo separado
    thread = threading.Thread(target=cleaner, daemon=True)
    thread.start()

# Manejo de respuestas repetitivas
def evitar_repeticion(respuesta, historial):
    respuestas_alternativas = [
        "Entiendo. ¬øPodr√≠as contarme m√°s sobre c√≥mo te sientes?",
        "Gracias por compartirlo. ¬øC√≥mo ha sido tu experiencia con esto?",
        "Eso parece importante. ¬øTe ha pasado antes?"
    ]
    if respuesta in historial:
        return random.choice(respuestas_alternativas)
    historial.append(respuesta)
    return respuesta

def obtener_coincidencias_sintomas_y_registrar(emociones):
    """
    Busca coincidencias de s√≠ntomas en la base de datos y devuelve una lista de estados emocionales relacionados.
    Si una emoci√≥n no tiene coincidencias exactas ni parciales, la registra en la base de datos para futura clasificaci√≥n.
    Luego, usa OpenAI para clasificar cualquier s√≠ntoma sin estado emocional asignado y lo actualiza en la base de datos.
    """
    if not emociones:
        return []

    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        print("\n===== DEPURACI√ìN SQL =====")
        print("Emociones detectadas:", emociones)

        # Buscar coincidencias exactas en la base de datos
        consulta = "SELECT sintoma, estado_emocional FROM palabras_clave WHERE sintoma = ANY(%s)"
        cursor.execute(consulta, (emociones,))
        resultados = cursor.fetchall()

        estados_emocionales = [resultado[1] for resultado in resultados]
        sintomas_existentes = [resultado[0] for resultado in resultados]

        print("S√≠ntomas encontrados en la BD:", sintomas_existentes)
        print("Estados emocionales encontrados:", estados_emocionales)

        # Identificar emociones que no est√°n en la base de datos y registrarlas sin estado emocional
        emociones_nuevas = [emocion for emocion in emociones if emocion not in sintomas_existentes]
        for emocion in emociones_nuevas:
            registrar_sintoma(emocion, None)  # Se registra sin estado emocional

        conn.commit()
        conn.close()

        # Ahora clasificamos los s√≠ntomas que se registraron sin estado emocional
        actualizar_sintomas_sin_estado_emocional()

        return estados_emocionales if estados_emocionales else []

    except Exception as e:
        print(f"‚ùå Error al obtener coincidencias de s√≠ntomas o registrar nuevos s√≠ntomas: {e}")
        return []

def obtener_emociones_ya_registradas(user_id, interaccion_id):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("""
            SELECT emocion FROM emociones_detectadas
            WHERE user_id = %s AND interaccion = %s
        """, (user_id, f"interacci√≥n {interaccion_id}"))
        resultados = cur.fetchall()
        emociones = [r[0].lower().strip() for r in resultados]
        cur.close()
        conn.close()
        return emociones
    except Exception as e:
        print(f"‚ùå Error al obtener emociones ya registradas en la BD: {e}")
        return []

def obtener_combinaciones_no_registradas(dias=7):
    """
    Devuelve una lista de combinaciones emocionales detectadas por el bot pero que a√∫n no tienen frase registrada.
    Por defecto, muestra las registradas en los √∫ltimos 'dias' (7 por defecto).
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        # Calcular fecha l√≠mite
        fecha_limite = datetime.now() - timedelta(days=dias)

        consulta = """
            SELECT emocion_1, emocion_2, fecha 
            FROM combinaciones_no_registradas
            WHERE fecha >= %s
            ORDER BY fecha DESC;
        """
        cursor.execute(consulta, (fecha_limite,))
        combinaciones = cursor.fetchall()
        conn.close()

        print(f"\nüìã Combinaciones emocionales no registradas (√∫ltimos {dias} d√≠as):")
        for emocion_1, emocion_2, fecha in combinaciones:
            print(f" - {emocion_1} + {emocion_2} ‚Üí {fecha.strftime('%Y-%m-%d %H:%M')}")

        return combinaciones

    except Exception as e:
        print(f"‚ùå Error al obtener combinaciones no registradas: {e}")
        return []

# ===================== REGISTRO DE SIMILITUD SEM√ÅNTICA =====================

def registrar_log_similitud(user_id: str, consulta: str, pregunta_faq: str, similitud: float):
    """
    Registra en la base de datos la similitud sem√°ntica detectada entre una consulta del usuario
    y una de las preguntas frecuentes, junto con su score.
    """
    try:
        print("\n======= üìå REGISTRO DE SIMILITUD SEM√ÅNTICA =======")
        print(f"üë§ user_id: {user_id}")
        print(f"üó®Ô∏è Consulta: {consulta}")
        print(f"‚ùì Pregunta FAQ: {pregunta_faq}")
        print(f"üìè Score de similitud: {similitud:.4f}")

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO faq_similitud_logs (user_id, consulta, pregunta_faq, similitud)
            VALUES (%s, %s, %s, %s);
        """, (user_id, consulta, pregunta_faq, float(similitud)))

        conn.commit()
        conn.close()
        print("‚úÖ Similitud registrada correctamente.\n")

    except Exception as e:
        print(f"‚ùå Error al registrar log de similitud: {e}")

def registrar_auditoria_respuesta(user_id: str, respuesta_original: str, respuesta_final: str, motivo_modificacion: str = None):
    """
    Registra la respuesta original de OpenAI y su versi√≥n final (modificada) en una tabla de auditor√≠a.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS auditoria_respuestas (
                id SERIAL PRIMARY KEY,
                user_id TEXT NOT NULL,
                respuesta_original TEXT NOT NULL,
                respuesta_final TEXT NOT NULL,
                motivo_modificacion TEXT,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)  # Seguridad: autocrea la tabla si no existe

        cursor.execute("""
            INSERT INTO auditoria_respuestas (user_id, respuesta_original, respuesta_final, motivo_modificacion)
            VALUES (%s, %s, %s, %s);
        """, (user_id, respuesta_original.strip(), respuesta_final.strip(), motivo_modificacion))
        conn.commit()
        conn.close()
        print("üìë Auditor√≠a registrada en auditoria_respuestas.")
    except Exception as e:
        print(f"‚ùå Error al registrar auditor√≠a de respuesta: {e}")

def generar_resumen_clinico_y_estado(session: dict, contador: int) -> str:
    """
    Genera una respuesta cl√≠nica con base en emociones detectadas y s√≠ntomas coincidentes.
    Se aplica en la interacci√≥n 5 y 9, devolviendo s√≠ntomas literales y estado emocional predominante.
    """
    mensajes = session.get("mensajes", [])
    emociones_acumuladas = session.get("emociones_detectadas", [])

    # Reanaliza todas las emociones en los mensajes para detectar nuevas
    emociones_detectadas = detectar_emociones_negativas(" ".join(mensajes)) or []
    nuevas_emociones = [e for e in emociones_detectadas if e not in emociones_acumuladas]
    session["emociones_detectadas"].extend(nuevas_emociones)

    if not session["emociones_detectadas"]:
        print(f"‚ö†Ô∏è No se detectaron emociones al llegar a la interacci√≥n {contador}")
        return (
            "No se identificaron emociones predominantes en este momento. "
            "Te sugiero contactar al Lic. Bustamante al WhatsApp +54 911 3310-1186 para una evaluaci√≥n m√°s precisa."
        )

    coincidencias_sintomas = obtener_coincidencias_sintomas_y_registrar(session["emociones_detectadas"])
    cuadro_predominante = (
        Counter(coincidencias_sintomas).most_common(1)[0][0]
        if len(coincidencias_sintomas) >= 2 else
        "No se pudo establecer con certeza un estado emocional predominante."
    )

    emociones_literal = ", ".join(set(session["emociones_detectadas"][:3]))

    respuesta = (
        f"Con base a lo que has descripto ‚Äî{emociones_literal}‚Äî, "
        f"pareciera ser que el malestar emocional predominante es: {cuadro_predominante}. "
        f"Te sugiero considerar una consulta con el Lic. Daniel O. Bustamante escribi√©ndole al WhatsApp +54 911 3310-1186 para una evaluaci√≥n m√°s detallada."
    )

    print(f"üßæ Resumen cl√≠nico generado correctamente en interacci√≥n {contador}")
    session["mensajes"].clear()
    return respuesta

@app.post("/asistente")
async def asistente(input_data: UserInput):
    try:
        user_id = input_data.user_id
        mensaje_original = input_data.mensaje.strip()
        mensaje_usuario = mensaje_original.lower()
        
        # üßΩ Etapa de purificaci√≥n cl√≠nica
        mensaje_usuario = purificar_input_clinico(mensaje_usuario)

        # üõ°Ô∏è Etapa de blindaje contra inputs maliciosos
        def es_input_malicioso(texto: str) -> bool:
            patrones_maliciosos = [
                r"(\bimport\b|\bos\b|\bsystem\b|\beval\b|\bexec\b|\bopenai\.api_key\b)",  # C√≥digo Python
                r"(\bdrop\b|\bdelete\b|\binsert\b|\bupdate\b).*?\b(table|database)\b",     # SQL Injection
                r"(--|#|;|//).*?(drop|delete|system|rm\s+-rf)",                             # Comentarios maliciosos
                r"<script.*?>|</script>",                                                  # HTML/JS malicioso
                r"\b(shutdown|reboot|rm\s+-rf|mkfs|chmod|chown)\b"                          # Shell commands peligrosos
            ]
            for patron in patrones_maliciosos:
                if re.search(patron, texto, re.IGNORECASE):
                    return True
            return False
        
        if es_input_malicioso(mensaje_usuario):
            print("‚ö†Ô∏èüîí Input malicioso detectado y bloqueado:")
            print(f"   üîπ Usuario ID: {user_id}")
            print(f"   üîπ Mensaje purificado: {mensaje_usuario}")
            print(f"   üîπ Mensaje original: {mensaje_original}")
            registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario + " [‚ö†Ô∏è DETECTADO COMO INPUT MALICIOSO]")
            return {
                "respuesta": (
                    "El sistema ha detectado que tu mensaje contiene elementos t√©cnicos no compatibles con una consulta cl√≠nica. "
                    "Si ten√©s una duda o problema de salud emocional, pod√©s contarme con confianza."
                )
            }
        
        print(f"üßº Input purificado: {mensaje_usuario}")
        print(f"üìù Input original: {mensaje_original}")

        # üìã Registro de auditor√≠a del mensaje original y purificado
        registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario)
        
        # üß† Detecci√≥n contextual con OpenAI (segunda capa de blindaje)
        try:
            prompt_contextual = (
                f"Analiz√° el siguiente mensaje y clasificalo seg√∫n su intencionalidad:\n"
                f"'{mensaje_usuario}'\n\n"
                "Opciones posibles:\n"
                "- CL√çNICO: si el mensaje describe emociones, estados an√≠micos, inquietudes personales o pedidos de orientaci√≥n psicol√≥gica.\n"
                "- TESTEO: si parece un intento de probar el sistema con frases sin valor cl√≠nico.\n"
                "- MALICIOSO: si contiene lenguaje de programaci√≥n, c√≥digo, SQL, shell, o expresiones t√©cnicas.\n"
                "- IRRELEVANTE: si no tiene ning√∫n contenido relacionado con una consulta emocional o psicol√≥gica.\n\n"
                "Devolv√© √∫nicamente una de las cuatro etiquetas: CL√çNICO, TESTEO, MALICIOSO o IRRELEVANTE."
            )
        
            response_contextual = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt_contextual}],
                max_tokens=20,
                temperature=0.0
            )
        
            clasificacion = response_contextual.choices[0].message['content'].strip().upper()
        
            if clasificacion in ["TESTEO", "MALICIOSO", "IRRELEVANTE"]:
                session = user_sessions[user_id]
                session["input_sospechoso"] = True  # üÜï Marcamos la sesi√≥n como sospechosa
                print("‚ö†Ô∏èüß† Input sospechoso detectado por OpenAI (contextual):")
                print(f"   üîπ Usuario ID: {user_id}")
                print(f"   üîπ Clasificaci√≥n: {clasificacion}")
                print(f"   üîπ Input: {mensaje_usuario}")
                registrar_auditoria_input_original(
                    user_id,
                    mensaje_original,
                    f"{mensaje_usuario} [‚ö†Ô∏è DETECTADO COMO INPUT {clasificacion} POR CONTEXTO]"
                )
                return {
                    "respuesta": (
                        "El sistema ha detectado que tu mensaje no parece formar parte de una consulta cl√≠nica. "
                        "Si necesit√°s orientaci√≥n emocional o psicol√≥gica, cont√°melo con tus propias palabras."
                    )
                }
        
        except Exception as e:
            print("üß†‚ùå OpenAI fall√≥ al clasificar input contextual.")
            print(f"   üîπ Usuario ID: {user_id}")
            print(f"   üîπ Input: {mensaje_usuario}")
            print(f"   üîπ Error: {e}")

        if not mensaje_usuario:
            raise HTTPException(status_code=400, detail="El mensaje no puede estar vac√≠o.")
        
        # Registrar interacci√≥n con mensaje original incluido
        interaccion_id = registrar_interaccion(user_id, mensaje_usuario, mensaje_original)

        # Inicializa la sesi√≥n del usuario si no existe
        if user_id not in user_sessions:
            user_sessions[user_id] = {
                "contador_interacciones": 0,
                "ultima_interaccion": time.time(),
                "mensajes": [],
                "emociones_detectadas": [],
                "ultimas_respuestas": [],
                "input_sospechoso": False  # üÜï Bandera de intento no cl√≠nico o manipulaci√≥n
            }

        # Actualiza la sesi√≥n del usuario
        session = user_sessions[user_id]
        session["ultima_interaccion"] = time.time()
        session["contador_interacciones"] += 1  # ‚úÖ Incrementar contador aqu√≠
        contador = session["contador_interacciones"]
        session["mensajes"].append(mensaje_usuario)

        # ‚õî Interrupci√≥n anticipada si ya se detect√≥ input sospechoso
        if session.get("input_sospechoso"):
            return {
                "respuesta": (
                    "Record√° que este espacio est√° destinado a consultas cl√≠nicas. "
                    "Si necesit√°s ayuda emocional, cont√°melo con claridad."
                )
            }

        # üëâ Nueva respuesta para la PRIMERA INTERACCI√ìN
        if contador == 1:
            tipo_input = clasificar_input_inicial(mensaje_usuario)
        
            if tipo_input == "CLINICO":
                return {
                    "respuesta": (
                        "¬°Hola! Bienvenido. Por lo que mencion√°s, parece que est√°s atravesando un malestar emocional. "
                        "¬øQuer√©s contarme un poco m√°s para poder comprender mejor lo que est√°s sintiendo?"
                    )
                }
        
            elif tipo_input == "ADMINISTRATIVO":
                return {
                    "respuesta": (
                        "¬°Hola! Soy el asistente del Lic. Daniel O. Bustamante. Si quer√©s contactarlo, pod√©s escribirle por WhatsApp al +54 911 3310-1186. "
                        "¬øHay algo m√°s que te gustar√≠a saber?"
                    )
                }
        
            elif tipo_input == "SALUDO":
                return {
                    "respuesta": "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?"
                }
            
            elif tipo_input == "CORTESIA":
                return {
                    "respuesta": "Con gusto. Si necesit√°s algo m√°s, estoy disponible para ayudarte."
                }
        
            return {
                "respuesta": (
                    "¬°Hola! Bienvenido. Contame c√≥mo puedo ayudarte: si est√°s buscando orientaci√≥n emocional, informaci√≥n sobre consultas o simplemente quer√©s hacer una pregunta, estoy para asistirte."
                )
            }
        
        # üîç Buscar coincidencia sem√°ntica en preguntas frecuentes
        resultado_semantico = buscar_respuesta_semantica_con_score(mensaje_usuario)
        if resultado_semantico:
            pregunta_faq, respuesta_semantica, similitud = resultado_semantico
        
            # Registrar respuesta en la interacci√≥n ya creada
            registrar_respuesta_openai(interaccion_id, respuesta_semantica)
        
            # Registrar similitud en la tabla correspondiente
            registrar_log_similitud(user_id, mensaje_usuario, pregunta_faq, similitud)
        
            return {"respuesta": respuesta_semantica}

        # üîç DEPURACI√ìN: Mostrar estado actual de la sesi√≥n
        print("\n===== DEPURACI√ìN - SESI√ìN DEL USUARIO =====")
        print(f"Usuario ID: {user_id}")
        print(f"Interacci√≥n actual: {contador}")
        print(f"Mensajes en la sesi√≥n: {session['mensajes']}")
        print(f"Emociones acumuladas antes del an√°lisis: {session['emociones_detectadas']}")
        print("========================================\n")
        
        # Detectar negaciones o correcciones
        if any(negacion in mensaje_usuario for negacion in ["no dije", "no eso", "no es as√≠", "eso no", "no fue lo que dije"]):
            return {"respuesta": "Entiendo, gracias por aclararlo. ¬øC√≥mo describir√≠as lo que sientes?"}


        # Manejo para "no s√©", "ninguna", "ni la menor idea" tras describir un s√≠ntoma
        if mensaje_usuario in ["no s√©", "ninguna", "ni la menor idea"]:
            if session["contador_interacciones"] >= 9 or session["mensajes"]:
                respuesta_clinica = generar_resumen_clinico_y_estado(session, contador)
                return {
                    "respuesta": (
                        f"{respuesta_clinica} En caso de que lo desees, pod√©s contactar al Lic. Daniel O. Bustamante escribi√©ndole al WhatsApp +54 911 3310-1186."
                    )
                }
            return {"respuesta": "Entendido, quedo a tu disposici√≥n. Si necesitas algo m√°s, no dudes en dec√≠rmelo."}
        
        # Respuesta espec√≠fica para saludos simples
        if mensaje_usuario in ["hola", "buenas", "buenos d√≠as", "buenas tardes", "buenas noches"]:
            return {"respuesta": "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?"}

        # Frases de agradecimiento y cierre (ajuste de tono profesional y neutral)
        agradecimientos = {
            "gracias", "muy amable", "te agradezco", "muchas gracias", "ok gracias", "perfecto, gracias", "mil gracias", "gracias por todo"
        }
        
        respuestas_agradecimiento = [
            "De nada. Si necesit√°s algo m√°s, quedo a disposici√≥n.",
            "Con gusto. Pod√©s escribirme si surge otra consulta.",
            "Cuando quieras. Estoy ac√° para ayudarte.",
            "No hay problema. Si te surge otra duda, avisame."
        ]
        
        cierres_usuario = [
            "ok", "todo bien", "nada m√°s", "me qued√≥ claro", "ya est√°", "no necesito m√°s", "en nada", "en nada mas", "no necesito nada mas", "estoy bien", "igual"
        ]
        
        respuestas_cierre = [
            "Entendido. Que tengas un buen d√≠a.",
            "Perfecto. Quedo a disposici√≥n si m√°s adelante necesit√°s algo.",
            "Gracias por tu mensaje. Si quer√©s retomar m√°s adelante, pod√©s escribirme.",
            "Est√° bien. Te deseo lo mejor."
        ]
        
        if mensaje_usuario in agradecimientos:
            return {"respuesta": random.choice(respuestas_agradecimiento)}
        
        if mensaje_usuario in cierres_usuario:
            return {"respuesta": random.choice(respuestas_cierre)}
        

        # üîπ Manejo de consulta sobre si el Lic. Bustamante atiende estos casos
        if "atienden estos casos" in mensaje_usuario or "atiende casos" in mensaje_usuario or "trata casos" in mensaje_usuario or "atiende temas" in mensaje_usuario or "trata temas" in mensaje_usuario or "atiende problemas" in mensaje_usuario or "trata problemas" in mensaje_usuario or "atiende estos" in mensaje_usuario or "trata estos" in mensaje_usuario or "atiende estos temas" in mensaje_usuario:
            return {
                "respuesta": "S√≠, el Lic. Daniel O. Bustamante es un profesional especializado en psicolog√≠a cl√≠nica y est√° capacitado para atender estos casos. "
                             "Si deseas consultarlo, puedes contactarlo a trav√©s de WhatsApp: +54 911 3310-1186."
            }
        
        # üîπ Proporciona el n√∫mero de contacto si el usuario lo solicita
        if (
            "contacto" in mensaje_usuario or
            "numero" in mensaje_usuario or
            "n√∫mero" in mensaje_usuario or
            "turno" in mensaje_usuario or
            "whatsapp" in mensaje_usuario or
            "tel√©fono" in mensaje_usuario or
            "psicologo" in mensaje_usuario or
            "psic√≥logo" in mensaje_usuario or
            "terapeuta" in mensaje_usuario or
            "psicoterapia" in mensaje_usuario or
            "terapia" in mensaje_usuario or
            "tratamiento psicol√≥gico" in mensaje_usuario or
            "recomendas" in mensaje_usuario or
            "telefono" in mensaje_usuario
        ):
            return {
                "respuesta": "Para contactar al Lic. Daniel O. Bustamante, pod√©s enviarle un mensaje al WhatsApp +54 911 3310-1186. √âl estar√° encantado de responderte."
            }
        
        # üîπ Evitar repetir la misma respuesta si ya se dio antes en la sesi√≥n
        if "bustamante" in mensaje_usuario or "telefono" in mensaje_usuario or "contacto" in mensaje_usuario:
            if session.get("telefono_mencionado"):
                return {"respuesta": "Si necesitas m√°s informaci√≥n sobre la terapia, dime en qu√© puedo ayudarte espec√≠ficamente."}
            
            session["telefono_mencionado"] = True
            return {
                "respuesta": "Para contactar al Lic. Daniel O. Bustamante, pod√©s enviarle un mensaje al WhatsApp +54 911 3310-1186. √âl estar√° encantado de responderte."
            }
        
        # üîπ Proporciona el n√∫mero de contacto si el usuario pregunta por el "mejor psic√≥logo" o especialista recomendado
        if (
            "especialista" in mensaje_usuario or
            "mejor psic√≥logo" in mensaje_usuario or
            "mejor psicologo" in mensaje_usuario or
            "mejor terapeuta" in mensaje_usuario or
            "mejor psicoterapeuta" in mensaje_usuario or
            "el mejor" in mensaje_usuario or
            "a quien me recomendas" in mensaje_usuario or
            "que opinas" in mensaje_usuario or
            "qu√© opinas" in mensaje_usuario or
            "excelente psic√≥logo" in mensaje_usuario or
            "buen profesional" in mensaje_usuario or
            "que me recomendas" in mensaje_usuario
        ):
            return {
                "respuesta": "En mi opini√≥n, el Lic. Daniel O. Bustamante es un excelente especialista en psicolog√≠a cl√≠nica. Seguramente podr√° ayudarte. "
                             "Puedes enviarle un mensaje al WhatsApp +54 911 3310-1186. √âl estar√° encantado de responderte."
            }

        # Manejo para "solo un s√≠ntoma y no m√°s" (responder como en la 5¬™ interacci√≥n y finalizar)
        if "no quiero dar m√°s s√≠ntomas" in mensaje_usuario or "solo este s√≠ntoma" in mensaje_usuario:
            mensajes = session["mensajes"]
            mensajes.append(mensaje_usuario)
            respuesta_analisis = analizar_texto(mensajes)
            session["mensajes"].clear()
            return {
                "respuesta": (
                    f"{respuesta_analisis} Si necesitas un an√°lisis m√°s profundo, tambi√©n te recomiendo contactar al Lic. Daniel O. Bustamante al WhatsApp "
                    f"+54 911 3310-1186 para una evaluaci√≥n m√°s detallada."
                )
            }
           
        # Lista de frases que no deben ser analizadas en la detecci√≥n de emociones
        frases_excluidas = [
            "¬øa qui√©n me recomiendas?", "a qui√©n me recomiendas", "me recomendar√≠as a alguien?",
            "qu√© opinas?", "el atiende estos casos?", "que tipo de casos atienden?"
        ]
        
        # Si el mensaje del usuario est√° en las frases excluidas, proporcionar respuesta fija
        if mensaje_usuario in frases_excluidas:
            return {
                "respuesta": (
                    "Si buscas una recomendaci√≥n profesional, te sugiero contactar al Lic. Daniel O. Bustamante. "
                    "√âl es un especialista en psicolog√≠a cl√≠nica y puede ayudarte en lo que necesites. "
                    "Puedes escribirle a su WhatsApp: +54 911 3310-1186."
                )
            }
        
        # Excluir "¬øA qui√©n me recomiendas?" del an√°lisis de emociones y darle una respuesta fija
        if mensaje_usuario in ["¬øa qui√©n me recomiendas?", "a qui√©n me recomiendas"]:
            return {
                "respuesta": (
                    "Si buscas una recomendaci√≥n profesional, te sugiero contactar al Lic. Daniel O. Bustamante. "
                    "√âl es un especialista en psicolog√≠a cl√≠nica y puede ayudarte en lo que necesites. "
                    "Puedes escribirle a su WhatsApp: +54 911 3310-1186."
                )
            }
        
        # ‚ùå Evitar an√°lisis emocional si el mensaje es irrelevante
        frases_omitir_emociones = [
            "solo quer√≠a saber eso", "solo eso", "nada m√°s", "ok", "est√° bien", "me qued√≥ claro", "ya entend√≠",
            "era solo una duda", "era curiosidad", "gracias", "me lo guardo", "te consultaba por otra persona",
            "me interesaba saber", "despu√©s veo", "lo consulto luego", "m√°s adelante veo", "ah ok", "claro", "entiendo",
            "s√≠, claro", "s√≠ gracias", "ya est√°", "de acuerdo", "lo veo despu√©s", "nada en particular", "todo bien", "s√≠"
        ]
        
        if any(frase in mensaje_usuario for frase in frases_omitir_emociones):
            emociones_detectadas = []
        else:
            emociones_detectadas = detectar_emociones_negativas(mensaje_usuario) or []
        
        if not isinstance(emociones_detectadas, list):
            emociones_detectadas = []

        # Obtener la lista de s√≠ntomas ya registrados en la BD
        sintomas_existentes = obtener_sintomas_existentes()
        
        # Filtrar emociones detectadas para evitar registrar duplicados
        emociones_nuevas = []
        
        for emocion in emociones_detectadas:
            emocion = emocion.lower().strip()
            
            # Verificar si la emoci√≥n ya fue detectada en la sesi√≥n para evitar registrar duplicados
            if emocion not in session["emociones_detectadas"]:
                
                # Si la emoci√≥n no est√° en la BD, agregarla a emociones_nuevas y registrar el s√≠ntoma
                if emocion not in sintomas_existentes:
                    emociones_nuevas.append(emocion)
                    registrar_sintoma(emocion)  # ‚úÖ Registrar en palabras_clave solo si no existe

        
        # üîç Depuraci√≥n: Mostrar qu√© emociones se intentar√°n registrar
        print(f"üîç Emociones nuevas que intentar√°n registrarse en palabras_clave: {emociones_nuevas}")
                
        # Registrar solo las emociones nuevas en la base de datos con un cuadro cl√≠nico asignado por OpenAI
        for emocion in emociones_nuevas:
            # Generar el prompt para OpenAI
            prompt_cuadro = (
                f"Asigna un cuadro cl√≠nico adecuado a la siguiente emoci√≥n: '{emocion}'.\n\n"
                "Analiza el s√≠ntoma y asigna el cuadro cl√≠nico m√°s adecuado en funci√≥n de trastornos, s√≠ndromes o patrones emocionales. "
                "Puedes incluir cualquier cuadro cl√≠nico relevante dentro de la psicolog√≠a, psiquiatr√≠a o bienestar emocional, "
                "sin limitarte a una lista fija. Si la emoci√≥n no encaja en un cuadro cl√≠nico espec√≠fico, usa 'Patr√≥n emocional detectado'.\n\n"
                
                "Ejemplos de cuadros cl√≠nicos v√°lidos:\n"
                "- Trastorno de ansiedad\n"
                "- Depresi√≥n mayor\n"
                "- Estr√©s postraum√°tico\n"
                "- Trastorno de p√°nico\n"
                "- Baja autoestima\n"
                "- Estado confusional\n"
                "- Desgaste emocional\n"
                "- Trastorno de impulsividad\n"
                "- Insomnio cr√≥nico\n"
                "- Desorientaci√≥n emocional\n"
                "- Sentimientos de aislamiento\n"
                "- Patr√≥n emocional detectado (si no encaja en ning√∫n otro cuadro cl√≠nico espec√≠fico)\n\n"
        
                "Devuelve √∫nicamente el cuadro cl√≠nico, sin texto adicional."
            )
        
            try:
                # Llamada a OpenAI para obtener el cuadro cl√≠nico
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt_cuadro}],
                    max_tokens=50,
                    temperature=0.0
                )
        
                cuadro_asignado = response.choices[0].message['content'].strip()
        
                # Si OpenAI no devuelve un cuadro v√°lido, asignar un valor por defecto
                if not cuadro_asignado:
                    cuadro_asignado = "Patr√≥n emocional detectado"
        
                # Registrar la emoci√≥n con el cuadro cl√≠nico asignado
                registrar_sintoma(emocion, cuadro_asignado)
                print(f"üÜï OpenAI asign√≥ el cuadro cl√≠nico: {cuadro_asignado} para la emoci√≥n '{emocion}'.")
        
            except Exception as e:
                print(f"‚ùå Error al obtener el cuadro cl√≠nico de OpenAI para '{emocion}': {e}")

        
        # üîç Confirmaci√≥n final de emociones registradas
        if emociones_nuevas:
            print(f"‚úÖ Se registraron las siguientes emociones nuevas en palabras_clave: {emociones_nuevas}")
        else:
            print("‚úÖ No hubo emociones nuevas para registrar en palabras_clave.")


        # Evitar agregar duplicados en emociones detectadas
        nuevas_emociones = [e for e in emociones_detectadas if e not in session["emociones_detectadas"]]
        session["emociones_detectadas"].extend(nuevas_emociones)
        
        # ‚úÖ Registrar emociones en la base solo si a√∫n no est√°n registradas en esta interacci√≥n
        emociones_registradas_bd = obtener_emociones_ya_registradas(user_id, contador)
        
        for emocion in session["emociones_detectadas"]:
            if emocion not in emociones_registradas_bd:
                registrar_emocion(emocion, f"interacci√≥n {contador}", user_id)
        
        # ‚úÖ En la interacci√≥n 5 y 9, generar resumen cl√≠nico y estado emocional predominante
        if contador == 5:
            resumen = generar_resumen_clinico_y_estado(session, contador)
            respuesta = f"{resumen} ¬øte interesar√≠a consultarlo con el Lic. Daniel O. Bustamante?"
            registrar_respuesta_openai(interaccion_id, respuesta)
            return {"respuesta": respuesta}
        
        if contador == 9:
            # Reanalizar s√≠ntomas de las interacciones 6, 7 y 8 (√∫ltimos 3 mensajes antes del 9)
            mensajes_previos = session["mensajes"][-3:]
            emociones_nuevas = []
        
            for mensaje in mensajes_previos:
                nuevas = detectar_emociones_negativas(mensaje) or []
                for emocion in nuevas:
                    emocion = emocion.lower().strip()
                    if emocion not in session["emociones_detectadas"]:
                        emociones_nuevas.append(emocion)
        
            # Unificar y eliminar duplicados antes del resumen cl√≠nico
            session["emociones_detectadas"] = list(set(session["emociones_detectadas"] + emociones_nuevas))
        
            # Registrar en la BD solo las emociones nuevas no registradas a√∫n para esta interacci√≥n
            emociones_registradas_bd = obtener_emociones_ya_registradas(user_id, contador)
            for emocion in emociones_nuevas:
                if emocion not in emociones_registradas_bd:
                    registrar_emocion(emocion, f"interacci√≥n {contador}", user_id)
        
            # Generar resumen cl√≠nico con todas las emociones acumuladas
            respuesta = generar_resumen_clinico_y_estado(session, contador)
        
            return {
                "respuesta": respuesta + " ¬øte interesar√≠a consultarlo con el Lic. Daniel O. Bustamante?"
            }
                      
        # Interacci√≥n 10: cierre profesional definitivo
        if contador == 10:
            respuesta = (
                "He encontrado interesante nuestra conversaci√≥n, pero para profundizar m√°s en el an√°lisis de tu malestar, "
                "ser√≠a ideal que consultes con un profesional. Por ello, te sugiero que te contactes con el Lic. Bustamante. "
                "Lamentablemente, no puedo continuar con la conversaci√≥n m√°s all√° de este punto."
            )
            registrar_respuesta_openai(interaccion_id, respuesta)
            return {"respuesta": respuesta}

        # Interacci√≥n 11 en adelante: cierre reiterado profesional
        if contador >= 11:
            print(f"üîí Interacci√≥n {contador}: se activ√≥ el modo de cierre definitivo. No se realizar√° nuevo an√°lisis cl√≠nico.")
            
            respuestas_cierre_definitivo = [
                "Como ya lo mencion√©, no puedo continuar con esta conversaci√≥n. Si quer√©s avanzar, escribile al Lic. Bustamante por WhatsApp al +54 911 3310-1186.",
                "Ya se ha completado el an√°lisis disponible en este espacio. Para continuar, pod√©s contactar al Lic. Bustamante al WhatsApp +54 911 3310-1186.",
                "No tengo permitido seguir m√°s all√° de este punto. Te recomiendo comunicarte con el Lic. Bustamante v√≠a WhatsApp: +54 911 3310-1186.",
                "Este espacio ha alcanzado su l√≠mite. Para una consulta m√°s profunda, pod√©s escribirle al Lic. Bustamante al +54 911 3310-1186.",
                "Record√° que si dese√°s un abordaje profesional completo, el Lic. Bustamante est√° disponible en WhatsApp: +54 911 3310-1186."
            ]
            return {"respuesta": random.choice(respuestas_cierre_definitivo)}
        
        # üîπ Consultas sobre obras sociales, prepagas o asistencia psicol√≥gica
        preguntas_cobertura = [
            r"(atiende[n|s]?|trabaja[n|s]?|acepta[n|s]?|tom[a|√°s]|toma[n]?|atiendo)\s+(por|con)?\s*(osde|swiss medical|galeno|prepaga|obra social|cobertura m√©dica|asistencia psicol√≥gica)",
            r"(osde|swiss medical|galeno|prepaga|obra social|cobertura m√©dica|asistencia psicol√≥gica)\s+.*(cubren|incluye|incluyen|puedo usar|sirve|vale|acepta|aceptan|trabaja|trabajan|atiende|atienden)",
            r"(puedo|quiero|necesito).*(usar|utilizar).*(osde|swiss medical|galeno|prepaga|obra social)",
            r"(cubren|cubre|acepta|acept√°s|aceptan|trabaja|trabaj√°s|trabajan|atiende|atend√©s|atienden).*?(osde|swiss medical|galeno|prepaga|obra social)"
        ]
        
        for patron in preguntas_cobertura:
            if re.search(patron, mensaje_usuario):
                return {
                    "respuesta": (
                        "El Lic. Daniel O. Bustamante no trabaja con obras sociales ni prepagas. "
                        "Atiende √∫nicamente de manera particular. Si quer√©s coordinar una sesi√≥n, pod√©s escribirle al WhatsApp +54 911 3310-1186."
                    )
                }
        
        # üîπ Consultas sobre precios, honorarios o valor de la sesi√≥n
        if any(palabra in mensaje_usuario for palabra in [
            "precio", "cu√°nto sale", "cu√°nto cuesta", "valor", "honorario", "cobra", "cobr√°s",
            "tarifa", "cu√°nto cobra", "cuanto cobra", "cu√°nto es", "sale la consulta", "vale la consulta",
            "cu√°nto cobran", "cu√°nto hay que pagar", "cu√°nto cuesta la consulta", "cu√°nto tengo que pagar"
        ]):
            return {
                "respuesta": (
                    "El valor de la sesi√≥n puede depender del tipo de consulta. "
                    "Para conocer el costo exacto, te recomiendo escribirle directamente al Lic. Bustamante al WhatsApp +54 911 3310-1186."
                )
            }


        # üîπ Consultas sobre los servicios psicol√≥gicos que ofrece
        consultas_servicios = [
            "qu√© servicios ofrece", "qu√© servicios brinda", "qu√© trata", "con qu√© trabaja", "en qu√© temas trabaja",
            "qu√© tipo de terapias hace", "qu√© tipo de terapia ofrece", "qu√© temas aborda", "qu√© puede tratar",
            "cu√°les son sus especialidades", "qu√© tipo de atenci√≥n brinda", "qu√© problemas trata", "qu√© √°reas trabaja",
            "temas que trata", "qu√© trata bustamante", "qu√© hace el licenciado", "qu√© atiende", "motivos de consulta",
            "problemas que atiende", "en qu√© puede ayudarme"
        ]
        
        if any(frase in mensaje_usuario for frase in consultas_servicios):
            return {
                "respuesta": (
                    "El Lic. Daniel O. Bustamante brinda atenci√≥n psicol√≥gica exclusivamente online, a trav√©s de videoconsultas.\n\n"
                    "Entre los principales motivos de consulta que aborda se encuentran:\n"
                    "- Psicoterapia individual para adultos (modalidad online)\n"
                    "- Tratamiento de crisis emocionales\n"
                    "- Abordaje de ansiedad, estr√©s y ataques de p√°nico\n"
                    "- Procesos de duelo y cambios vitales\n"
                    "- Estados an√≠micos depresivos\n"
                    "- Problemas de autoestima y motivaci√≥n\n"
                    "- Dificultades vinculares y emocionales\n"
                    "- Terapia de pareja online\n\n"
                    "Si quer√©s coordinar una consulta o ten√©s dudas, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
                )
            }

        # üîπ Consultas sobre duraci√≥n o frecuencia de las sesiones
        consultas_duracion_frecuencia = [
            "cu√°nto dura", "cuanto dura", "duraci√≥n de la sesi√≥n", "dura la sesi√≥n", "cu√°nto tiempo", "cu√°nto tiempo duran", 
            "cada cu√°nto", "frecuencia", "con qu√© frecuencia", "cu√°ntas veces", "cu√°ntas sesiones", "cada cu√°nto tiempo",
            "cu√°nto duran las sesiones", "duraci√≥n sesi√≥n", "sesi√≥n dura"
        ]
        
        if any(frase in mensaje_usuario for frase in consultas_duracion_frecuencia):
            return {
                "respuesta": (
                    "Las sesiones con el Lic. Daniel O. Bustamante tienen una duraci√≥n aproximada de 50 minutos y se realizan por videoconsulta.\n\n"
                    "La frecuencia puede variar seg√∫n cada caso, pero generalmente se recomienda un encuentro semanal para favorecer el proceso terap√©utico.\n\n"
                    "Si quer√©s coordinar una sesi√≥n o resolver alguna duda, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
                )
            }
            
        # üîπ Consultas sobre formas de pago, precios o modalidad de pago
        consultas_pago = [
            "c√≥mo se paga", "formas de pago", "medios de pago", "se puede pagar", "puedo pagar", "pago", "se abona", 
            "c√≥mo abono", "c√≥mo es el pago", "modalidad de pago", "se paga por sesi√≥n", "pagar con", "c√≥mo pagar"
        ]
        
        if any(frase in mensaje_usuario for frase in consultas_pago):
            return {
                "respuesta": (
                    "El Lic. Daniel O. Bustamante trabaja con modalidad de pago particular.\n\n"
                    "Para coordinar una sesi√≥n y consultar los medios de pago disponibles, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
                )
            }

        
        
        # üîπ Generar respuesta con OpenAI si no es la interacci√≥n 5, 9 o 10+
        prompt = (
            f"El siguiente mensaje fue recibido: '{mensaje_usuario}'. "
            "Redact√° una respuesta breve y profesional como si fueras un asistente cl√≠nico del Lic. Daniel O. Bustamante, psic√≥logo. "
            "El estilo debe ser cl√≠nico, objetivo y respetuoso. Evit√° cualquier frase emocional, coloquial o emp√°tica simulada como 'te entiendo', 'es normal', 'tranquilo/a', 'lamentablemente', etc. "
            "No generes contenido motivacional ni promesas de bienestar. No uses expresiones institucionales como 'nuestro equipo'. "
            "Us√° en cambio formulaciones profesionales como: 'Pareciera tratarse de...', 'Comprendo que refiere a...', 'Podr√≠a vincularse a...'. "
            "No brindes enlaces ni respondas sobre temas financieros, legales ni t√©cnicos. Referite al profesional siempre como 'el Lic. Bustamante'. "
            "IMPORTANTE: No recomiendes agendar consultas ni menciones su n√∫mero de contacto antes de la interacci√≥n n√∫mero 5, excepto si el usuario lo solicita de forma directa y expl√≠cita. "
            "Solo en las interacciones 5, 9 o eventualmente a partir de la 10, podr√°s sugerir contacto de forma neutral, sin insistencia ni persuasi√≥n emocional."
        )

        # Obtener respuesta de OpenAI
        respuesta_original = generar_respuesta_con_openai(prompt)
        
        # üîê Seguridad textual: verificar si la respuesta de OpenAI contiene elementos peligrosos
        if contiene_elementos_peligrosos(respuesta_original):
            respuesta_ai = (
                "Por razones de seguridad, la respuesta generada fue descartada por contener elementos t√©cnicos no permitidos. "
                "Pod√©s intentar formular tu consulta de otra manera o escribir directamente al WhatsApp del Lic. Bustamante: +54 911 3310-1186."
            )
            registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_ai, "Respuesta descartada por contener elementos peligrosos")
            return {"respuesta": respuesta_ai}

        
        # Validaci√≥n previa
        if not respuesta_original:
            respuesta_ai = (
                "Lo siento, hubo un inconveniente al generar una respuesta autom√°tica. Pod√©s escribirle al Lic. Bustamante al WhatsApp +54 911 3310-1186."
            )
            registrar_auditoria_respuesta(user_id, "Error al generar respuesta", respuesta_ai, "Error: OpenAI devolvi√≥ respuesta vac√≠a")
            return {"respuesta": respuesta_ai}
        
        respuesta_ai = respuesta_original  # Copia editable
        motivo = None

        # üîç Filtro para lenguaje institucional
        palabras_prohibidas = ["nosotros", "nuestro equipo", "nuestra instituci√≥n", "desde nuestra", "trabajamos en conjunto"]
        if any(palabra in respuesta_ai.lower() for palabra in palabras_prohibidas):
            respuesta_ai = (
                "Gracias por tu consulta. El Lic. Daniel O. Bustamante estar√° encantado de ayudarte. "
                "Pod√©s escribirle directamente al WhatsApp +54 911 3310-1186 para obtener m√°s informaci√≥n."
            )
        
        # üîç Filtro para desv√≠os tem√°ticos (por si OpenAI habla de finanzas o cosas raras)
        temas_prohibidos = ["finanzas", "inversiones", "educaci√≥n financiera", "consultor√≠a financiera", "legal", "t√©cnico"]
        if any(tema in respuesta_ai.lower() for tema in temas_prohibidos):
            respuesta_ai = (
                "El Lic. Daniel O. Bustamante es psic√≥logo cl√≠nico. Si quer√©s saber m√°s sobre los servicios que ofrece, "
                "pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186 y te brindar√° toda la informaci√≥n necesaria."
            )
        
        # üîç Reemplazo de marcador si qued√≥ en la respuesta
        respuesta_ai = respuesta_ai.replace("[Incluir n√∫mero de contacto]", "+54 911 3310-1186")

        # üõ°Ô∏è Filtrado de precios por si OpenAI menciona alg√∫n valor num√©rico
        if any(palabra in respuesta_ai.lower() for palabra in ["$", "usd", "euros", "‚Ç¨", "d√≥lares", "pesos", "cuesta", "sale", "vale", "precio", "tarifa", "honorario", "paga", "cobra", "cobro"]):
            respuesta_ai = (
                "Sobre los valores de la consulta, te sugiero contactar directamente al Lic. Daniel O. Bustamante. "
                "Pod√©s escribirle al WhatsApp +54 911 3310-1186 para obtener esa informaci√≥n de manera personalizada."
            )
            # üßæ Auditor√≠a: log si OpenAI intent√≥ responder con precios
            print("‚ö†Ô∏è Se intercept√≥ una respuesta con posible contenido de precios y fue reemplazada para evitar brindar esa informaci√≥n.")

        # Detectar modificaciones y registrar auditor√≠a
        if respuesta_original != respuesta_ai:
            motivo = "Respuesta modificada por contener lenguaje institucional, tem√°ticas no permitidas o precios"
            registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_ai, motivo)
        else:
            registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_ai)

        # Usar el ID de interacci√≥n previamente registrado para guardar la respuesta
        registrar_respuesta_openai(interaccion_id, respuesta_ai)
        
        return {"respuesta": respuesta_ai}

    except Exception as e:
        print(f"‚ùå Error inesperado en el endpoint /asistente: {e}")
        return {"respuesta": "Lo siento, ocurri√≥ un error al procesar tu solicitud. Pod√©s intentarlo de nuevo m√°s tarde o escribir al WhatsApp +54 911 3310-1186."}

