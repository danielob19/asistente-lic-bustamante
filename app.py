import os
import time
import threading
import psycopg2
from psycopg2 import sql
import openai
from fastapi import FastAPI, HTTPException, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, HTMLResponse
import numpy as np
import openai

# üß† Lista de preguntas frecuentes (FAQ) y sus respuestas fijas
faq_respuestas = [
    {
        "pregunta": "¬øQu√© servicios ofrece?",
        "respuesta": (
            "El Lic. Daniel O. Bustamante brinda atenci√≥n psicol√≥gica exclusivamente online, a trav√©s de videoconsultas.\n\n"
            "Entre los principales motivos de consulta que aborda se encuentran:\n"
            "- Psicoterapia individual para adultos (modalidad online)\n"
            "- Tratamiento de crisis emocionales\n"
            "- Abordaje de ansiedad, estr√©s y ataques de p√°nico\n"
            "- Procesos de duelo y cambios vitales\n"
            "- Estados an√≠micos depresivos\n"
            "- Problemas de autoestima y motivaci√≥n\n"
            "- Dificultades vinculares y emocionales\n"
            "- Terapia de pareja online\n\n"
            "Si quer√©s coordinar una consulta o ten√©s dudas, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
        )
    },
    {
        "pregunta": "¬øCu√°nto dura la sesi√≥n?",
        "respuesta": (
            "Las sesiones con el Lic. Daniel O. Bustamante tienen una duraci√≥n aproximada de 50 minutos y se realizan por videoconsulta.\n\n"
            "La frecuencia puede variar seg√∫n cada caso, pero generalmente se recomienda un encuentro semanal para favorecer el proceso terap√©utico.\n\n"
            "Si quer√©s coordinar una sesi√≥n, pod√©s escribirle por WhatsApp al +54 911 3310-1186."
        )
    },
    {
        "pregunta": "¬øTrabaja con obras sociales?",
        "respuesta": (
            "El Lic. Daniel O. Bustamante no trabaja con obras sociales ni prepagas. Atiende √∫nicamente de manera particular. "
            "Si quer√©s coordinar una sesi√≥n, pod√©s escribirle al WhatsApp +54 911 3310-1186."
        )
    }
]

# ‚ö° Generar embeddings de las preguntas frecuentes (una sola vez al iniciar la app)
def generar_embeddings_faq():
    preguntas = [item["pregunta"] for item in faq_respuestas]
    response = openai.Embedding.create(
        model="text-embedding-ada-002",
        input=preguntas
    )
    for i, embedding in enumerate(response["data"]):
        faq_respuestas[i]["embedding"] = np.array(embedding["embedding"])

from numpy.linalg import norm

def buscar_respuesta_semantica(mensaje: str, umbral=0.88) -> str | None:
    try:
        # Embedding del mensaje del usuario
        embedding_usuario = openai.Embedding.create(
            model="text-embedding-ada-002",
            input=mensaje
        )["data"][0]["embedding"]
        embedding_usuario = np.array(embedding_usuario)

        # Calcular similitud con cada pregunta frecuente
        mejor_score = 0
        mejor_respuesta = None
        for item in faq_respuestas:
            emb_faq = item.get("embedding")
            if emb_faq is not None:
                similitud = np.dot(embedding_usuario, emb_faq) / (norm(embedding_usuario) * norm(emb_faq))
                if similitud > mejor_score and similitud >= umbral:
                    mejor_score = similitud
                    mejor_respuesta = item["respuesta"]

        return mejor_respuesta

    except Exception as e:
        print(f"‚ùå Error en detecci√≥n sem√°ntica: {e}")
        return None


from pydantic import BaseModel
from collections import Counter
import random
import re

# Configuraci√≥n de la clave de API de OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise ValueError("OPENAI_API_KEY no est√° configurada en las variables de entorno.")

# Configuraci√≥n de la URL de la base de datos PostgreSQL
DATABASE_URL = "postgresql://my_postgres_db_oahe_user:AItPOENiOHIGPNva0eiCT0kK1od4UhZf@dpg-ctqqj0bqf0us73f4ar1g-a/my_postgres_db_oahe"

# Generaci√≥n de respuestas con OpenAI
def generar_respuesta_con_openai(prompt):
    try:
        print("\n===== DEPURACI√ìN - GENERACI√ìN DE RESPUESTA CON OPENAI =====")
        print(f"Prompt enviado a OpenAI: {prompt}")

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150,
            temperature=0.3
        )
        
        respuesta = response.choices[0].message['content'].strip()
        print(f"Respuesta generada por OpenAI: {respuesta}\n")
        return respuesta

    except Exception as e:
        print(f"Error al generar respuesta con OpenAI: {e}")
        return "Lo siento, hubo un problema al generar una respuesta. Por favor, intenta nuevamente."

# Funci√≥n para detectar emociones negativas usando OpenAI
def detectar_emociones_negativas(mensaje):
    prompt = (
        "Analiza el siguiente mensaje y detecta exclusivamente emociones humanas negativas o estados emocionales "
        "relacionados con malestar psicol√≥gico. Devuelve una lista separada por comas con las emociones detectadas, "
        "sin texto adicional. **Si el mensaje es ambiguo, devuelve la emoci√≥n negativa m√°s cercana en lugar de 'indeterminado'.**\n\n"
        
        "Ejemplos de emociones negativas y estados emocionales:\n"
        "- Tristeza, desesperanza, desolaci√≥n, impotencia, culpa, verg√ºenza, frustraci√≥n, ansiedad, miedo, desamparo, agotamiento.\n"
        "- Expresiones compuestas: 'sensaci√≥n de abandono', 'temor al rechazo', 'desgaste emocional', 'apat√≠a profunda'.\n\n"
        
        "Reglas de detecci√≥n:\n"
        "- **Si la emoci√≥n es una frase compuesta,** como 'desgaste emocional' o 'tristeza profunda', devu√©lvela completa.\n"
        "- **Si hay m√∫ltiples emociones en el mensaje,** devu√©lvelas separadas por comas.\n"
        "- **Si no hay emociones negativas claras,** devuelve 'ninguna'.\n\n"
    
        f"Mensaje: {mensaje}"
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=50,
            temperature=0.0
        )
        emociones = response.choices[0].message.get("content", "").strip().lower()

        # Mostrar resultado de OpenAI para depuraci√≥n
        print("\n===== DEPURACI√ìN - DETECCI√ìN DE EMOCIONES =====")
        print(f"Mensaje analizado: {mensaje}")
        print(f"Respuesta de OpenAI: {emociones}")

        # Limpiar el formato de la respuesta
        emociones = emociones.replace("emociones negativas detectadas:", "").strip()
        emociones = [emocion.strip() for emocion in emociones.split(",") if emocion.strip()]

        # Si OpenAI devuelve "ninguna", retornamos una lista vac√≠a
        if "ninguna" in emociones:
            print("No se detectaron emociones negativas.\n")
            return []

        print(f"Emociones detectadas: {emociones}\n")
        return emociones

    except Exception as e:
        print(f"‚ùå Error al detectar emociones negativas: {e}")
        return []

# Inicializaci√≥n de FastAPI
app = FastAPI()

# Configuraci√≥n de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuraci√≥n de la base de datos PostgreSQL
def init_db():
    """
    Crea las tablas necesarias si no existen en PostgreSQL.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS palabras_clave (
                id SERIAL PRIMARY KEY,
                sintoma TEXT UNIQUE NOT NULL,
                cuadro TEXT NOT NULL
            );
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS interacciones (
                id SERIAL PRIMARY KEY,
                user_id TEXT NOT NULL,
                consulta TEXT NOT NULL,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS emociones_detectadas (
                id SERIAL PRIMARY KEY,
                emocion TEXT NOT NULL,
                contexto TEXT NOT NULL,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS faq_similitud_logs (
                id SERIAL PRIMARY KEY,
                user_id TEXT NOT NULL,
                consulta TEXT NOT NULL,
                pregunta_faq TEXT NOT NULL,
                similitud FLOAT NOT NULL,
                fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        conn.commit()
        conn.close()
        print("Base de datos inicializada en PostgreSQL.")
    except Exception as e:
        print(f"Error al inicializar la base de datos: {e}")

# Registrar un s√≠ntoma con cuadro cl√≠nico asignado por OpenAI si no se proporciona
def registrar_sintoma(sintoma: str, cuadro_clinico: str = None):
    """
    Inserta un nuevo s√≠ntoma en la base de datos PostgreSQL si no existe.
    Si no se proporciona un cuadro cl√≠nico, OpenAI lo asignar√° autom√°ticamente.
    """

    # Si no se proporciona un cuadro cl√≠nico, usar OpenAI para asignarlo
    if cuadro_clinico is None or not cuadro_clinico.strip():
        try:
            prompt_cuadro = (
                f"Asigna un cuadro cl√≠nico adecuado a la siguiente emoci√≥n: '{sintoma}'.\n\n"
                "Debes identificar y asignar el cuadro cl√≠nico m√°s preciso en funci√≥n de trastornos, s√≠ndromes o patrones emocionales. "
                "Si la emoci√≥n no corresponde a un cuadro cl√≠nico espec√≠fico, asigna 'Patr√≥n emocional detectado'.\n\n"
                
                "No dejes la respuesta vac√≠a ni respondas con 'indeterminado'. Siempre asigna un cuadro cl√≠nico.\n\n"
            
                "Ejemplos de cuadros cl√≠nicos v√°lidos:\n"
                "- Trastorno de ansiedad\n"
                "- Depresi√≥n mayor\n"
                "- Estr√©s postraum√°tico\n"
                "- Trastorno de p√°nico\n"
                "- Baja autoestima\n"
                "- Estado confusional\n"
                "- Desgaste emocional\n"
                "- Trastorno de impulsividad\n"
                "- Insomnio cr√≥nico\n"
                "- Desorientaci√≥n emocional\n"
                "- Sentimientos de aislamiento\n"
                "- Patr√≥n emocional detectado (si no encaja en ning√∫n otro cuadro cl√≠nico espec√≠fico)\n\n"
            
                "Devuelve √∫nicamente el cuadro cl√≠nico, sin texto adicional."
            )

            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt_cuadro}],
                max_tokens=50,
                temperature=0.0
            )

            cuadro_clinico = response.choices[0].message['content'].strip()

            # Verificar si OpenAI devolvi√≥ un cuadro v√°lido
            if not cuadro_clinico:
                print(f"‚ö†Ô∏è OpenAI devolvi√≥ un cuadro vac√≠o para '{sintoma}'. Se usar√° 'Patr√≥n emocional detectado'.")
                cuadro_clinico = "Patr√≥n emocional detectado"

            print(f"üÜï OpenAI asign√≥ el cuadro cl√≠nico: {cuadro_clinico} para la emoci√≥n '{sintoma}'.")

        except Exception as e:
            print(f"‚ö†Ô∏è Error al obtener cuadro cl√≠nico de OpenAI para '{sintoma}': {e}")
            cuadro_clinico = "Patr√≥n emocional detectado"  # Fallback en caso de error

    # Insertar el s√≠ntoma con el cuadro cl√≠nico en la base de datos
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO palabras_clave (sintoma, cuadro) 
            VALUES (%s, %s)
            ON CONFLICT (sintoma) DO UPDATE SET cuadro = EXCLUDED.cuadro;
        """, (sintoma.strip().lower(), cuadro_clinico))
        conn.commit()
        conn.close()
        print(f"‚úÖ S√≠ntoma '{sintoma}' registrado con cuadro '{cuadro_clinico}'.")
    except Exception as e:
        print(f"‚ùå Error al registrar s√≠ntoma '{sintoma}' en la base de datos: {e}")


# Registrar una emoci√≥n detectada en la base de datos
def registrar_emocion(emocion: str, contexto: str):
    """
    Registra una emoci√≥n detectada en la base de datos PostgreSQL.
    Evita insertar duplicados y actualiza el contexto si ya existe.
    """
    try:
        print("\n===== DEPURACI√ìN - REGISTRO DE EMOCI√ìN =====")
        print(f"Intentando registrar emoci√≥n: {emocion} | Contexto: {contexto}")

        with psycopg2.connect(DATABASE_URL) as conn:
            with conn.cursor() as cursor:
                # Verificar si la emoci√≥n ya existe en la base de datos
                cursor.execute("SELECT contexto FROM emociones_detectadas WHERE emocion = %s;", (emocion.strip().lower(),))
                resultado = cursor.fetchone()

                if resultado:
                    # Si la emoci√≥n ya existe, actualizar el contexto
                    nuevo_contexto = f"{resultado[0]}; {contexto.strip()}"
                    cursor.execute("UPDATE emociones_detectadas SET contexto = %s WHERE emocion = %s;", 
                                   (nuevo_contexto, emocion.strip().lower()))
                    print(f"‚úÖ Emoci√≥n '{emocion}' ya existe. Contexto actualizado.")
                else:
                    # Si la emoci√≥n no existe, insertarla
                    cursor.execute("INSERT INTO emociones_detectadas (emocion, contexto) VALUES (%s, %s);", 
                                   (emocion.strip().lower(), contexto.strip()))
                    print(f"‚úÖ Nueva emoci√≥n '{emocion}' registrada en la base de datos.")

                conn.commit()
        print("========================================\n")

    except Exception as e:
        print(f"‚ùå Error al registrar emoci√≥n '{emocion}': {e}")


# Obtener s√≠ntomas existentes
def obtener_sintomas_existentes():
    """
    Obtiene todos los s√≠ntomas almacenados en la base de datos PostgreSQL y los devuelve como un conjunto en min√∫sculas.
    Esto mejora la comparaci√≥n y evita problemas con may√∫sculas/min√∫sculas.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT LOWER(sintoma) FROM palabras_clave")  # Convierte a min√∫sculas desde la BD
        sintomas = {row[0] for row in cursor.fetchall()}  # Convierte en un conjunto para b√∫squeda eficiente
        conn.close()
        return sintomas
    except Exception as e:
        print(f"‚ùå Error al obtener s√≠ntomas existentes: {e}")
        return set()

# Registrar una interacci√≥n
def registrar_interaccion(user_id: str, consulta: str):
    try:
        print("\n===== DEPURACI√ìN - REGISTRO DE INTERACCI√ìN =====")
        print(f"Intentando registrar interacci√≥n: user_id={user_id}, consulta={consulta}")

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO interacciones (user_id, consulta) 
            VALUES (%s, %s) RETURNING id;
        """, (user_id, consulta))
        
        interaccion_id = cursor.fetchone()[0]  # Obtener el ID insertado
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Interacci√≥n registrada con √©xito. ID asignado: {interaccion_id}\n")
        return interaccion_id  # Devolver el ID de la interacci√≥n

    except Exception as e:
        print(f"‚ùå Error al registrar interacci√≥n en la base de datos: {e}\n")
        return None

# Registrar una respuesta generada por OpenAI en la base de datos
def registrar_respuesta_openai(interaccion_id: int, respuesta: str):
    """
    Registra la respuesta generada por OpenAI en la base de datos PostgreSQL.
    """
    try:
        print("\n===== DEPURACI√ìN - REGISTRO DE RESPUESTA OPENAI =====")
        print(f"Intentando registrar respuesta para interacci√≥n ID={interaccion_id}")

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # Verifica si la columna "respuesta" ya existe en la tabla "interacciones"
        cursor.execute("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'interacciones' AND column_name = 'respuesta';
        """)
        columna_existente = cursor.fetchone()

        if not columna_existente:
            print("‚ö†Ô∏è La columna 'respuesta' no existe en la tabla 'interacciones'. Cre√°ndola...")
            cursor.execute("ALTER TABLE interacciones ADD COLUMN respuesta TEXT;")
            conn.commit()

        # Actualiza la interacci√≥n con la respuesta generada por OpenAI
        cursor.execute("""
            UPDATE interacciones 
            SET respuesta = %s 
            WHERE id = %s;
        """, (respuesta, interaccion_id))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Respuesta registrada con √©xito para interacci√≥n ID={interaccion_id}\n")

    except Exception as e:
        print(f"‚ùå Error al registrar respuesta en la base de datos: {e}\n")


# Lista de palabras irrelevantes
palabras_irrelevantes = {
    "un", "una", "el", "la", "lo", "es", "son", "estoy", "siento", "me siento", "tambien", "tambien tengo", "que", "de", "en", 
    "por", "a", "me", "mi", "tengo", "mucho", "muy", "un", "poco", "tengo", "animicos", "si", "supuesto", "frecuentes", "verdad", "s√©", "hoy", "quiero", 
    "bastante", "mucho", "tambien", "gente", "frecuencia", "entendi", "hola", "estoy", "vos", "entiendo", 
    "soy", "mi", "de", "es", "4782-6465", "me", "siento", "para", "mucha", "y", "sufro", "vida", 
    "que", "opinas", "¬ø","?", "reinicia", "con", "del", "necesito", "me", "das"
}

# An√°lisis de texto del usuario
def analizar_texto(mensajes_usuario):
    """
    Analiza los mensajes del usuario para detectar coincidencias con los s√≠ntomas almacenados
    y muestra un cuadro probable y emociones o patrones de conducta adicionales detectados.
    """
    sintomas_existentes = obtener_sintomas()
    if not sintomas_existentes:
        return "No se encontraron s√≠ntomas en la base de datos para analizar."

    keyword_to_cuadro = {sintoma.lower(): cuadro for sintoma, cuadro in sintomas_existentes}
    coincidencias = []
    emociones_detectadas = []
    sintomas_sin_coincidencia = []

    # Procesar mensajes del usuario para detectar s√≠ntomas
    for mensaje in mensajes:
        user_words = mensaje.lower().split()
        # Filtrar palabras irrelevantes y descartar palabras cortas (como "se", "las")
        user_words = [
            palabra for palabra in user_words
            if palabra not in palabras_irrelevantes and len(palabra) > 2 and palabra.isalpha()
        ]

        for palabra in user_words:
            if palabra in keyword_to_cuadro:
                coincidencias.append(keyword_to_cuadro[palabra])
            elif palabra not in nuevos_sintomas:
                nuevos_sintomas.append(palabra)


    # Generar emociones detectadas a partir de mensajes sin coincidencia
    if len(coincidencias) < 2:
        texto_usuario = " ".join(mensajes_usuario)
        prompt = (
            f"Analiza el siguiente mensaje y detecta emociones o patrones de conducta humanos impl√≠citos:\n\n"
            f"{texto_usuario}\n\n"
            "Responde con una lista de emociones o patrones de conducta separados por comas."
        )
        try:
            emociones_detectadas = generar_respuesta_con_openai(prompt).split(",")
            emociones_detectadas = [
                emocion.strip().lower() for emocion in emociones_detectadas
                if emocion.strip().lower() not in palabras_irrelevantes
            ]

            # Registrar cada emoci√≥n detectada como s√≠ntoma en la base de datos
            for emocion in emociones_detectadas:
                registrar_sintoma(emocion, "patr√≥n emocional detectado")

        except Exception as e:
            print(f"Error al usar OpenAI para detectar emociones: {e}")


    if not coincidencias and not emociones_detectadas:
        return "No se encontraron suficientes coincidencias para determinar un cuadro probable."

    respuesta = ""
    if coincidencias:
        category_counts = Counter(coincidencias)
        cuadro_probable, _ = category_counts.most_common(1)[0]
        respuesta = (
            f"Con base en los s√≠ntomas detectados ({', '.join(set(coincidencias))}), "
            f"el cuadro probable es: {cuadro_probable}. "
        )

    if emociones_detectadas:
        respuesta += (
            f"Adem√°s, notamos emociones o patrones de conducta humanos como {', '.join(set(emociones_detectadas))}, "
            f"por lo que sugiero solicitar una consulta con el Lic. Daniel O. Bustamante escribiendo al WhatsApp "
            f"+54 911 3310-1186 para una evaluaci√≥n m√°s detallada."
        )

    return respuesta

# Clase para solicitudes del usuario
class UserInput(BaseModel):
    mensaje: str
    user_id: str

# Gesti√≥n de sesiones (en memoria)
user_sessions = {}
SESSION_TIMEOUT = 60  # Tiempo en segundos para limpiar sesiones inactivas

@app.on_event("startup")
def startup_event():
    init_db()
    # Inicia un hilo para limpiar sesiones inactivas
    start_session_cleaner()

# Funci√≥n para limpiar sesiones inactivas
def start_session_cleaner():
    """
    Limpia las sesiones inactivas despu√©s de un tiempo definido (SESSION_TIMEOUT).
    """
    def cleaner():
        while True:
            current_time = time.time()
            inactive_users = [
                user_id for user_id, session in user_sessions.items()
                if current_time - session["ultima_interaccion"] > SESSION_TIMEOUT
            ]
            for user_id in inactive_users:
                del user_sessions[user_id]
            time.sleep(30)  # Intervalo para revisar las sesiones

    # Ejecutar la limpieza de sesiones en un hilo separado
    thread = threading.Thread(target=cleaner, daemon=True)
    thread.start()

# Manejo de respuestas repetitivas
def evitar_repeticion(respuesta, historial):
    respuestas_alternativas = [
        "Entiendo. ¬øPodr√≠as contarme m√°s sobre c√≥mo te sientes?",
        "Gracias por compartirlo. ¬øC√≥mo ha sido tu experiencia con esto?",
        "Eso parece importante. ¬øTe ha pasado antes?"
    ]
    if respuesta in historial:
        return random.choice(respuestas_alternativas)
    historial.append(respuesta)
    return respuesta

def obtener_coincidencias_sintomas_y_registrar(emociones):
    """
    Busca coincidencias de s√≠ntomas en la base de datos y devuelve una lista de cuadros cl√≠nicos relacionados.
    Si una emoci√≥n no tiene coincidencias exactas ni parciales, la registra en la base de datos para futura clasificaci√≥n.
    Luego, usa OpenAI para clasificar cualquier s√≠ntoma sin cuadro y lo actualiza en la base de datos.
    """
    if not emociones:
        return []

    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        print("\n===== DEPURACI√ìN SQL =====")
        print("Emociones detectadas:", emociones)

        # Buscar coincidencias exactas en la base de datos
        consulta = "SELECT sintoma, cuadro FROM palabras_clave WHERE sintoma = ANY(%s)"
        cursor.execute(consulta, (emociones,))
        resultados = cursor.fetchall()

        cuadros_probables = [resultado[1] for resultado in resultados]
        sintomas_existentes = [resultado[0] for resultado in resultados]

        print("S√≠ntomas encontrados en la BD:", sintomas_existentes)
        print("Cuadros cl√≠nicos encontrados:", cuadros_probables)

        # Identificar emociones que no est√°n en la base de datos y registrarlas sin cuadro cl√≠nico
        emociones_nuevas = [emocion for emocion in emociones if emocion not in sintomas_existentes]
        for emocion in emociones_nuevas:
            registrar_sintoma(emocion, None)  # Se registra sin cuadro cl√≠nico

        conn.commit()
        conn.close()

        # Ahora clasificamos los s√≠ntomas que se registraron sin cuadro cl√≠nico
        clasificar_sintomas_sin_cuadro()

        return cuadros_probables if cuadros_probables else []

    except Exception as e:
        print(f"‚ùå Error al obtener coincidencias de s√≠ntomas o registrar nuevos s√≠ntomas: {e}")
        return []

def clasificar_sintomas_sin_cuadro():
    """
    Busca s√≠ntomas en la base de datos sin un cuadro cl√≠nico asignado,
    los clasifica con OpenAI y los actualiza en la base de datos.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        # Obtener s√≠ntomas sin cuadro asignado
        cursor.execute("SELECT sintoma FROM palabras_clave WHERE cuadro IS NULL;")
        sintomas_sin_cuadro = [row[0] for row in cursor.fetchall()]
        conn.close()

        if not sintomas_sin_cuadro:
            print("‚úÖ No hay s√≠ntomas pendientes de clasificaci√≥n.")
            return

        print(f"üîç Clasificando {len(sintomas_sin_cuadro)} s√≠ntomas sin cuadro asignado...")

        for sintoma in sintomas_sin_cuadro:
            # Clasificar s√≠ntoma con OpenAI
            prompt = f"""
            Dado el s√≠ntoma '{sintoma}', clasif√≠calo dentro de un cuadro psicol√≥gico basado en el contexto.
            Algunas opciones pueden ser: "Ansiedad", "Depresi√≥n", "Estr√©s", "Trastorno F√≥bico", "Trastorno del sue√±o", etc.
            Responde solo con el nombre del cuadro sin explicaciones adicionales.
            """

            try:
                respuesta = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=50,
                    temperature=0.0
                )

                cuadro_clinico = respuesta["choices"][0]["message"]["content"].strip()
                print(f"‚úÖ S√≠ntoma '{sintoma}' clasificado como '{cuadro_clinico}'.")

                # Reutilizamos la funci√≥n existente para registrar el s√≠ntoma con su cuadro cl√≠nico
                registrar_sintoma(sintoma, cuadro_clinico)

            except Exception as e:
                print(f"‚ö†Ô∏è Error al clasificar s√≠ntoma '{sintoma}': {e}")

    except Exception as e:
        print(f"‚ùå Error al conectar con la base de datos para obtener s√≠ntomas sin cuadro: {e}")


@app.post("/asistente")
async def asistente(input_data: UserInput):
    try:
        user_id = input_data.user_id
        mensaje_usuario = input_data.mensaje.strip().lower()

        if not mensaje_usuario:
            raise HTTPException(status_code=400, detail="El mensaje no puede estar vac√≠o.")

        # Registrar interacci√≥n en la base de datos
        registrar_interaccion(user_id, mensaje_usuario)

        # Inicializa la sesi√≥n del usuario si no existe
        if user_id not in user_sessions:
            user_sessions[user_id] = {
                "contador_interacciones": 0,
                "ultima_interaccion": time.time(),
                "mensajes": [],
                "emociones_detectadas": [], # Para almacenar emociones detectadas
                "ultimas_respuestas": []
            }

        # Actualiza la sesi√≥n del usuario
        session = user_sessions[user_id]
        session["ultima_interaccion"] = time.time()
        session["contador_interacciones"] += 1  # ‚úÖ Incrementar contador aqu√≠
        contador = session["contador_interacciones"]
        session["mensajes"].append(mensaje_usuario)

        # üîç Buscar coincidencia sem√°ntica en preguntas frecuentes
        respuesta_semantica = buscar_respuesta_semantica(mensaje_usuario)
        if respuesta_semantica:
            # Registrar interacci√≥n normalmente, aunque no se detecten emociones
            interaccion_id = registrar_interaccion(user_id, mensaje_usuario)
            registrar_respuesta_openai(interaccion_id, respuesta_semantica)
            return {"respuesta": respuesta_semantica}

        # üîç DEPURACI√ìN: Mostrar estado actual de la sesi√≥n
        print("\n===== DEPURACI√ìN - SESI√ìN DEL USUARIO =====")
        print(f"Usuario ID: {user_id}")
        print(f"Interacci√≥n actual: {contador}")
        print(f"Mensajes en la sesi√≥n: {session['mensajes']}")
        print(f"Emociones acumuladas antes del an√°lisis: {session['emociones_detectadas']}")
        print("========================================\n")
        
        # Detectar negaciones o correcciones
        if any(negacion in mensaje_usuario for negacion in ["no dije", "no eso", "no es as√≠", "eso no", "no fue lo que dije"]):
            return {"respuesta": "Entiendo, gracias por aclararlo. ¬øC√≥mo describir√≠as lo que sientes?"}


        # Manejo para "no s√©", "ninguna", "ni la menor idea" tras describir un s√≠ntoma
        if mensaje_usuario in ["no s√©", "ninguna", "ni la menor idea"]:
            # Verificar si ya se alcanzaron suficientes interacciones para un an√°lisis
            if session["contador_interacciones"] >= 9 or session["mensajes"]:
                cuadro_probable = obtener_cuadro_probable(session.get("emociones_detectadas", []))
                emociones_todas = ", ".join(set(session.get("emociones_detectadas", [])[:3]))  # Limitar a 3 emociones

                if not cuadro_probable or cuadro_probable == "no identificado":
                    return {
                        "respuesta": (
                            "Entiendo que no tengas una respuesta clara en este momento. Si sientes que necesitas m√°s ayuda, "
                            "puedes comunicarte con el Lic. Daniel O. Bustamante al WhatsApp +54 911 3310-1186. Estoy aqu√≠ si quieres seguir conversando."
                        )
                    }
                return {
                    "respuesta": (
                        f"Si bien encuentro muy interesante nuestra conversaci√≥n, debo concluirla. No obstante, en base a los s√≠ntomas "
                        f"detectados, el cuadro probable es: {cuadro_probable}. Adem√°s, notamos emociones como {emociones_todas}. "
                        f"Te recomiendo contactar al Lic. Daniel O. Bustamante escribiendo al WhatsApp +54 911 3310-1186 para una evaluaci√≥n "
                        f"m√°s detallada. Un saludo."
                    )
                }

            # Si no hay un an√°lisis previo, responder de manera neutral
            return {"respuesta": "Entendido, quedo a tu disposici√≥n. Si necesitas algo m√°s, no dudes en dec√≠rmelo."}


        # Manejo para mensajes de cierre (sin insistir ni contabilizar interacciones)
        if mensaje_usuario in ["ok", "gracias", "en nada", "en nada mas", "nada mas", "no necesito nada mas", "estoy bien", "igual"]:
            return {"respuesta": "Entendido, quedo a tu disposici√≥n. Si necesitas algo m√°s, no dudes en dec√≠rmelo."}

        # Respuesta espec√≠fica para saludos simples
        if mensaje_usuario in ["hola", "buenas", "buenos d√≠as", "buenas tardes", "buenas noches"]:
            return {"respuesta": "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?"}

        # üîπ Manejo de agradecimientos
        agradecimientos = {"gracias", "muy amable", "te agradezco", "muchas gracias", "ok gracias"}
        if mensaje_usuario in agradecimientos:
            return {"respuesta": "De nada, estoy para ayudarte. Que tengas un buen d√≠a."}

        # Detectar "igual" solo si la √∫ltima respuesta fue una despedida o agradecimiento
        if mensaje_usuario == "igual" and session["ultimas_respuestas"] and session["ultimas_respuestas"][-1] in mensajes_cierre:
            return {"respuesta": "Entendido, quedo a tu disposici√≥n. Si necesitas algo m√°s, no dudes en dec√≠rmelo."}

        # üîπ Manejo de consulta sobre si el Lic. Bustamante atiende estos casos
        if "atienden estos casos" in mensaje_usuario or "atiende casos" in mensaje_usuario or "trata casos" in mensaje_usuario or "atiende temas" in mensaje_usuario or "trata temas" in mensaje_usuario or "atiende problemas" in mensaje_usuario or "trata problemas" in mensaje_usuario or "atiende estos" in mensaje_usuario or "trata estos" in mensaje_usuario or "atiende estos temas" in mensaje_usuario:
            return {
                "respuesta": "S√≠, el Lic. Daniel O. Bustamante es un profesional especializado en psicolog√≠a cl√≠nica y est√° capacitado para atender estos casos. "
                             "Si deseas consultarlo, puedes contactarlo a trav√©s de WhatsApp: +54 911 3310-1186."
            }
        
        # üîπ Proporciona el n√∫mero de contacto si el usuario lo solicita
        if (
            "contacto" in mensaje_usuario or
            "numero" in mensaje_usuario or
            "n√∫mero" in mensaje_usuario or
            "turno" in mensaje_usuario or
            "whatsapp" in mensaje_usuario or
            "tel√©fono" in mensaje_usuario or
            "psicologo" in mensaje_usuario or
            "psic√≥logo" in mensaje_usuario or
            "terapeuta" in mensaje_usuario or
            "psicoterapia" in mensaje_usuario or
            "terapia" in mensaje_usuario or
            "tratamiento psicol√≥gico" in mensaje_usuario or
            "recomendas" in mensaje_usuario or
            "telefono" in mensaje_usuario
        ):
            return {
                "respuesta": "Para contactar al Lic. Daniel O. Bustamante, puedes enviarle un mensaje al WhatsApp +54 911 3310-1186. √âl estar√° encantado de responderte."
            }
        
        # üîπ Evitar repetir la misma respuesta si ya se dio antes en la sesi√≥n
        if "bustamante" in mensaje_usuario or "telefono" in mensaje_usuario or "contacto" in mensaje_usuario:
            if session.get("telefono_mencionado"):
                return {"respuesta": "Si necesitas m√°s informaci√≥n sobre la terapia, dime en qu√© puedo ayudarte espec√≠ficamente."}
            
            session["telefono_mencionado"] = True
            return {
                "respuesta": "Para contactar al Lic. Daniel O. Bustamante, puedes enviarle un mensaje al WhatsApp +54 911 3310-1186. √âl estar√° encantado de responderte."
            }
        
        # üîπ Proporciona el n√∫mero de contacto si el usuario pregunta por el "mejor psic√≥logo" o especialista recomendado
        if (
            "especialista" in mensaje_usuario or
            "mejor psic√≥logo" in mensaje_usuario or
            "mejor psicologo" in mensaje_usuario or
            "mejor terapeuta" in mensaje_usuario or
            "mejor psicoterapeuta" in mensaje_usuario or
            "el mejor" in mensaje_usuario or
            "a quien me recomendas" in mensaje_usuario or
            "que opinas" in mensaje_usuario or
            "qu√© opinas" in mensaje_usuario or
            "excelente psic√≥logo" in mensaje_usuario or
            "buen profesional" in mensaje_usuario or
            "que me recomendas" in mensaje_usuario
        ):
            return {
                "respuesta": "En mi opini√≥n, el Lic. Daniel O. Bustamante es un excelente especialista en psicolog√≠a cl√≠nica. Seguramente podr√° ayudarte. "
                             "Puedes enviarle un mensaje al WhatsApp +54 911 3310-1186. √âl estar√° encantado de responderte."
            }

        # Manejo para "solo un s√≠ntoma y no m√°s" (responder como en la 5¬™ interacci√≥n y finalizar)
        if "no quiero dar m√°s s√≠ntomas" in mensaje_usuario or "solo este s√≠ntoma" in mensaje_usuario:
            mensajes = session["mensajes"]
            mensajes.append(mensaje_usuario)
            respuesta_analisis = analizar_texto(mensajes)
            session["mensajes"].clear()
            return {
                "respuesta": (
                    f"{respuesta_analisis} Si necesitas un an√°lisis m√°s profundo, tambi√©n te recomiendo contactar al Lic. Daniel O. Bustamante al WhatsApp "
                    f"+54 911 3310-1186 para una evaluaci√≥n m√°s detallada."
                )
            }
           
        # Lista de frases que no deben ser analizadas en la detecci√≥n de emociones
        frases_excluidas = [
            "¬øa qui√©n me recomiendas?", "a qui√©n me recomiendas", "me recomendar√≠as a alguien?",
            "qu√© opinas?", "el atiende estos casos?", "que tipo de casos atienden?"
        ]
        
        # Si el mensaje del usuario est√° en las frases excluidas, proporcionar respuesta fija
        if mensaje_usuario in frases_excluidas:
            return {
                "respuesta": (
                    "Si buscas una recomendaci√≥n profesional, te sugiero contactar al Lic. Daniel O. Bustamante. "
                    "√âl es un especialista en psicolog√≠a cl√≠nica y puede ayudarte en lo que necesites. "
                    "Puedes escribirle a su WhatsApp: +54 911 3310-1186."
                )
            }
        
        # Excluir "¬øA qui√©n me recomiendas?" del an√°lisis de emociones y darle una respuesta fija
        if mensaje_usuario in ["¬øa qui√©n me recomiendas?", "a qui√©n me recomiendas"]:
            return {
                "respuesta": (
                    "Si buscas una recomendaci√≥n profesional, te sugiero contactar al Lic. Daniel O. Bustamante. "
                    "√âl es un especialista en psicolog√≠a cl√≠nica y puede ayudarte en lo que necesites. "
                    "Puedes escribirle a su WhatsApp: +54 911 3310-1186."
                )
            }
        
        # üîç Asegurar que la lista de emociones est√° actualizada solo si el mensaje no est√° en la lista de exclusi√≥n
        emociones_detectadas = detectar_emociones_negativas(mensaje_usuario) or []
        
        if not isinstance(emociones_detectadas, list):
            emociones_detectadas = []

        # Obtener la lista de s√≠ntomas ya registrados en la BD
        sintomas_existentes = obtener_sintomas_existentes()
        
        # Filtrar emociones detectadas para evitar registrar duplicados
        emociones_nuevas = []
        
        for emocion in emociones_detectadas:
            emocion = emocion.lower().strip()
            
            # Verificar si la emoci√≥n ya fue detectada en la sesi√≥n para evitar registrar duplicados
            if emocion not in session["emociones_detectadas"]:
                
                # Si la emoci√≥n no est√° en la BD, agregarla a emociones_nuevas y registrar el s√≠ntoma
                if emocion not in sintomas_existentes:
                    emociones_nuevas.append(emocion)
                    registrar_sintoma(emocion)  # ‚úÖ Registrar en palabras_clave solo si no existe

        
        # üîç Depuraci√≥n: Mostrar qu√© emociones se intentar√°n registrar
        print(f"üîç Emociones nuevas que intentar√°n registrarse en palabras_clave: {emociones_nuevas}")
                
        # Registrar solo las emociones nuevas en la base de datos con un cuadro cl√≠nico asignado por OpenAI
        for emocion in emociones_nuevas:
            # Generar el prompt para OpenAI
            prompt_cuadro = (
                f"Asigna un cuadro cl√≠nico adecuado a la siguiente emoci√≥n: '{emocion}'.\n\n"
                "Analiza el s√≠ntoma y asigna el cuadro cl√≠nico m√°s adecuado en funci√≥n de trastornos, s√≠ndromes o patrones emocionales. "
                "Puedes incluir cualquier cuadro cl√≠nico relevante dentro de la psicolog√≠a, psiquiatr√≠a o bienestar emocional, "
                "sin limitarte a una lista fija. Si la emoci√≥n no encaja en un cuadro cl√≠nico espec√≠fico, usa 'Patr√≥n emocional detectado'.\n\n"
                
                "Ejemplos de cuadros cl√≠nicos v√°lidos:\n"
                "- Trastorno de ansiedad\n"
                "- Depresi√≥n mayor\n"
                "- Estr√©s postraum√°tico\n"
                "- Trastorno de p√°nico\n"
                "- Baja autoestima\n"
                "- Estado confusional\n"
                "- Desgaste emocional\n"
                "- Trastorno de impulsividad\n"
                "- Insomnio cr√≥nico\n"
                "- Desorientaci√≥n emocional\n"
                "- Sentimientos de aislamiento\n"
                "- Patr√≥n emocional detectado (si no encaja en ning√∫n otro cuadro cl√≠nico espec√≠fico)\n\n"
        
                "Devuelve √∫nicamente el cuadro cl√≠nico, sin texto adicional."
            )
        
            try:
                # Llamada a OpenAI para obtener el cuadro cl√≠nico
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt_cuadro}],
                    max_tokens=50,
                    temperature=0.0
                )
        
                cuadro_asignado = response.choices[0].message['content'].strip()
        
                # Si OpenAI no devuelve un cuadro v√°lido, asignar un valor por defecto
                if not cuadro_asignado:
                    cuadro_asignado = "Patr√≥n emocional detectado"
        
                # Registrar la emoci√≥n con el cuadro cl√≠nico asignado
                registrar_sintoma(emocion, cuadro_asignado)
                print(f"üÜï OpenAI asign√≥ el cuadro cl√≠nico: {cuadro_asignado} para la emoci√≥n '{emocion}'.")
        
            except Exception as e:
                print(f"‚ùå Error al obtener el cuadro cl√≠nico de OpenAI para '{emocion}': {e}")

        
        # üîç Confirmaci√≥n final de emociones registradas
        if emociones_nuevas:
            print(f"‚úÖ Se registraron las siguientes emociones nuevas en palabras_clave: {emociones_nuevas}")
        else:
            print("‚úÖ No hubo emociones nuevas para registrar en palabras_clave.")


        # Evitar agregar duplicados en emociones detectadas
        nuevas_emociones = [e for e in emociones_detectadas if e not in session["emociones_detectadas"]]
        session["emociones_detectadas"].extend(nuevas_emociones)
        
        # üîç Verificar si la funci√≥n recibe correctamente las emociones detectadas
        if session["emociones_detectadas"]:
            print(f"Registrando emociones en la BD: {session['emociones_detectadas']}")
        
            for emocion in session["emociones_detectadas"]:
                registrar_emocion(emocion, f"interacci√≥n {session['contador_interacciones']}")

        # Agregar emociones a la sesi√≥n sin causar errores
        session["emociones_detectadas"].extend(emociones_detectadas)
        
        # Evaluaci√≥n de emociones y cuadro probable en la interacci√≥n 5 y 9
        if contador in [5, 9]:
            emociones_detectadas = detectar_emociones_negativas(" ".join(session["mensajes"]))
            
            # Evitar agregar duplicados en emociones detectadas
            nuevas_emociones = [e for e in emociones_detectadas if e not in session["emociones_detectadas"]]
            session["emociones_detectadas"].extend(nuevas_emociones)
        
            # üîç DEPURACI√ìN: Mostrar emociones detectadas
            print("\n===== DEPURACI√ìN - INTERACCI√ìN 5 o 9 =====")
            print(f"Interacci√≥n: {contador}")
            print(f"Mensaje del usuario: {mensaje_usuario}")
            print(f"Emociones detectadas en esta interacci√≥n: {emociones_detectadas}")
            print(f"Emociones acumuladas hasta ahora: {session['emociones_detectadas']}")
        
            # Buscar coincidencias en la base de datos para determinar el cuadro probable
            coincidencias_sintomas = obtener_coincidencias_sintomas_y_registrar(session["emociones_detectadas"])
        
            # üîç DEPURACI√ìN: Mostrar s√≠ntomas encontrados en la BD
            print(f"Coincidencias encontradas en la BD: {coincidencias_sintomas}")
        
            if len(coincidencias_sintomas) >= 2:
                cuadro_probable = Counter(coincidencias_sintomas).most_common(1)[0][0]
            else:
                cuadro_probable = "No se pudo determinar un cuadro probable con suficiente precisi√≥n."
        
            # üîç DEPURACI√ìN: Mostrar cuadro probable determinado
            print(f"Cuadro probable determinado: {cuadro_probable}")
            print("========================================\n")
        
            respuesta = (
                f"Con base en los s√≠ntomas detectados ({', '.join(set(coincidencias_sintomas))}), "
                f"el cuadro probable es: {cuadro_probable}. Te sugiero considerar una consulta con el Lic. Daniel O. Bustamante "
                f"escribiendo al WhatsApp +54 911 3310-1186 para obtener una evaluaci√≥n m√°s detallada."
            )
        
            if contador == 9:
                respuesta += (
                    " Adem√°s, he encontrado interesante nuestra conversaci√≥n, pero para profundizar m√°s en el an√°lisis de tu malestar, "
                    "ser√≠a ideal que consultes con un profesional. Por ello, te sugiero que te contactes con el Lic. Bustamante. "
                    "Lamentablemente, no puedo continuar con la conversaci√≥n m√°s all√° de este punto."
                )
        
            session["mensajes"].clear()  # Limpiar mensajes despu√©s del an√°lisis
            return {"respuesta": respuesta}
        
        # üîπ A partir de la interacci√≥n 10, solo recomendar la consulta profesional
        if contador >= 10:
            respuestas_repetitivas = [
                "Te sugiero contactar al Lic. Daniel O. Bustamante al WhatsApp: +54 911 3310-1186 para recibir ayuda profesional.",
                "Para obtener una evaluaci√≥n m√°s detallada, te recomiendo contactar al Lic. Bustamante en WhatsApp: +54 911 3310-1186.",
                "No puedo continuar con esta conversaci√≥n, pero el Lic. Bustamante puede ayudarte. Cont√°ctalo en WhatsApp: +54 911 3310-1186.",
                "Es importante que recibas ayuda profesional. El Lic. Bustamante est√° disponible en WhatsApp: +54 911 3310-1186."
            ]
            return {"respuesta": random.choice(respuestas_repetitivas)}
            

        # üîπ Consultas sobre obras sociales, prepagas o asistencia psicol√≥gica
        preguntas_cobertura = [
            r"(atiende[n|s]?|trabaja[n|s]?|acepta[n|s]?|tom[a|√°s]|toma[n]?|atiendo)\s+(por|con)?\s*(osde|swiss medical|galeno|prepaga|obra social|cobertura m√©dica|asistencia psicol√≥gica)",
            r"(osde|swiss medical|galeno|prepaga|obra social|cobertura m√©dica|asistencia psicol√≥gica)\s+.*(cubren|incluye|incluyen|puedo usar|sirve|vale|acepta|aceptan|trabaja|trabajan|atiende|atienden)",
            r"(puedo|quiero|necesito).*(usar|utilizar).*(osde|swiss medical|galeno|prepaga|obra social)",
            r"(cubren|cubre|acepta|acept√°s|aceptan|trabaja|trabaj√°s|trabajan|atiende|atend√©s|atienden).*?(osde|swiss medical|galeno|prepaga|obra social)"
        ]
        
        for patron in preguntas_cobertura:
            if re.search(patron, mensaje_usuario):
                return {
                    "respuesta": (
                        "El Lic. Daniel O. Bustamante no trabaja con obras sociales ni prepagas. "
                        "Atiende √∫nicamente de manera particular. Si quer√©s coordinar una sesi√≥n, pod√©s escribirle al WhatsApp +54 911 3310-1186."
                    )
                }
        
        # üîπ Consultas sobre precios, honorarios o valor de la sesi√≥n
        if any(palabra in mensaje_usuario for palabra in [
            "precio", "cu√°nto sale", "cu√°nto cuesta", "valor", "honorario", "cobra", "cobr√°s", "tarifa", "cu√°nto cobra", "cuanto cobra", "cu√°nto es"
        ]):
            return {
                "respuesta": (
                    "El valor de la sesi√≥n puede depender del tipo de consulta. "
                    "Para conocer el costo exacto, te recomiendo escribirle directamente al Lic. Bustamante al WhatsApp +54 911 3310-1186."
                )
            } 

        # üîπ Consultas sobre los servicios psicol√≥gicos que ofrece
        consultas_servicios = [
            "qu√© servicios ofrece", "qu√© servicios brinda", "qu√© trata", "con qu√© trabaja", "en qu√© temas trabaja",
            "qu√© tipo de terapias hace", "qu√© tipo de terapia ofrece", "qu√© temas aborda", "qu√© puede tratar",
            "cu√°les son sus especialidades", "qu√© tipo de atenci√≥n brinda", "qu√© problemas trata", "qu√© √°reas trabaja",
            "temas que trata", "qu√© trata bustamante", "qu√© hace el licenciado", "qu√© atiende", "motivos de consulta",
            "problemas que atiende", "en qu√© puede ayudarme"
        ]
        
        if any(frase in mensaje_usuario for frase in consultas_servicios):
            return {
                "respuesta": (
                    "El Lic. Daniel O. Bustamante brinda atenci√≥n psicol√≥gica exclusivamente online, a trav√©s de videoconsultas.\n\n"
                    "Entre los principales motivos de consulta que aborda se encuentran:\n"
                    "- Psicoterapia individual para adultos (modalidad online)\n"
                    "- Tratamiento de crisis emocionales\n"
                    "- Abordaje de ansiedad, estr√©s y ataques de p√°nico\n"
                    "- Procesos de duelo y cambios vitales\n"
                    "- Estados an√≠micos depresivos\n"
                    "- Problemas de autoestima y motivaci√≥n\n"
                    "- Dificultades vinculares y emocionales\n"
                    "- Terapia de pareja online\n\n"
                    "Si quer√©s coordinar una consulta o ten√©s dudas, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
                )
            }

        # üîπ Consultas sobre duraci√≥n o frecuencia de las sesiones
        consultas_duracion_frecuencia = [
            "cu√°nto dura", "cuanto dura", "duraci√≥n de la sesi√≥n", "dura la sesi√≥n", "cu√°nto tiempo", "cu√°nto tiempo duran", 
            "cada cu√°nto", "frecuencia", "con qu√© frecuencia", "cu√°ntas veces", "cu√°ntas sesiones", "cada cu√°nto tiempo",
            "cu√°nto duran las sesiones", "duraci√≥n sesi√≥n", "sesi√≥n dura"
        ]
        
        if any(frase in mensaje_usuario for frase in consultas_duracion_frecuencia):
            return {
                "respuesta": (
                    "Las sesiones con el Lic. Daniel O. Bustamante tienen una duraci√≥n aproximada de 50 minutos y se realizan por videoconsulta.\n\n"
                    "La frecuencia puede variar seg√∫n cada caso, pero generalmente se recomienda un encuentro semanal para favorecer el proceso terap√©utico.\n\n"
                    "Si quer√©s coordinar una sesi√≥n o resolver alguna duda, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
                )
            }
            
        # üîπ Consultas sobre formas de pago, precios o modalidad de pago
        consultas_pago = [
            "c√≥mo se paga", "formas de pago", "medios de pago", "se puede pagar", "puedo pagar", "pago", "se abona", 
            "c√≥mo abono", "c√≥mo es el pago", "modalidad de pago", "se paga por sesi√≥n", "pagar con", "c√≥mo pagar"
        ]
        
        if any(frase in mensaje_usuario for frase in consultas_pago):
            return {
                "respuesta": (
                    "El Lic. Daniel O. Bustamante trabaja con modalidad de pago particular.\n\n"
                    "Para coordinar una sesi√≥n y consultar los medios de pago disponibles, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
                )
            }

        
        
        # üîπ Generar respuesta con OpenAI si no es la interacci√≥n 5, 9 o 10+
        prompt = (
            f"Un usuario pregunta: '{mensaje_usuario}'. "
            "Respond√© como si fueras el asistente personal del Lic. Daniel O. Bustamante. "
            "Manten√© un tono profesional, claro y emp√°tico. "
            "Evit√° usar t√©rminos institucionales como 'nosotros', 'nuestro equipo', 'nuestra instituci√≥n', etc. "
            "Referite a √©l como 'el Licenciado', 'el profesional', o 'el Lic. Bustamante', seg√∫n corresponda. "
            "√âl es psic√≥logo cl√≠nico. No brindes informaci√≥n sobre servicios financieros, legales o t√©cnicos. "
            "Si el usuario desea contactarlo, proporcion√° directamente su n√∫mero de WhatsApp: +54 911 3310-1186."
        )
        
        # Obtener respuesta de OpenAI
        respuesta_ai = generar_respuesta_con_openai(prompt)
        
        # üîç Filtro para lenguaje institucional
        palabras_prohibidas = ["nosotros", "nuestro equipo", "nuestra instituci√≥n", "desde nuestra", "trabajamos en conjunto"]
        if any(palabra in respuesta_ai.lower() for palabra in palabras_prohibidas):
            respuesta_ai = (
                "Gracias por tu consulta. El Lic. Daniel O. Bustamante estar√° encantado de ayudarte. "
                "Pod√©s escribirle directamente al WhatsApp +54 911 3310-1186 para obtener m√°s informaci√≥n."
            )
        
        # üîç Filtro para desv√≠os tem√°ticos (por si OpenAI habla de finanzas o cosas raras)
        temas_prohibidos = ["finanzas", "inversiones", "educaci√≥n financiera", "consultor√≠a financiera", "legal", "t√©cnico"]
        if any(tema in respuesta_ai.lower() for tema in temas_prohibidos):
            respuesta_ai = (
                "El Lic. Daniel O. Bustamante es psic√≥logo cl√≠nico. Si quer√©s saber m√°s sobre los servicios que ofrece, "
                "pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186 y te brindar√° toda la informaci√≥n necesaria."
            )
        
        # üîç Reemplazo de marcador si qued√≥ en la respuesta
        respuesta_ai = respuesta_ai.replace("[Incluir n√∫mero de contacto]", "+54 911 3310-1186")
        
        # Registrar respuesta generada por OpenAI
        interaccion_id = registrar_interaccion(user_id, mensaje_usuario)
        registrar_respuesta_openai(interaccion_id, respuesta_ai)
        
        return {"respuesta": respuesta_ai}

        
        # üîπ Registrar la respuesta generada por OpenAI en la base de datos
        interaccion_id = registrar_interaccion(user_id, mensaje_usuario)  # Asegurarse de obtener el ID de la interacci√≥n
        registrar_respuesta_openai(interaccion_id, respuesta_ai)
        
        # üîπ Registrar la respuesta generada por OpenAI en la base de datos
        registrar_respuesta_openai(contador, respuesta_ai)
        
        return {"respuesta": respuesta_ai}

        # üîπ BLOQUE 1: Evita repetir "Hasta ahora mencionaste..." en cada respuesta
        if emociones_detectadas:
            emociones_unicas = list(set(emociones_detectadas))  # Elimina duplicados en esta detecci√≥n
        
            # Verificar si hay emociones nuevas que a√∫n no se han mencionado en las √∫ltimas 5 interacciones
            emociones_nuevas = [e for e in emociones_unicas if e not in session["emociones_detectadas"][-5:]]
        
            # Si hay emociones nuevas, agregarlas con control
            if emociones_nuevas:
                session["emociones_detectadas"].extend(emociones_nuevas)
                
                # Limitar almacenamiento a un m√°ximo de 10 emociones recientes
                session["emociones_detectadas"] = session["emociones_detectadas"][-10:]
        
                return {
                    "respuesta": (
                        f"Entiendo que puedes estar sinti√©ndote {' y '.join(emociones_nuevas)}. "
                        "Si deseas hablar m√°s al respecto, estoy aqu√≠ para escucharte."
                    )
                }
        
        # üîπ BLOQUE 2: Listar emociones sin repeticiones y evitar respuesta rob√≥tica
        emociones_unicas = list(set(session["emociones_detectadas"]))
        
        # Construcci√≥n de una respuesta m√°s natural dependiendo del contexto
        if emociones_unicas:
            respuesta_emocional = f"Hasta ahora has mencionado emociones como {' y '.join(emociones_unicas)}. "
            respuesta_emocional += "Si necesitas hablar sobre ello, dime en qu√© puedo ayudarte."
        
            return {"respuesta": respuesta_emocional}


        # Generar una respuesta variada
        respuestas_variadas = [
            "Entiendo, cu√©ntame m√°s sobre eso.",
            "¬øC√≥mo te hace sentir esto en tu d√≠a a d√≠a?",
            "Eso parece dif√≠cil. ¬øC√≥mo te afecta?",
            "Gracias por compartirlo. ¬øQuieres hablar m√°s sobre eso?",
        ]

        # Solo generar respuesta variada si no se detectaron emociones o cuadros probables
        if not session.get("emociones_detectadas") and not session.get("mensajes"):
            respuesta_variable = random.choice(respuestas_variadas)
            return {"respuesta": evitar_repeticion(respuesta_variable, session["ultimas_respuestas"])}
        
        # Genera una respuesta normal para otros mensajes
        prompt = f"Un usuario dice: '{mensaje_usuario}'. Responde de manera profesional y emp√°tica."
        respuesta_ai = generar_respuesta_con_openai(prompt)
        
        # üîπ Registrar la respuesta generada por OpenAI en la base de datos
        interaccion_id = registrar_interaccion(user_id, mensaje_usuario)  # Asegurarse de obtener el ID de la interacci√≥n
        registrar_respuesta_openai(interaccion_id, respuesta_ai)
        
        return {"respuesta": respuesta_ai}
        
        # Obtener cuadro probable si hay al menos 2 coincidencias de s√≠ntomas en la base de datos
        coincidencias_sintomas = obtener_coincidencias_sintomas(emociones_unicas)
        cuadro_probable = obtener_cuadro_probable(emociones_unicas) if len(coincidencias_sintomas) >= 2 else "No se pudo determinar un cuadro probable con suficiente precisi√≥n."
        
        # Registrar emociones en la base de datos solo si son nuevas
        for emocion in emociones_unicas:
            registrar_emocion(emocion, f"interacci√≥n {contador}")
        
        # üîπ Manejo de interacciones 6, 7 y 8
        if 6 <= contador <= 8:
            # Si el usuario agradece, se cierra la conversaci√≥n educadamente
            agradecimientos = {"gracias", "muy amable", "te agradezco", "muchas gracias", "ok gracias"}
            if mensaje_usuario in agradecimientos:
                return {"respuesta": "De nada, estoy para ayudarte. Que tengas un buen d√≠a."}
        
            # Si el usuario sigue expresando malestar
            ultima_emocion = session["emociones_detectadas"][-1] if session["emociones_detectadas"] else None
        
            if not ultima_emocion:
                return {
                    "respuesta": "Te noto preocupado. ¬øC√≥mo afecta esto a tu d√≠a a d√≠a?"
                }
        
            # üîπ Variaciones en la respuesta
            respuestas_posibles = [
                f"Comprendo que sentir {ultima_emocion} no es f√°cil. ¬øC√≥mo te afecta en tu rutina diaria?",
                f"A veces, {ultima_emocion} puede hacer que todo parezca m√°s dif√≠cil. ¬øHay algo que te ayude a sobrellevarlo?",
                f"Cuando experiment√°s {ultima_emocion}, ¬øsent√≠s que hay situaciones o personas que lo empeoran o lo alivian?",
                f"S√© que {ultima_emocion} puede ser agotador. ¬øC√≥mo influye en tu estado de √°nimo general?",
                f"Gracias por compartirlo. ¬øNotaste alg√∫n cambio en la intensidad de {ultima_emocion} con el tiempo?",
                f"Cuando te sent√≠s {ultima_emocion}, ¬øhay algo que hagas para tratar de sentirte mejor?",
                f"Experimentar {ultima_emocion} puede ser dif√≠cil. ¬øNotaste alg√∫n patr√≥n en cu√°ndo suele aparecer?",
                f"Entiendo que {ultima_emocion} no es f√°cil de manejar. ¬øTe gustar√≠a hablar sobre qu√© te ha ayudado en el pasado?",
                f"Cuando mencionaste {ultima_emocion}, pens√© en c√≥mo puede afectar el bienestar general. ¬øC√≥mo lo sent√≠s hoy en comparaci√≥n con otros d√≠as?",
                f"A veces, {ultima_emocion} nos hace ver las cosas de una manera distinta. ¬øC√≥mo ha influido en tu percepci√≥n de lo que te rodea?"
            ]
        
            # Seleccionar una respuesta aleatoria
            respuesta_variable = random.choice(respuestas_posibles)
            return {"respuesta": respuesta_variable}


        # Manejo de interacci√≥n 10 (√∫ltima interacci√≥n)
        if contador == 10:
            respuestas_finales = [
                "Hemos llegado al final de nuestra conversaci√≥n. Para un seguimiento m√°s personalizado, te recomiendo contactar al Lic. Daniel O. Bustamante al WhatsApp: +54 911 3310-1186. ¬°Gracias por tu tiempo!",
                "Espero que esta conversaci√≥n te haya sido √∫til. Si quer√©s hablar con un profesional, pod√©s comunicarte con el Lic. Daniel O. Bustamante al WhatsApp: +54 911 3310-1186.",
                "Fue un placer charlar contigo. Si necesit√°s m√°s orientaci√≥n, te sugiero contactar al Lic. Daniel O. Bustamante en WhatsApp: +54 911 3310-1186.",
                "Gracias por compartir lo que est√°s sintiendo. Para una atenci√≥n m√°s personalizada, te recomiendo hablar con el Lic. Daniel O. Bustamante. Pod√©s escribirle al WhatsApp: +54 911 3310-1186.",
                "Hemos concluido nuestra conversaci√≥n. Si quer√©s seguir hablando con un profesional, te sugiero contactar al Lic. Daniel O. Bustamante en WhatsApp: +54 911 3310-1186.",
                "Si sent√≠s que necesit√°s apoyo adicional, lo mejor es consultar con un especialista. Pod√©s comunicarte con el Lic. Daniel O. Bustamante a trav√©s de WhatsApp: +54 911 3310-1186.",
                "Espero que esta conversaci√≥n te haya ayudado. Si quer√©s una consulta m√°s detallada, pod√©s escribir al Lic. Daniel O. Bustamante en WhatsApp: +54 911 3310-1186.",
                "Fue un gusto hablar contigo. Para cualquier consulta adicional, te recomiendo contactar al Lic. Daniel O. Bustamante a trav√©s de WhatsApp: +54 911 3310-1186."
            ]
        
            respuesta_variable = random.choice(respuestas_finales)
            return {"respuesta": respuesta_variable}
        
        # Frases de cierre que indican que el usuario ya entendi√≥ y est√° finalizando la conversaci√≥n
        frases_cierre = [
            "gracias", "muchas gracias", "ok gracias", "ok", "igualmente", "si si entend√≠", 
            "lo har√© ma√±ana", "ma√±ana lo llamo", "gracias por tu atenci√≥n"
        ]
        
        # Manejo de interacciones posteriores a la 10
        if contador >= 10:
            # Si el usuario menciona una frase de cierre, responder educadamente sin insistir
            if any(frase in mensaje_usuario.lower() for frase in frases_cierre):
                respuestas_cierre = [
                    "Me alegra saberlo. Si necesitas algo m√°s, estar√© aqu√≠.",
                    "Espero que todo vaya bien para ti. Te deseo lo mejor.",
                    "Si alguna vez necesitas hablar de nuevo, estar√© disponible. Cu√≠date.",
                    "Estoy aqu√≠ si en el futuro necesitas hablar. Cu√≠date mucho."
                ]
                return {"respuesta": random.choice(respuestas_cierre)}
        
            # Respuesta est√°ndar de recomendaci√≥n, pero sin repetir demasiado
            respuestas_repetitivas = [
                "Si deseas continuar con una evaluaci√≥n m√°s detallada, puedes contactar al Lic. Bustamante en WhatsApp: +54 911 3310-1186.",
                "No dudes en buscar apoyo profesional. Te sugiero comunicarte con el Lic. Bustamante en WhatsApp: +54 911 3310-1186.",
                "Si crees que necesitas m√°s ayuda, podr√≠as consultar al Lic. Bustamante en WhatsApp: +54 911 3310-1186."
            ]
            return {"respuesta": random.choice(respuestas_repetitivas)}

        
        # Validar si se detectaron emociones o cuadros antes de generar la respuesta final
        if not session.get("emociones_detectadas") and not session.get("mensajes"):
            return {
                "respuesta": (
                    "No se pudieron identificar emociones claras en tu mensaje. Si sientes que necesitas ayuda, no dudes "
                    "en buscar apoyo profesional o compartir m√°s detalles sobre lo que est√°s experimentando."
                )
            }
        
        
        # Definir respuestas_variadas antes de usarla
        respuestas_variadas = [
            "Entiendo, cu√©ntame m√°s sobre eso.",
            "¬øC√≥mo te hace sentir esto en tu d√≠a a d√≠a?",
            "Eso parece dif√≠cil. ¬øC√≥mo te afecta?",
            "Gracias por compartirlo. ¬øQuieres hablar m√°s sobre eso?",
        ]
        
        # Ahora s√≠, usar respuestas_variadas sin errores
        respuesta_variable = random.choice(respuestas_variadas)
        return {"respuesta": evitar_repeticion(respuesta_variable, session["ultimas_respuestas"])}
        
    except Exception as e:  # ‚úÖ Capturar errores que ocurran dentro del try
        print(f"Error en la funci√≥n asistente: {e}")
        return {"respuesta": "Lo siento, ocurri√≥ un error al procesar tu solicitud. Intenta de nuevo."}
      

def analizar_emociones_y_patrones(mensajes, emociones_acumuladas):
    """
    Detecta emociones y patrones de conducta en los mensajes, buscando coincidencias en la tabla `palabras_clave`.
    Si no hay coincidencias, usa OpenAI para detectar emociones negativas y las registra en la base de datos.
    """
    try:
        # Obtener s√≠ntomas almacenados en la tabla `palabras_clave`
        sintomas_existentes = obtener_sintomas()
        keyword_to_cuadro = {sintoma.lower(): cuadro for sintoma, cuadro in sintomas_existentes}
        emociones_detectadas = []

        # Buscar coincidencias en la tabla `palabras_clave`
        for mensaje in mensajes:
            user_words = mensaje.lower().split()
            user_words = [palabra for palabra in user_words if palabra not in palabras_irrelevantes]

            for palabra in user_words:
                if palabra in keyword_to_cuadro:
                    emociones_detectadas.append(keyword_to_cuadro[palabra])

        # Si no hay coincidencias, usar OpenAI para detectar emociones negativas
        if not emociones_detectadas:
            texto_usuario = " ".join(mensajes)
            prompt = (
                f"Analiza el siguiente mensaje y detecta emociones negativas o patrones emocionales humanos. "
                f"Si no hay emociones claras, responde 'emociones ambiguas'.\n\n"
                f"{texto_usuario}\n\n"
                "Responde con una lista de emociones negativas separadas por comas."
            )
            emociones_detectadas = generar_respuesta_con_openai(prompt).split(",")
            emociones_detectadas = [
                emocion.strip().lower() for emocion in emociones_detectadas
                if emocion.strip().lower() not in palabras_irrelevantes
            ]

            # Registrar nuevas emociones en la base de datos
            for emocion in emociones_detectadas:
                registrar_emocion(emocion, texto_usuario)

        return emociones_detectadas

    except Exception as e:
        print(f"Error al analizar emociones y patrones: {e}")
        return []

