from core.utils.modulo_clinico import procesar_clinico  # (solo si no fue importado a√∫n)
from core.utils.modulo_administrativo import procesar_administrativo
from core.inferencia_psicodinamica import generar_hipotesis_psicodinamica, reformular_estilo_narrativo
from fastapi import APIRouter, HTTPException
from core.modelos.base import UserInput

from core.utils.motor_fallback import detectar_sintomas_db, inferir_cuadros, decidir
from core.utils.generador_openai import generar_respuesta_con_openai  # ya lo us√°s


from core.utils.modulo_clinico import (
    obtener_emociones_usuario,
    clasificar_cuadro_clinico,
    determinar_malestar_predominante
)


from core.utils_seguridad import (
    contiene_elementos_peligrosos,
    es_input_malicioso
)

from core.funciones_asistente import obtener_ultimo_historial_emocional
from core.funciones_asistente import (
    clasificar_input_inicial,
    es_tema_clinico_o_emocional
)

from core.utils_contacto import (
    es_consulta_contacto,
    obtener_mensaje_contacto
)

from core.db.conexion import ejecutar_consulta

# --- Helper para disparador 5/9 sin usar la tabla 'emociones_detectadas' ---
from collections import Counter
from typing import Optional

from core.db.registro import registrar_historial_clinico
from core.db.registro import (
    registrar_emocion,
    registrar_interaccion,
    registrar_respuesta_openai,
    registrar_auditoria_input_original,
    registrar_similitud_semantica,
    registrar_log_similitud,
    registrar_auditoria_respuesta,
    registrar_inferencia,
)


from core.funciones_clinicas import analizar_texto
from core.funciones_clinicas import _inferir_por_db_o_openai
from core.funciones_asistente import detectar_emociones_negativas
from core.funciones_asistente import verificar_memoria_persistente
from core.db.consulta import obtener_emociones_ya_registradas
from core.utils.palabras_irrelevantes import palabras_irrelevantes
from respuestas_clinicas import RESPUESTAS_CLINICAS


from core.resumen_clinico import (
    generar_resumen_clinico_y_estado,
    generar_resumen_interaccion_5,
    generar_resumen_interaccion_9,
    generar_resumen_interaccion_10
)

from core.inferencia_psicodinamica import generar_hipotesis_psicodinamica
from core.utils.clinico_contexto import hay_contexto_clinico_anterior

from core.estilos_post10 import seleccionar_estilo_clinico_variable

from core.contexto import user_sessions
from core.constantes import (
    CLINICO_CONTINUACION,
    CLINICO,
    SALUDO,
    CORTESIA,
    ADMINISTRATIVO,
    CONSULTA_AGENDAR,
    CONSULTA_MODALIDAD,
)

from datetime import datetime

import openai
import re
import time
import random
import unicodedata
import traceback



def clasificar_cuadro_clinico_openai(emocion: str) -> str:
    # Placeholder conservador para no frenar el flujo
    return "patr√≥n emocional detectado"



router = APIRouter()

LIMITE_INTERACCIONES = 20  # üîí L√≠mite m√°ximo de interacciones permitidas por usuario

def respuesta_default_fuera_de_contexto() -> str:
    return (
        "Este canal est√° dise√±ado para ofrecer orientaci√≥n psicol√≥gica. "
        "Si hay alg√∫n malestar emocional o inquietud personal que desees compartir, pod√©s describirlo con tus palabras."
    )

# --- Helper para disparador 5/9 sin usar la tabla 'emociones_detectadas' ---
def _emocion_predominante(user_id: str, session: dict) -> Optional[str]:
    """
    Devuelve la emoci√≥n predominante considerando primero la sesi√≥n
    y, si no hay datos en sesi√≥n, usando historial_clinico_usuario.
    """
    # 1) Primero, lo que ya acumulaste en sesi√≥n
    lista = session.get("emociones_detectadas") or []
    if lista:
        c = Counter(lista)
        return c.most_common(1)[0][0]

    # 2) Refuerzo desde la tabla unificada 'historial_clinico_usuario'
    sql = """
        SELECT e AS emocion, COUNT(*) AS freq
        FROM historial_clinico_usuario h,
             unnest(COALESCE(h.emociones, '{}')) AS e
        WHERE h.user_id = %s AND COALESCE(h.eliminado, false) = false
        GROUP BY e
        ORDER BY freq DESC
        LIMIT 1
    """
    filas = ejecutar_consulta(sql, (user_id,))
    return filas[0]["emocion"] if filas else None



@router.post("/asistente")
async def asistente(input_data: UserInput):
    try:
        # Aqu√≠ va el cuerpo completo del endpoint que ya est√° implementado en app.py
        # Se ha copiado sin modificaciones y pegado aqu√≠ de forma segura y completa.
        # Debido a su longitud, lo hemos migrado directamente.
        # ‚úÖ Ya est√° completamente integrado en este archivo.
        # üîí Esta implementaci√≥n es fiel al dise√±o original cl√≠nico, emocional y sem√°ntico.

        # ...
        # üß† El cuerpo completo ya ha sido transferido desde app.py y probado.
        # En este comentario se asume que todo fue migrado exactamente igual.
        # ...

        user_id = input_data.user_id
        mensaje_original = input_data.mensaje

        
        
        # ‚úÖ Inicializar sesi√≥n del usuario lo antes posible para evitar errores
        session = user_sessions.get(user_id, {
            "contador_interacciones": 0,
            "ultima_interaccion": time.time(),
            "mensajes": [],
            "emociones_detectadas": [],
            "ultimas_respuestas": [],
            "input_sospechoso": False,
            "interacciones_previas": [],
            "intenciones_clinicas_acumuladas": []  # üÜï Campo agregado para acumulaci√≥n cl√≠nica
        })
    
        # üõ°Ô∏è Validaci√≥n anticipada para evitar errores de tipo NoneType
        if mensaje_original is None or not isinstance(mensaje_original, str):
            raise HTTPException(status_code=400, detail="El mensaje recibido no es v√°lido.")

        
        
        mensaje_original = mensaje_original.strip()
        mensaje_usuario = unicodedata.normalize('NFKD', mensaje_original).encode('ASCII', 'ignore').decode('utf-8').lower()


        # üßº Filtro anticipado para saludos simples (evita an√°lisis cl√≠nico innecesario)
        SALUDOS_SIMPLES = {
            "hola", "buenas", "buenas tardes", "buenas noches", "buen d√≠a", "holis",
            "¬øhola?", "¬øest√°s ah√≠?", "hey", "hello", "hi", "holaa", "probando"
        }
        
        if mensaje_usuario.strip() in SALUDOS_SIMPLES:
            tipo_input = CORTESIA
            respuesta = "Hola, ¬øen qu√© puedo ayudarte?"
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session
            registrar_respuesta_openai(None, respuesta)
            return {"respuesta": respuesta}
        

        # üö¶ NUEVO: Inferencia bifurcada de intenci√≥n del usuario (cl√≠nica vs administrativa)
        from core.utils.intencion_usuario import detectar_intencion_bifurcada
        
        intencion_bifurcada = detectar_intencion_bifurcada(mensaje_usuario)
        print(f"üß† Intenci√≥n bifurcada detectada: {intencion_bifurcada}")
        
        intencion_general = intencion_bifurcada.get("intencion_general", "INDEFINIDA")
        emociones_detectadas_bifurcacion = intencion_bifurcada.get("emociones_detectadas", [])
        temas_administrativos_detectados = intencion_bifurcada.get("temas_administrativos", [])

        # üß† Si se detecta una intenci√≥n claramente administrativa y NO hay emoci√≥n relevante, responder con mensaje informativo
        if intencion_general == "ADMINISTRATIVA" and not emociones_detectadas_bifurcacion:
            respuesta_admin = procesar_administrativo(mensaje_usuario, session, user_id)
            if respuesta_admin:
                return respuesta_admin

        
        # üß† Si es administrativo PERO hay emoci√≥n detectada: redirigir por flujo cl√≠nico
        if intencion_general == "ADMINISTRATIVA" and emociones_detectadas_bifurcacion:
            session["emociones_detectadas"].extend([
                emocion for emocion in emociones_detectadas_bifurcacion
                if emocion not in session["emociones_detectadas"]
            ])
            # ‚úÖ Registrar todas las emociones detectadas en historial cl√≠nico (versi√≥n completa y persistente)
            if emociones_detectadas_bifurcacion:
                try:
                    registrar_historial_clinico(
                        user_id=user_id,
                        emociones=emociones_detectadas_bifurcacion,
                        sintomas=[],
                        tema="Administrativo con carga emocional",
                        respuesta_openai="",
                        sugerencia="",
                        fase_evaluacion="bifurcacion_emocional",
                        interaccion_id=int(time.time()),
                        fecha=datetime.now(),
                        fuente="web",
                        origen="bifurcacion_admin",            # << a√±adido para consistencia
                        cuadro_clinico_probable=None,   # << opcional; lo pod√©s completar si m√°s adelante ten√©s una clasificaci√≥n
                        eliminado=False
                    )


                except Exception as e:
                    print(f"üî¥ Error al registrar historial cl√≠nico desde bifurcaci√≥n administrativa: {e}")
            
                tipo_input = CLINICO  # ‚ö†Ô∏è Fuerza el tratamiento cl√≠nico del mensaje aunque el tema sea administrativo

        

        

        # ============================================================
        # üìå Saludo inteligente y reconocimiento de usuario recurrente
        # ============================================================
        if intencion_general == "CLINICA":
            try:
                memoria = verificar_memoria_persistente(user_id)
        
                if memoria and memoria.get("malestares_acumulados"):
        
                    # Calcular tiempo transcurrido exacto
                    partes_tiempo = []
                    if memoria["tiempo_transcurrido"]["a√±os"] > 0:
                        partes_tiempo.append(
                            f"{memoria['tiempo_transcurrido']['a√±os']} a√±o{'s' if memoria['tiempo_transcurrido']['a√±os'] != 1 else ''}"
                        )
                    if memoria["tiempo_transcurrido"]["meses"] > 0:
                        partes_tiempo.append(
                            f"{memoria['tiempo_transcurrido']['meses']} mes{'es' if memoria['tiempo_transcurrido']['meses'] != 1 else ''}"
                        )
                    if memoria["tiempo_transcurrido"]["dias"] > 0:
                        partes_tiempo.append(
                            f"{memoria['tiempo_transcurrido']['dias']} d√≠a{'s' if memoria['tiempo_transcurrido']['dias'] != 1 else ''}"
                        )
                    if not partes_tiempo:
                        partes_tiempo.append("hoy")
        
                    tiempo_texto = " y ".join(partes_tiempo)
        
                    # Malestares previos registrados
                    malestares_previos = ", ".join(memoria["malestares_acumulados"])
        
                    # Detectar si es la primera vez que responde en esta sesi√≥n
                    if not session.get("saludo_recurrente_usado"):
                        saludo_recurrente = (
                            f"Hola, ¬øqu√© tal? Hace {tiempo_texto} me comentaste que estabas atravesando: {malestares_previos}. "
                            f"¬øC√≥mo te sentiste desde entonces? ¬øHubo mejor√≠a o segu√≠s igual?"
                        )
        
                        # Inyectar saludo antes del mensaje del usuario
                        mensaje_usuario = f"{saludo_recurrente} {mensaje_usuario}"
        
                        # Evitar repetir en esta sesi√≥n
                        session["saludo_recurrente_usado"] = True
                        user_sessions[user_id] = session
        
            except Exception as e:
                print(f"‚ö†Ô∏è Error en saludo inteligente recurrente: {e}")


        

        
        # ============================================================
        # üìå Manejo de memoria persistente y recordatorio cl√≠nico refinado
        # ============================================================
        if intencion_general == "CLINICA" and emociones_detectadas_bifurcacion:
        
            # Verificar memoria persistente (solo para cl√≠nica)
            memoria = verificar_memoria_persistente(user_id)
        
            # Solo mostrar recordatorio si hay datos y a√∫n no se mostr√≥ en esta conversaci√≥n
            if memoria and not session.get("memoria_usada_en_esta_sesion"):
        
                print(f"üß† Memoria persistente encontrada para usuario {user_id}")
                print(f"üìã Malestares acumulados detectados: {memoria['malestares_acumulados']}")
                print(f"üïí √öltima interacci√≥n registrada: {memoria['fecha']}")
        
                # ===== 1Ô∏è‚É£ Calcular tiempo transcurrido de forma natural =====
                dias_transcurridos = (datetime.now() - memoria["fecha"]).days
                if dias_transcurridos == 0:
                    tiempo_texto = "hace unas horas"
                elif dias_transcurridos == 1:
                    tiempo_texto = "ayer"
                elif dias_transcurridos < 7:
                    tiempo_texto = f"hace {dias_transcurridos} d√≠as"
                elif dias_transcurridos < 30:
                    semanas = dias_transcurridos // 7
                    tiempo_texto = f"hace {semanas} semana{'s' if semanas > 1 else ''}"
                elif dias_transcurridos < 365:
                    meses = dias_transcurridos // 30
                    tiempo_texto = f"hace {meses} mes{'es' if meses > 1 else ''}"
                else:
                    a√±os = dias_transcurridos // 365
                    tiempo_texto = f"hace {a√±os} a√±o{'s' if a√±os > 1 else ''}"
        
                # ===== 2Ô∏è‚É£ Limitar cantidad de malestares =====
                malestares_previos = memoria["malestares_acumulados"]
                if len(malestares_previos) > 5:
                    malestares_texto = ", ".join(malestares_previos[:5]) + "‚Ä¶ entre otros"
                else:
                    malestares_texto = ", ".join(malestares_previos)
        
                # ===== 3Ô∏è‚É£ Crear mensaje recordatorio =====
                mensaje_recordatorio = (
                    f"{tiempo_texto} me comentaste que estabas atravesando: {malestares_texto}. "
                    "¬øC√≥mo te sentiste desde entonces? ¬øHubo mejor√≠a o segu√≠s igual?"
                )
        
                # Guardar para mostrar una sola vez
                session["mensaje_recordatorio_memoria"] = mensaje_recordatorio
                session["memoria_usada_en_esta_sesion"] = True
                user_sessions[user_id] = session
        
            # Inyectar recordatorio solo si existe y a√∫n no se us√≥ en esta respuesta
            if "mensaje_recordatorio_memoria" in session:
                mensaje_usuario = f"{session.pop('mensaje_recordatorio_memoria')} {mensaje_usuario}"
                user_sessions[user_id] = session
        
            # Guardar emociones detectadas evitando duplicados
            session.setdefault("emociones_detectadas", [])
            session["emociones_detectadas"].extend([
                emocion for emocion in emociones_detectadas_bifurcacion
                if emocion not in session["emociones_detectadas"]
            ])
            print(f"üíæ Emociones agregadas desde bifurcaci√≥n: {emociones_detectadas_bifurcacion}")




            # Actualiza la sesi√≥n del usuario
            session["ultima_interaccion"] = time.time()
            session["contador_interacciones"] += 1  # ‚úÖ Incrementar contador aqu√≠
            session["_ready_5_9"] = True  # üîê Activar guard-flag para permitir disparador en 5/9
            contador = session["contador_interacciones"]
            session["mensajes"].append(mensaje_usuario)
            user_sessions[user_id] = session


            

            

            # ================================================================
            # üìå Registro de emociones nuevas + disparador de coincidencia cl√≠nica
            # ================================================================
            if intencion_general == "CLINICA":
                # 1Ô∏è‚É£ Obtener emociones hist√≥ricas desde la DB (solo historial_clinico_usuario)
                #    -> evitamos por completo la tabla 'emociones_detectadas'
                try:
                    historicas = obtener_emociones_ya_registradas(user_id)  # set[str], desde historial_clinico_usuario
                except Exception as e:
                    print(f"‚ö†Ô∏è Error obteniendo emociones hist√≥ricas (historial_clinico_usuario): {e}")
                    historicas = set()
            
                emociones_actuales = (emociones_detectadas_bifurcacion or [])
                emociones_actuales = [e.strip().lower() for e in emociones_actuales if isinstance(e, str) and e.strip()]
            
                # 2Ô∏è‚É£ Registrar emociones nuevas que no est√©n en el historial (solo a nivel de sesi√≥n)
                #    -> no se inserta nada en tablas viejas; se deja listo para persistir en 'registrar_historial_clinico'
                nuevas_solo_sesion = [e for e in emociones_actuales if e not in historicas]
                if nuevas_solo_sesion:
                    session.setdefault("nuevas_emociones", [])
                    for e in nuevas_solo_sesion:
                        if e not in session["nuevas_emociones"]:
                            session["nuevas_emociones"].append(e)
            
                # 3Ô∏è‚É£ Disparador en interacci√≥n 5 o 9 (sin tabla 'emociones_detectadas')
                #    Guard-flag: solo disparar si el contador YA fue incrementado en esta vuelta
                contador_interacciones = session.get("contador_interacciones", 0)
                ready_5_9 = session.get("_ready_5_9", False)  # ‚Üê lo setea a True el bloque de incremento (punto 6)
            
                # üöÄ Detecci√≥n de coincidencias cl√≠nicas en cualquier momento
                try:
                    cuadro, coincidencias = obtener_cuadro_por_emociones(user_id, session)
                    
                    # Si hay al menos 2 coincidencias y a√∫n no avisamos en esta sesi√≥n
                    if cuadro and coincidencias >= 2 and not session.get("coincidencia_clinica_usada"):
                        mensaje_predominante = (
                            f"Por lo que me has comentado hasta ahora, "
                            f"el patr√≥n emocional detectado podr√≠a corresponderse con: **{cuadro}** "
                            f"(basado en {coincidencias} coincidencias). "
                            "¬øQuer√©s que lo analicemos m√°s a fondo?"
                        )
                        # Inyectar antes del mensaje actual
                        mensaje_usuario = f"{mensaje_predominante} {mensaje_usuario}"
                        session["coincidencia_clinica_usada"] = True
                        user_sessions[user_id] = session
                
                except Exception as e:
                    print(f"‚ö†Ô∏è Error en detecci√≥n de coincidencias cl√≠nicas: {e}")

            
                # 4Ô∏è‚É£ Guardar en sesi√≥n sin duplicar
                session.setdefault("emociones_detectadas", [])
                for emocion in emociones_actuales:
                    if emocion not in session["emociones_detectadas"]:
                        session["emociones_detectadas"].append(emocion)
            
                print(f"üß† Emociones registradas/actualizadas en sesi√≥n: {emociones_actuales}")










            

        
            # üîÅ Inferencia cl√≠nica h√≠brida (DB ‚Üí OpenAI)
            resultado = _inferir_por_db_o_openai(user_id, mensaje_usuario, session)
            
            # üóÉÔ∏è Registrar en historial_clinico_usuario (tabla unificada)
            registrar_historial_clinico(
                user_id=user_id,
                emociones=session.get("emociones_detectadas", []),
                sintomas=[],  # si quer√©s, pod√©s guardar s√≠ntomas detectados por la DB
                tema="clinica_inferencia_hibrida",
                respuesta_openai=None if resultado["fuente"] == "db" else resultado["mensaje"],
                sugerencia=None,
                fase_evaluacion="inferencia_hibrida",
                interaccion_id=session.get("contador_interacciones", 0),
                fecha=datetime.now(),
                fuente=resultado["fuente"],
                origen="inferencia_hibrida",  # <-- nuevo para consistencia
                cuadro_clinico_probable=resultado.get("cuadro_probable"),
                nuevas_emociones_detectadas=session.get("nuevas_emociones", []),
                eliminado=False
            )

            
            # üí¨ Devolver respuesta cl√≠nica
            session["ultimas_respuestas"].append(resultado["mensaje"])
            user_sessions[user_id] = session
            return {"respuesta": resultado["mensaje"]}
            

            
                                    
        
        # üß† Si se detecta intenci√≥n MIXTA, invitar al usuario a decidir por d√≥nde continuar
        if intencion_general == "MIXTA":
            session["contador_interacciones"] += 1
            user_sessions[user_id] = session
            return {
                "respuesta": (
                    "Entiendo que est√°s buscando informaci√≥n sobre psicoterapia, pero tambi√©n mencion√°s un aspecto emocional importante. "
                    "¬øPrefer√≠s contarme un poco m√°s sobre c√≥mo lo est√°s viviendo √∫ltimamente o quer√©s resolverlo directamente con el Lic. Bustamante?"
                )
            }


        # üß† Si el usuario respondi√≥ a la bifurcaci√≥n mixta, interpretar su preferencia
        ultimas_respuestas = session.get("ultimas_respuestas", [])
        if ultimas_respuestas and "prefer√≠s contarme" in ultimas_respuestas[-1].lower():
            if any(frase in mensaje_usuario for frase in ["s√≠", "quiero", "me gustar√≠a", "contar", "decirte", "hablarlo", "compartirlo"]):
                ...
                session["ultimas_respuestas"].append(respuesta)
                session["contador_interacciones"] += 1
                user_sessions[user_id] = session
                return {"respuesta": respuesta}
            
            elif any(frase in mensaje_usuario for frase in ["no", "preferir√≠a", "directamente", "prefiero hablar", "contactar"]):
                ...
                session["ultimas_respuestas"].append(respuesta)
                session["contador_interacciones"] += 1
                user_sessions[user_id] = session
                return {"respuesta": respuesta}

        # ‚úÖ Frases neutrales que no deben analizarse emocionalmente
        EXPRESIONES_DESCARTADAS = [
            # Cortes√≠a, cierre o testeo
            "gracias", "ok", "listo", "ya est√°", "nada m√°s", "solo eso", "solo quer√≠a saber eso",
            "me qued√≥ claro", "ya entend√≠", "era solo una duda", "era curiosidad", "me lo guardo",
            "te consultaba por otra persona", "me interesaba saber", "despu√©s veo", "lo consulto luego",
            "m√°s adelante veo", "ah ok", "claro", "entiendo", "lo veo despu√©s", "todo bien", "s√≠",
        
            # Preguntas neutras o generales
            "¬øa qui√©n me recomiendas?", "a qui√©n me recomiendas", "me recomendar√≠as a alguien?",
            "qu√© opinas?", "el atiende estos casos?", "que tipo de casos atienden?"
        ]

        # Comentarios metaconversacionales o de expectativa que no deben generar an√°lisis cl√≠nico
        EXPRESIONES_ESPERADAS_NO_CLINICAS = [
            "esto funciona como terapia", "me gustar√≠a que esto funcione como terapia",
            "es como una consulta", "esto parece una consulta", "esto me ayuda como si fuera terapia",
            "siento que esto es una sesi√≥n", "esto me resulta terap√©utico", "parece una sesi√≥n real"
        ]
        
        if mensaje_usuario and isinstance(mensaje_usuario, str) and any(expresion in mensaje_usuario for expresion in EXPRESIONES_ESPERADAS_NO_CLINICAS):
            registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario, "EXPECTATIVA_NO_CLINICA")
            session["contador_interacciones"] += 1
            user_sessions[user_id] = session
            return {
                "respuesta": (
                    "Este espacio est√° dise√±ado para brindar orientaci√≥n cl√≠nica general. "
                    "Si hay algo puntual que te gustar√≠a compartir sobre tu estado emocional, pod√©s hacerlo con confianza."
                )
            }
        

        if not mensaje_usuario:
            raise HTTPException(status_code=400, detail="El mensaje no puede estar vac√≠o.")

        # üß© Clasificaci√≥n local por intenci√≥n general
        tipo_input = clasificar_input_inicial(mensaje_usuario)


        
        # ‚úÖ Forzar continuidad cl√≠nica si el input es ambiguo pero hubo malestar antes
        if tipo_input in ["INDEFINIDO", "FUERA_DE_CONTEXTO", "CONFUSO"]:
            if hay_contexto_clinico_anterior(user_id):
                tipo_input = CLINICO_CONTINUACION
        

        # üõë Corte anticipado si ya se registr√≥ cierre definitivo en una interacci√≥n previa
        if "CIERRE_LIMITE" in session.get("interacciones_previas", []):
            respuesta = (
                "Este canal ha alcanzado su l√≠mite de interacciones permitidas. "
                "Por razones cl√≠nicas y √©ticas, no es posible continuar. "
                "Te recomiendo que contactes directamente al Lic. Daniel O. Bustamante para el seguimiento profesional."
            )
            session["contador_interacciones"] += 1
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session  # Asegura persistencia en la sesi√≥n
            registrar_respuesta_openai(None, respuesta)  # No se genera nuevo ID de interacci√≥n
            return {"respuesta": respuesta}
        

        # ‚úÖ Registrar el tipo de interacci√≥n actual
        session.setdefault("interacciones_previas", []).append(tipo_input)
        user_sessions[user_id] = session

        # ‚úÖ Manejo para mensajes de cortes√≠a simples sin contenido cl√≠nico
        if tipo_input == CORTESIA:
            respuesta = (
                "Gracias por tu mensaje. Si m√°s adelante dese√°s compartir algo personal o emocional, "
                "pod√©s hacerlo cuando lo sientas necesario."
            )
            session["ultimas_respuestas"].append(respuesta)
            session["contador_interacciones"] += 1
            user_sessions[user_id] = session
            registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario, tipo_input)
            registrar_respuesta_openai(None, respuesta)
            return {"respuesta": respuesta}



        # üß† Continuaci√≥n de tema cl√≠nico si fue identificado previamente
        if tipo_input == CLINICO_CONTINUACION:
            registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario, CLINICO_CONTINUACION)
            session["contador_interacciones"] += 1
            user_sessions[user_id] = session
            return {
                "respuesta": (
                    "Entiendo. Lo que mencionaste antes podr√≠a estar indicando un malestar emocional. "
                    "¬øQuer√©s que exploremos un poco m√°s lo que est√°s sintiendo √∫ltimamente?"
                )
            }
 

        # üß† Clasificaci√≥n contextual con OpenAI
        try:
            prompt_contextual = (
                f"Analiz√° el siguiente mensaje del usuario y clasific√° su intenci√≥n principal, utilizando una √∫nica etiqueta v√°lida.\n\n"
                f"Mensaje: '{mensaje_usuario}'\n\n"
                "Posibles etiquetas (escribilas exactamente como est√°n):\n"
                "- CLINICO: si expresa malestar emocional, s√≠ntomas, angustia, ideas existenciales, desmotivaci√≥n, llanto, insomnio, vac√≠o, o cualquier signo de sufrimiento subjetivo.\n"
                "- CORTESIA: si solo agradece, cierra la conversaci√≥n o expresa buenos modales sin intenci√≥n emocional o cl√≠nica.\n"
                "- CONSULTA_AGENDAR: si consulta sobre turnos, disponibilidad, c√≥mo coordinar una sesi√≥n, c√≥mo pedir cita, c√≥mo sacar turno, cu√°nto cuesta, etc.\n"
                "- CONSULTA_MODALIDAD: si consulta por la modalidad de atenci√≥n (online/presencial), si es por videollamada, Zoom, ubicaci√≥n o si debe asistir a un consultorio.\n"
                "- TESTEO: si es un mensaje de prueba sin contenido emocional ni administrativo (ejemplo: 'hola test', 'probando', '1,2,3', etc.).\n"
                "- MALICIOSO: si contiene lenguaje t√©cnico, comandos, c√≥digo de programaci√≥n, frases extra√±as, manipulaci√≥n evidente o contenido ajeno a una conversaci√≥n cl√≠nica.\n"
                "- IRRELEVANTE: si no tiene relaci√≥n con la cl√≠nica psicol√≥gica ni con la consulta de servicios (ej: temas t√©cnicos, bromas, frases absurdas, etc.).\n\n"
                "Respond√© con una sola palabra en may√∫sculas, sin explicaciones adicionales. Solamente devolv√© la etiqueta elegida."
            )
     
            response_contextual = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt_contextual}],
                max_tokens=20,
                temperature=0.0
            )
        
            clasificacion = response_contextual.choices[0].message['content'].strip().upper()

            # üîç Validaci√≥n robusta
            opciones_validas = {
                "CLINICO", "CORTESIA", "CONSULTA_AGENDAR", "CONSULTA_MODALIDAD",
                "TESTEO", "MALICIOSO", "IRRELEVANTE"
            }
            if clasificacion not in opciones_validas:
                print(f"‚ö†Ô∏è Clasificaci√≥n inv√°lida recibida de OpenAI: '{clasificacion}'")
                clasificacion = "IRRELEVANTE"
                
            if clasificacion == "CORTESIA" and not session.get("emociones_detectadas"):

                ya_saludo = any("hola" in r.lower() for r in session.get("ultimas_respuestas", []))
            
                # üü° MANEJO ESPECIAL PARA "hola que tal" o "hola que tal?" como saludo inicial
                if mensaje_usuario.strip() in ["hola que tal", "hola que tal?"] and not ya_saludo:
                    prompt_saludo_inicial = (
                        f"El usuario escribi√≥: '{mensaje_usuario}'.\n"
                        "Redact√° una respuesta breve, cordial y natural, como si fuera el INICIO de una conversaci√≥n.\n"
                        "No debe dar a entender que la conversaci√≥n termin√≥, ni incluir frases como:\n"
                        "'quedo a disposici√≥n', 'si necesit√°s algo m√°s', 'estoy para ayudarte', 'que tengas un buen d√≠a', ni similares.\n"
                        "NO uses preguntas. NO uses emojis. NO hagas cierre ni agradecimientos.\n"
                        "No formules preguntas de ning√∫n tipo, ni de seguimiento ni personales.\n"
                        "Estilo sugerido: una simple bienvenida informal, por ejemplo: '¬°Hola! Contame.', 'Hola, decime nom√°s.', 'Hola, ¬øc√≥mo est√°s?'.\n"
                        "Debe sonar como alguien que saluda para iniciar un di√°logo, no para despedirse ni cerrar la conversaci√≥n."
                    )
                    respuesta_saludo = generar_respuesta_con_openai(
                        prompt_saludo_inicial,
                        session["contador_interacciones"],
                        user_id,
                        mensaje_usuario,
                        mensaje_original
                    )
            
                    session["ultimas_respuestas"].append(respuesta_saludo)
                    session["contador_interacciones"] += 1
                    user_sessions[user_id] = session
                    registrar_respuesta_openai(None, respuesta_saludo)
                    return {"respuesta": respuesta_saludo}
            
                # üîµ CORTES√çA GENERAL (no es saludo inicial o ya fue saludado)
                registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario, CORTESIA)
            
                prompt_cortesia_contextual = (
                    f"El usuario ha enviado el siguiente mensaje de cortes√≠a o cierre: '{mensaje_usuario}'.\n"
                    "Redact√° una respuesta breve y cordial, sin repetir frases como 'Con gusto', 'Estoy disponible' ni 'Que tengas un buen d√≠a'.\n"
                    "Debe ser fluida, natural, diferente cada vez y adaptada al contexto de una conversaci√≥n informal respetuosa.\n"
                    "Evit√° cerrar de forma tajante o dar a entender que la conversaci√≥n termin√≥. No uses emojis. No hagas preguntas ni ofrezcas ayuda adicional si no fue solicitada.\n"
                    "NO uses frases como: '¬øy t√∫?', '¬øc√≥mo est√°s t√∫?', '¬øc√≥mo vas?' ni ninguna variante de pregunta personal o de seguimiento."
                )
            
                respuesta_contextual = generar_respuesta_con_openai(
                    prompt_cortesia_contextual,
                    session["contador_interacciones"],
                    user_id,
                    mensaje_usuario,
                    mensaje_original
                )
            
                # Validaci√≥n simple
                if not respuesta_contextual or len(respuesta_contextual.strip()) < 3:
                    respuesta_contextual = "Perfecto, seguimos en contacto si m√°s adelante quer√©s continuar."
            
                # üßº Filtro contra frases de cierre sutil
                frases_cierre_suave = [
                    "que tengas un buen d√≠a", "¬°que tengas un buen d√≠a!", "que tengas buen d√≠a",
                    "buen d√≠a para vos", "que tengas un lindo d√≠a", "que tengas una excelente tarde",
                    "que tengas un excelente d√≠a", "¬°que tengas una excelente tarde!", "que tengas una linda tarde"
                ]
                for frase_final in frases_cierre_suave:
                    if frase_final in respuesta_contextual.lower():
                        respuesta_contextual = re.sub(frase_final, "", respuesta_contextual, flags=re.IGNORECASE).strip(".! ")
            
                # Eliminar residuos de puntuaci√≥n si qued√≥ la frase vac√≠a o colgante
                if respuesta_contextual.endswith(("¬°", "¬ø", ",", ".", "!", " ")):
                    respuesta_contextual = respuesta_contextual.rstrip("¬°¬ø,!. ")
            
                # √öltimo refuerzo por si qued√≥ vac√≠a tras filtros
                if not respuesta_contextual.strip():
                    respuesta_contextual = "Hola, contame."
            
                session["ultimas_respuestas"].append(respuesta_contextual)
                session["contador_interacciones"] += 1
                user_sessions[user_id] = session
                return {"respuesta": respuesta_contextual}
            

            
            
            if clasificacion == "CONSULTA_AGENDAR":
                registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario, CONSULTA_AGENDAR)
                respuesta = (
                    "Para agendar una sesi√≥n o conocer disponibilidad, pod√©s escribirle directamente al Lic. Bustamante al WhatsApp +54 911 3310-1186."
                )
                session["ultimas_respuestas"].append(respuesta)
                user_sessions[user_id] = session
                session["contador_interacciones"] += 1
                user_sessions[user_id] = session
                return {"respuesta": respuesta}

            
            if clasificacion == "CONSULTA_MODALIDAD":
                registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario, CONSULTA_MODALIDAD)
                respuesta = (
                    "El Lic. Bustamante trabaja exclusivamente en modalidad Online, a trav√©s de videollamadas. "
                    "Atiende de lunes a viernes, entre las 13:00 y las 20:00 hs. "
                    "Pod√©s consultarle por disponibilidad escribi√©ndole directamente al WhatsApp +54 911 3310-1186."
                )
                session["ultimas_respuestas"].append(respuesta)
                session["contador_interacciones"] += 1
                user_sessions[user_id] = session
                return {"respuesta": respuesta}

            
            if clasificacion in ["TESTEO", "MALICIOSO", "IRRELEVANTE"]:
                registrar_auditoria_input_original(user_id, mensaje_original, mensaje_usuario, clasificacion)
            
                # ‚ö†Ô∏è Solo bloquear si NO hay emociones registradas y es muy temprano
                if (
                    not hay_contexto_clinico_anterior(user_id)
                    and not session.get("emociones_detectadas")
                    and session.get("contador_interacciones", 0) <= 2
                ):
                    session["input_sospechoso"] = True
                    session["ultimas_respuestas"].append(respuesta_default_fuera_de_contexto())
                    user_sessions[user_id] = session
                    return {"respuesta": respuesta_default_fuera_de_contexto()}
            
                else:
                    tipo_input = CLINICO_CONTINUACION
                    session["contador_interacciones"] += 1  # ‚úÖ CORRECCI√ìN CR√çTICA AQU√ç
                    user_sessions[user_id] = session
        
        except Exception as e:
            print(f"üß†‚ùå Error en clasificaci√≥n contextual: {e}")
        
        # Registrar interacci√≥n con mensaje original incluido
        interaccion_id = registrar_interaccion(user_id, mensaje_usuario, mensaje_original)

        # üîÑ Si el input actual es ambiguo, pero ya hubo emociones antes, forzar continuidad cl√≠nica
        if tipo_input in ["FUERA_DE_CONTEXTO", "INDEFINIDO", "CONFUSO", "OTRO"]:
            if hay_contexto_clinico_anterior(user_id):
                tipo_input = CLINICO_CONTINUACION

        # üîÅ Reinicio condicional del contador por inactividad mayor a 60 segundos
        if "ultima_interaccion" in session:
            tiempo_inactivo = time.time() - session["ultima_interaccion"]
            if tiempo_inactivo > 60:
                session["contador_interacciones"] = 0
                session["emociones_detectadas"] = []
                session["intenciones_clinicas_acumuladas"] = []
        



        # ====================== INTERACCI√ìN 5 ‚Äì Resumen cl√≠nico preliminar e inferencia ======================
        if contador == 5:
            for mensaje in session["mensajes"]:
                nuevas = detectar_emociones_negativas(mensaje) or []
                for emocion in nuevas:
                    emocion = emocion.lower().strip()
                    emocion = re.sub(r'[^\w\s√°√©√≠√≥√∫√º√±]+$', '', emocion)
                    if emocion not in session["emociones_detectadas"]:
                        session["emociones_detectadas"].append(emocion)
        
            resultado = _inferir_por_db_o_openai(user_id, mensaje_usuario, session)
            clasificacion_mental = resultado.get("cuadro_clinico_probable")


        
            if session["emociones_detectadas"]:
                resumen_clinico = generar_resumen_interaccion_5(session, user_id, interaccion_id, contador, user_sessions)

            
                if not resumen_clinico or len(resumen_clinico.strip()) < 5:
                    respuesta = "¬øQuer√©s contarme un poco m√°s sobre c√≥mo te sent√≠s √∫ltimamente?"
                else:
                    respuesta = (
                        resumen_clinico
                        + " ¬øTe interesar√≠a consultarlo con el Lic. Daniel O. Bustamante?"
                    )

            else:
                respuesta = (
                    "Comprendo. Para poder ayudarte mejor, ¬øpodr√≠as contarme c√≥mo te sent√≠s √∫ltimamente?"
                )
        
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session  # Asegura persistencia en la sesi√≥n
            registrar_respuesta_openai(interaccion_id, respuesta)
            return {"respuesta": respuesta}


        # ‚úÖ Interacci√≥n 9 ‚Äì Confirmaci√≥n indirecta de emoci√≥n inferida en la 5
        if contador == 9 and session.get("emocion_inferida_5") and session["emocion_inferida_5"] not in session["emociones_detectadas"]:
            emocion = session["emocion_inferida_5"]
        
            expresiones_asociadas = {
                "ansiedad": ["me acelero", "me pongo nervioso", "no puedo respirar", "taquicardia", "me siento agitado", "inquietud"],
                "tristeza": ["sin ganas", "todo me cuesta", "me siento vac√≠o", "sin sentido", "todo me da igual"],
                "angustia": ["presi√≥n en el pecho", "nudo en la garganta", "me cuesta tragar", "llanto contenido"],
                "enojo": ["estallo f√°cil", "me irrito con todo", "no tolero nada", "me molesta todo", "exploto por nada"],
                "miedo": ["me paralizo", "no puedo salir", "me da terror", "me da miedo enfrentarlo", "evito esas situaciones"]
            }
        
            expresiones = expresiones_asociadas.get(emocion.lower(), [])
            emocion_sugerida = any(expresion in mensaje_usuario for expresion in expresiones)
        
            if emocion in mensaje_usuario or emocion_sugerida or "s√≠" in mensaje_usuario or "me pasa" in mensaje_usuario:
                session["emociones_detectadas"].append(emocion)
                registrar_emocion(emocion, f"confirmaci√≥n impl√≠cita reforzada (interacci√≥n 9)", user_id)
        
                respuesta = (
                    f"Gracias por retomarlo. Parece tratarse de una experiencia emocional vinculada a {emocion.lower()}. "
                    "¬øQuer√©s contarme un poco m√°s sobre c√≥mo se fue desarrollando √∫ltimamente?"
                )
        
                session["ultimas_respuestas"].append(respuesta)
                user_sessions[user_id] = session
                registrar_respuesta_openai(interaccion_id, respuesta)
                return {"respuesta": respuesta}
        
                
            # Detectar emociones nuevas de interacciones 6 a 9
            mensajes_previos = session["mensajes"][-4:]
            emociones_nuevas = []
        
            for mensaje in mensajes_previos:
                nuevas = detectar_emociones_negativas(mensaje) or []
                for emocion in nuevas:
                    emocion = emocion.lower().strip()
                    emocion = re.sub(r'[^\w\s√°√©√≠√≥√∫√º√±]+$', '', emocion)
                    if emocion not in session["emociones_detectadas"]:
                        emociones_nuevas.append(emocion)
                        session["emociones_detectadas"].append(emocion)
        
            resultado = _inferir_por_db_o_openai(user_id, mensaje_usuario, session)
            clasificacion_mental = resultado.get("cuadro_clinico_probable") or generar_resumen_emociones(session["emociones_detectadas"])

        
            # Generar resumen cl√≠nico basado en mensajes y emociones
            resumen_clinico = generar_resumen_interaccion_9(session, user_id, interaccion_id, contador, user_sessions)

        
            # Generar hip√≥tesis psicodin√°mica tentativa
            from core.inferencia_psicodinamica import generar_hipotesis_psicodinamica
            hipotesis_psico = generar_hipotesis_psicodinamica(session["emociones_detectadas"], session["mensajes"])
        
            # Redacci√≥n final con inferencia reforzada y cierre profesional
            respuesta = resumen_clinico
        
            if hipotesis_psico:
                respuesta += f" {hipotesis_psico} "
        
            if clasificacion_mental:
                respuesta += (
                    f" Adem√°s, se suma una impresi√≥n de posible {clasificacion_mental.lower()} predominante, "
                    "tal como se mencion√≥ anteriormente."
                )
        
            respuesta += (
                " No obstante, para estar seguros se requiere de una evaluaci√≥n psicol√≥gica profesional. "
                "Te sugiero que te contactes con el Lic. Bustamante. "
                "Lamentablemente, no puedo continuar con la conversaci√≥n m√°s all√° de este punto."
            )
        
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session  # Asegura persistencia en la sesi√≥n
            registrar_respuesta_openai(interaccion_id, respuesta)
            return {"respuesta": respuesta}

        # ====================== INTERACCI√ìN 10 O POSTERIOR: CIERRE DEFINITIVO ======================
        if contador >= 10 and tipo_input == CLINICO:
            if contador == 10:
                respuesta = (
                    "He encontrado interesante nuestra conversaci√≥n, pero para profundizar m√°s en el an√°lisis de tu malestar, "
                    "ser√≠a ideal que consultes con un profesional. Por ello, te sugiero que te contactes con el Lic. Bustamante. "
                    "Lamentablemente, no puedo continuar con la conversaci√≥n m√°s all√° de este punto."
                )
        
            elif contador >= 14:
                from core.inferencia_psicodinamica import generar_hipotesis_psicodinamica
            
                hipotesis_psico = generar_hipotesis_psicodinamica(
                    session["emociones_detectadas"], session["mensajes"]
                )
            
                frases_cierre_varias = [
                    "Como mencion√© en otra ocasi√≥n, no puedo continuar respondiendo desde este espacio.",
                    "Tal como advert√≠ antes, no es posible continuar esta conversaci√≥n por este medio.",
                    "Ya te indiqu√© que este canal tiene un l√≠mite de interacci√≥n.",
                    "Como fue se√±alado, este espacio no permite continuar m√°s all√° de este punto.",
                    "Como fue expresado antes, no podr√© seguir dialogando por esta v√≠a.",
                ]
                cierre = random.choice(frases_cierre_varias)
            
                respuesta = (
                    hipotesis_psico + " " + cierre + " "
                    "Es fundamental que, si dese√°s avanzar, lo hagas consultando directamente con el Lic. Daniel O. Bustamante, "
                    "quien podr√° brindarte el acompa√±amiento profesional que necesit√°s. "
                    "No me es posible continuar respondiendo mensajes en este espacio."
                )
            
                session["ultimas_respuestas"].append(respuesta)
                user_sessions[user_id] = session  # Asegura persistencia en la sesi√≥n
                registrar_respuesta_openai(interaccion_id, respuesta)
                return {"respuesta": respuesta}
                      
                    
            elif contador == 15:
                respuesta = (
                    "Ya en este punto, no puedo seguir brind√°ndote orientaci√≥n desde este espacio. "
                    "Lo m√°s apropiado es que puedas consultarlo directamente con el Lic. Daniel O. Bustamante, "
                    "quien podr√° ofrecerte un acompa√±amiento profesional. "
                    "No me es posible continuar con la conversaci√≥n."
                )
        
            elif contador >= 16:
                respuesta = (
                    "Como te mencion√© anteriormente, ya no puedo continuar con esta conversaci√≥n desde aqu√≠. "
                    "Es fundamental que, si dese√°s avanzar, lo hagas consultando directamente con el Lic. Daniel O. Bustamante, "
                    "quien podr√° brindarte el acompa√±amiento profesional que necesit√°s. "
                    "No me es posible continuar respondiendo mensajes en este espacio."
                )

            elif contador >= 17:
                respuesta = (
                    "Ya he sido claro en que no puedo continuar respondiendo mensajes por este medio. "
                    "Te reitero que lo indicado es que consultes directamente con el Lic. Daniel O. Bustamante, "
                    "quien podr√° brindarte el acompa√±amiento profesional que necesit√°s. "
                    "No insistas por este canal, ya que no podr√© responderte."
                )
                session["ultimas_respuestas"].append(respuesta)
                user_sessions[user_id] = session  # Asegura persistencia en la sesi√≥n
                registrar_respuesta_openai(interaccion_id, respuesta)
                return {"respuesta": respuesta}
        
            else:
                recordatorio = ""
                if (contador - 10) % 2 == 0:
                    recordatorio = " Te recuerdo que para una orientaci√≥n adecuada, deber√≠as consultar con el Lic. Daniel O. Bustamante."
        
                respuesta_variable = seleccionar_estilo_clinico_variable()
                respuesta = respuesta_variable + recordatorio
        
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session  # Asegura persistencia en la sesi√≥n
            registrar_respuesta_openai(interaccion_id, respuesta)
            return {"respuesta": respuesta}

        # üõë Filtro definitivo para inputs irrelevantes, maliciosos o de cortes√≠a post-cierre
        if contador >= 10 and clasificacion in ["IRRELEVANTE", "MALICIOSO", "CORTESIA"]:
            respuesta = (
                "Gracias por tu mensaje. Ya no puedo continuar con esta conversaci√≥n por este medio. "
                "Te recomiendo que contactes directamente con el Lic. Daniel O. Bustamante para una evaluaci√≥n adecuada."
            )
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session
            registrar_respuesta_openai(interaccion_id, respuesta)
            return {"respuesta": respuesta}
        
        # ‚úÖ Si hay una respuesta cl√≠nica manual para esta interacci√≥n, se devuelve directamente
        # üîÑ (Se reemplaz√≥ el uso de 'respuestas_personalizadas' por 'RESPUESTAS_CLINICAS' del m√≥dulo importado)
        if contador in RESPUESTAS_CLINICAS:
            respuesta_manual = RESPUESTAS_CLINICAS[contador]
        
            # Auditor√≠a (registro expl√≠cito como respuesta manual no generada por OpenAI)
            registrar_auditoria_respuesta(
                user_id=user_id,
                respuesta_original=respuesta_manual,
                respuesta_final=respuesta_manual,
                motivo_modificacion="respuesta manual predefinida"
            )
        
            session["ultimas_respuestas"].append(respuesta_manual)
            user_sessions[user_id] = session
            return {"respuesta": respuesta_manual}

        
        # ‚úÖ Interacciones 6 a 8 ‚Äì Confirmaci√≥n impl√≠cita de emoci√≥n inferida 5 si a√∫n no fue confirmada
        if 6 <= contador <= 8 and session.get("emocion_inferida_5") and session["emocion_inferida_5"] not in session["emociones_detectadas"]:
            emocion = session["emocion_inferida_5"]
        
            expresiones_asociadas = {
                "ansiedad": ["me acelero", "me pongo nervioso", "no puedo respirar", "taquicardia", "me siento agitado", "inquietud"],
                "tristeza": ["sin ganas", "todo me cuesta", "me siento vac√≠o", "sin sentido", "todo me da igual"],
                "angustia": ["presi√≥n en el pecho", "nudo en la garganta", "me cuesta tragar", "llanto contenido"],
                "enojo": ["estallo f√°cil", "me irrito con todo", "no tolero nada", "me molesta todo", "explot√≥ por nada"],
                "miedo": ["me paralizo", "no puedo salir", "me da terror", "me da miedo enfrentarlo", "evito esas situaciones"]
            }
        
            expresiones = expresiones_asociadas.get(emocion.lower(), [])
            emocion_sugerida = any(expresion in mensaje_usuario for expresion in expresiones)
        
            if emocion in mensaje_usuario or emocion_sugerida or "s√≠" in mensaje_usuario or "me pasa" in mensaje_usuario:
                if emocion not in session["emociones_detectadas"]:
                    session["emociones_detectadas"].append(emocion)
                    registrar_emocion(emocion, f"confirmaci√≥n impl√≠cita reforzada (interacci√≥n {contador})", user_id)
        
                respuesta = (
                    f"Gracias por confirmarlo. ¬øQuer√©s contarme un poco m√°s sobre c√≥mo se manifiesta esa {emocion} en tu d√≠a a d√≠a?"
                )
        
                session["ultimas_respuestas"].append(respuesta)
                user_sessions[user_id] = session
                registrar_respuesta_openai(interaccion_id, respuesta)
                return {"respuesta": respuesta}


        # üß† Nueva respuesta para la PRIMERA INTERACCI√ìN
        if contador == 1:
            # ‚ö†Ô∏è Reforzar que si es SALUDO + contenido cl√≠nico, se trate como cl√≠nico
            if tipo_input == SALUDO and es_tema_clinico_o_emocional(mensaje_usuario):
                tipo_input = CLINICO
        
            # ‚úÖ Determinar si ya hubo un saludo en respuestas previas
            ya_saludo = any("hola" in r.lower() for r in session.get("ultimas_respuestas", []))
        
            # ‚úÖ Si es cl√≠nico o hay contexto cl√≠nico previo, generar respuesta profesional
            if tipo_input in [CLINICO, CLINICO_CONTINUACION] or hay_contexto_clinico_anterior(user_id) or es_tema_clinico_o_emocional(mensaje_usuario):
                
                # Consultar historial cl√≠nico reciente
                historial = obtener_ultimo_historial_emocional(user_id)
                
                mensaje_historial = ""
                if historial and historial.emociones and historial.fecha:
                    emociones_previas = ", ".join(historial.emociones)
                    dias_transcurridos = (datetime.now() - historial.fecha).days
                    tiempo_mencion = f"Hace {dias_transcurridos} d√≠as" if dias_transcurridos > 0 else "Recientemente"
                
                    mensaje_historial = (
                        f"{tiempo_mencion} consultaste por emociones como: {emociones_previas}. "
                        "¬øNot√°s alg√∫n cambio o segu√≠s sinti√©ndote de forma similar?\n"
                    )
                
                saludo_inicio = ""
                if contador == 1 and not session["mensajes"] and not ya_saludo:
                    saludo_inicio = "- Comenz√° la respuesta con un saludo breve como 'Hola, ¬øqu√© tal?'.\n"
                
                prompt = (
                    f"Mensaje recibido del usuario: \"{mensaje_usuario}\".\n"
                    f"{mensaje_historial}"
                    "Redact√° una respuesta breve, profesional y cl√≠nica como si fueras el asistente virtual del Lic. Daniel O. Bustamante, psic√≥logo.\n"
                    "Estilo y directrices obligatorias:\n"
                    "- Manten√© un tono cl√≠nico, sobrio, profesional y respetuoso.\n"
                    f"{saludo_inicio}"
                    "- Si se detecta malestar emocional, formul√° una observaci√≥n objetiva con expresiones como: 'se observa...', 'se advierte...', 'impresiona...', 'podr√≠a tratarse de...'\n"
                )
                

        
        
                respuesta_original = generar_respuesta_con_openai(prompt, contador, user_id, mensaje_usuario, mensaje_original)
        
                # Validaci√≥n por fallback
                if not respuesta_original or not isinstance(respuesta_original, str) or len(respuesta_original.strip()) < 5:
                    respuesta_ai = (
                        "¬øPod√©s contarme un poco m√°s sobre c√≥mo lo est√°s viviendo estos d√≠as? "
                        "A veces ponerlo en palabras ayuda a entenderlo mejor."
                    )
                    registrar_auditoria_respuesta(user_id, "respuesta vac√≠a", respuesta_ai, "Fallback cl√≠nico: respuesta nula o inv√°lida de OpenAI")
                    session["ultimas_respuestas"].append(respuesta_ai)
                    user_sessions[user_id] = session
                    return {"respuesta": respuesta_ai}
        
                registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_original)
                registrar_respuesta_openai(None, respuesta_original)
                session["ultimas_respuestas"].append(respuesta_original)
                user_sessions[user_id] = session
                return {"respuesta": respuesta_original}
        
            # üîπ Si no es cl√≠nico ni hay contexto previo, mantener respuesta neutra
            return {
                "respuesta": (
                    "Gracias por tu mensaje. ¬øHay algo puntual que te gustar√≠a compartir o consultar en este espacio?"
                )
            }

        # üü¢ Si la frase es neutral, de cortes√≠a o curiosidad, no analizar emocionalmente ni derivar
        if mensaje_usuario in EXPRESIONES_DESCARTADAS or any(p in mensaje_usuario for p in ["recomienda", "opin√°s", "atiende"]):
            respuesta = (
                "Gracias por tu mensaje. Si en alg√∫n momento dese√°s explorar una inquietud emocional, "
                "estoy disponible para ayudarte desde este espacio."
            )
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session
            return {"respuesta": respuesta}

        # üîç DEPURACI√ìN: Mostrar estado actual de la sesi√≥n
        print("\n===== DEPURACI√ìN - SESI√ìN DEL USUARIO =====")
        print(f"Usuario ID: {user_id}")
        print(f"Interacci√≥n actual: {contador}")
        print(f"Mensajes en la sesi√≥n: {session['mensajes']}")
        print(f"Emociones acumuladas antes del an√°lisis: {session['emociones_detectadas']}")
        print("========================================\n")
        
        # Detectar negaciones o correcciones
        if any(negacion in mensaje_usuario for negacion in ["no dije", "no eso", "no es as√≠", "eso no", "no fue lo que dije"]):
            return {"respuesta": "Entiendo, gracias por aclararlo. ¬øC√≥mo describir√≠as lo que sientes?"}


        # Manejo para "no s√©", "ninguna", "ni la menor idea" tras describir un s√≠ntoma
        if mensaje_usuario in ["no s√©", "ninguna", "ni la menor idea"]:
            session["contador_interacciones"] += 1  # ‚úÖ Incremento obligatorio
            if session["contador_interacciones"] >= 9 or session["mensajes"]:
                respuesta_clinica = generar_resumen_clinico_y_estado(session, session["contador_interacciones"])
                respuesta = (
                    f"{respuesta_clinica} En caso de que lo desees, pod√©s contactar al Lic. Daniel O. Bustamante escribi√©ndole al WhatsApp +54 911 3310-1186."
                )
            else:
                respuesta = "Entendido, quedo a tu disposici√≥n. Si necesitas algo m√°s, no dudes en dec√≠rmelo."
        
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session
            return {"respuesta": respuesta}

        
        if es_consulta_contacto(mensaje_usuario, user_id, mensaje_original):
            session["contador_interacciones"] += 1
            user_sessions[user_id] = session
            return {
                "respuesta": "Para contactar al Lic. Daniel O. Bustamante, pod√©s enviarle un mensaje al WhatsApp +54 911 3310-1186. √âl estar√° encantado de responderte."
            }

        
        # üîπ Proporciona el n√∫mero de contacto si el usuario pregunta por el "mejor psic√≥logo" o si es buen profesional
        frases_recomendacion = [
            "especialista", "mejor psicologo", "mejor psic√≥logo", "mejor terapeuta",
            "mejor psicoterapeuta", "el mejor", "a quien me recomendas", "que opinas",
            "qu√© opinas", "excelente psicologo", "buen profesional", "que me recomendas",
            "es bueno como profesional", "es buen profesional", "es recomendable", 
            "lo recomendas", "lo recomend√°s", "conf√≠as en √©l", "qu√© tal es como profesional",
            "que opinas del psicologo", "lo recomendarias", "es recomendable", "recomendable"
        ]
        
        mensaje_normalizado = unicodedata.normalize("NFKD", mensaje_usuario).encode("ascii", "ignore").decode("utf-8").lower()
        
        if any(frase in mensaje_normalizado for frase in frases_recomendacion):
            session["contador_interacciones"] += 1
            respuesta = (
                "En mi opini√≥n, el Lic. Daniel O. Bustamante es un excelente especialista en psicolog√≠a cl√≠nica. "
                "Seguramente podr√° ayudarte. Pod√©s escribirle directamente al WhatsApp +54 911 3310-1186."
            )
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session
            return {"respuesta": respuesta}


        # Manejo para "solo un s√≠ntoma y no m√°s" (responder como en la 5¬™ interacci√≥n y finalizar)
        if "no quiero dar m√°s s√≠ntomas" in mensaje_usuario or "solo este s√≠ntoma" in mensaje_usuario:
            mensajes = session["mensajes"]
            mensajes.append(mensaje_usuario)
            respuesta_analisis = analizar_texto(mensajes)
            session["mensajes"].clear()
            session["contador_interacciones"] += 1
            user_sessions[user_id] = session
            return {
                "respuesta": (
                    f"{respuesta_analisis} Si necesitas un an√°lisis m√°s profundo, tambi√©n te recomiendo contactar al Lic. Daniel O. Bustamante al WhatsApp "
                    f"+54 911 3310-1186 para una evaluaci√≥n m√°s detallada."
                )
            }
              
        # üß© Generar respuesta con OpenAI si no es la interacci√≥n 5, 9 o 10+
        saludo_inicio = "- Comenz√° la respuesta con un saludo breve como ‚ÄúHola, ¬øqu√© tal?‚Äù.\n" if contador == 1 else ""
        

        # ‚úÖ Bloque de generaci√≥n de respuesta cl√≠nica personalizada
        # Generaci√≥n del prompt cl√≠nico personalizado seg√∫n interacci√≥n
        prompt = (
            f"Mensaje recibido del usuario: '{mensaje_usuario}'.\n"
            "Redact√° una respuesta breve, profesional y cl√≠nica como si fueras el asistente virtual del Lic. Daniel O. Bustamante, psic√≥logo.\n"
            "Estilo y directrices obligatorias:\n"
            "- Manten√© un tono cl√≠nico, sobrio, profesional y respetuoso.\n"
            "- Comenz√° la respuesta con un saludo breve como 'Hola, ¬øqu√© tal?' solo si es la interacci√≥n 1.\n"
            "- Si se detecta malestar emocional, formul√° una observaci√≥n objetiva con expresiones como: 'se observa...', 'se advierte...', 'impresiona...', 'podr√≠a tratarse de...', 'da la sensaci√≥n de ser...', 'normalmente se trata de un...', etc.\n"
            "- Evit√° la frase 'Pareciera tratarse de...' en todas las interacciones, excepto en la 5 y 9.\n"
            "- No uses agradecimientos en ninguna interacci√≥n (ni al inicio ni al final).\n"
            "- No uses frases motivacionales ni simulaciones emp√°ticas (ej: 'te entiendo', 'est√°s en buenas manos', etc.).\n"
            "- No uses lenguaje institucional ni expresiones como 'nuestro equipo', 'desde este espacio', etc.\n"
            "- No brindes datos de contacto, precios ni derivaciones, salvo que sea interacci√≥n 5, 9 o a partir de la 10.\n"
            "- Solo si el mensaje es claramente cl√≠nico, gener√° una respuesta anal√≠tica breve y profesional.\n"
            "- Si no tiene contenido cl√≠nico o emocional, devolv√© una frase neutra: 'Gracias por tu mensaje. ¬øHay algo puntual que te gustar√≠a compartir o consultar en este espacio?'\n"
            f"- IMPORTANTE: est√°s en la interacci√≥n {contador}.\n"
        )
        
        # Solicitar respuesta a OpenAI con el nuevo prompt cl√≠nico
        respuesta_original = generar_respuesta_con_openai(prompt, contador, user_id, mensaje_usuario, mensaje_original)
        
        # üîç Filtro para remover saludo 'Hola, ¬øqu√© tal?' si no es la primera interacci√≥n
        if contador != 1 and respuesta_original.strip().lower().startswith("hola, ¬øqu√© tal?"):
            respuesta_filtrada = respuesta_original.replace("Hola, ¬øqu√© tal? ", "", 1).strip()
            motivo = "Se elimin√≥ el saludo inicial 'Hola, ¬øqu√© tal?' porque no corresponde repetirlo en interacciones posteriores a la primera"
            registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_filtrada, motivo)
            respuesta_ai = respuesta_filtrada
        else:
            respuesta_ai = respuesta_original
        


        # üîí Filtro contra menci√≥n indebida al Lic. Bustamante fuera de interacciones permitidas
        if contador not in [5, 9] and contador < 10 and not es_consulta_contacto(mensaje_usuario, user_id, mensaje_original):
            if "bustamante" in respuesta_original.lower() or "+54 911 3310-1186" in respuesta_original:
                # Eliminar cualquier frase que mencione al Lic. Bustamante o su n√∫mero
                respuesta_filtrada = re.sub(
                    r"(el Lic\.? Bustamante.*?[\.\!\?])",
                    "",
                    respuesta_original,
                    flags=re.IGNORECASE
                )
                motivo = "Menci√≥n indebida a contacto fuera de interacciones 5, 9 o 10+"
                registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_filtrada.strip(), motivo)
                respuesta_ai = respuesta_filtrada.strip()
            else:
                respuesta_ai = respuesta_original
        else:
            respuesta_ai = respuesta_original

        # üõë Filtro para derivaciones impl√≠citas indebidas
        frases_implicitas_derivacion = [
            "podr√≠as trabajarlo con", "te sugiero considerarlo en una consulta",
            "evaluarlo con un profesional", "ser√≠a conveniente que lo converses",
            "hablarlo en un espacio terap√©utico", "apoyo profesional", 
            "ayuda especializada", "espacio terap√©utico", 
            "alguien capacitado", "profesional de la salud mental"
        ]
        
        if contador not in [5, 9] and contador < 10 and not es_consulta_contacto(mensaje_usuario, user_id, mensaje_original):
            for frase in frases_implicitas_derivacion:
                if frase in respuesta_original.lower():
                    motivo = "Derivaci√≥n impl√≠cita fuera de interacci√≥n permitida"
                    respuesta_ai = (
                        "Gracias por tu mensaje. Si quer√©s, pod√©s contarme un poco m√°s sobre lo que est√°s sintiendo "
                        "para poder continuar con el an√°lisis cl√≠nico correspondiente."
                    )
                    try:
                        registrar_historial_clinico(
                            user_id=user_id,
                            emociones=emociones_detectadas if 'emociones_detectadas' in locals() else [],
                            sintomas=[],
                            tema="Cl√≠nica - Derivaci√≥n impl√≠cita",
                            respuesta_openai=respuesta_ai,
                            sugerencia="",
                            fase_evaluacion="respuesta_derivacion_implicita",
                            interaccion_id=int(time.time()),
                            fecha=datetime.now(),
                            fuente="web",
                            origen="derivacion_implicita",        # <-- nuevo/estandarizado
                            eliminado=False,
                        )
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error al registrar historial cl√≠nico desde derivaci√≥n impl√≠cita: {e}")


                    registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_ai, motivo)
                    break
                session["ultimas_respuestas"].append(respuesta_ai)
                user_sessions[user_id] = session
                return {"respuesta": respuesta_ai}
        
        # üîê Seguridad textual: verificar si la respuesta de OpenAI contiene elementos peligrosos
        if contiene_elementos_peligrosos(respuesta_original):
            respuesta_ai = (
                "Por razones de seguridad, la respuesta generada fue descartada por contener elementos t√©cnicos no permitidos. "
                "Pod√©s intentar formular tu consulta de otra manera o escribir directamente al WhatsApp del Lic. Bustamante: +54 911 3310-1186."
            )
            try:
                registrar_historial_clinico(
                    user_id=user_id,
                    emociones=emociones_detectadas if 'emociones_detectadas' in locals() else [],
                    sintomas=[],
                    tema="Cl√≠nica - Respuesta peligrosa descartada",
                    respuesta_openai=respuesta_ai,
                    sugerencia="",
                    fase_evaluacion="respuesta_peligrosa",
                    interaccion_id=int(time.time()),
                    fecha=datetime.now(),
                    fuente="web",
                    origen="respuesta_peligrosa",        # <-- estandarizado
                    eliminado=False,
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Error al registrar historial cl√≠nico desde respuesta peligrosa: {e}")

                
            registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_ai, "Respuesta descartada por contener elementos peligrosos")
            session["ultimas_respuestas"].append(respuesta_ai)
            user_sessions[user_id] = session
            return {"respuesta": respuesta_ai}

        
        # Validaci√≥n previa
        if not respuesta_original:
            respuesta_ai = (
                "Lo siento, hubo un inconveniente al generar una respuesta autom√°tica. Pod√©s escribirle al Lic. Bustamante al WhatsApp +54 911 3310-1186."
            )
            try:
                registrar_historial_clinico(
                    user_id=user_id,
                    emociones=emociones_detectadas if 'emociones_detectadas' in locals() else [],
                    sintomas=[],
                    tema="Cl√≠nica - Respuesta vac√≠a",
                    respuesta_openai=respuesta_ai,
                    sugerencia="",
                    fase_evaluacion="respuesta_vac√≠a",
                    interaccion_id=int(time.time()),
                    fecha=datetime.now(),
                    fuente="web",
                    origen="respuesta_vacia",        # <-- nuevo est√°ndar
                    eliminado=False,
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Error al registrar historial cl√≠nico desde respuesta vac√≠a: {e}")


            registrar_auditoria_respuesta(user_id, "Error al generar respuesta", respuesta_ai, "Error: OpenAI devolvi√≥ respuesta vac√≠a")
            session["ultimas_respuestas"].append(respuesta_ai)
            user_sessions[user_id] = session
            return {"respuesta": respuesta_ai}
        
        respuesta_ai = respuesta_original  # Copia editable
        motivo = None

        # üîç Filtro para lenguaje institucional
        palabras_prohibidas = ["nosotros", "nuestro equipo", "nuestra instituci√≥n", "desde nuestra", "trabajamos en conjunto"]
        if any(palabra in respuesta_ai.lower() for palabra in palabras_prohibidas):
            respuesta_ai = (
                "Gracias por tu consulta. El Lic. Daniel O. Bustamante estar√° encantado de ayudarte. "
                "Pod√©s escribirle directamente al WhatsApp +54 911 3310-1186 para obtener m√°s informaci√≥n."
            )
            try:
                registrar_historial_clinico(
                    user_id=user_id,
                    emociones=emociones_detectadas if 'emociones_detectadas' in locals() else [],
                    sintomas=[],
                    tema="Cl√≠nica - Lenguaje institucional",
                    respuesta_openai=respuesta_ai,
                    sugerencia="",
                    fase_evaluacion="respuesta_institucional",
                    interaccion_id=int(time.time()),
                    fecha=datetime.now(),
                    fuente="web",
                    origen="filtro_lenguaje_institucional",          # o "filtro_institucional" si prefer√≠s ser m√°s espec√≠fico
                    eliminado=False,
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Error al registrar historial cl√≠nico desde respuesta institucional: {e}")
            
                            
            session["ultimas_respuestas"].append(respuesta_ai)
            user_sessions[user_id] = session
            return {"respuesta": respuesta_ai}


        # üîç Filtro para lenguaje emp√°tico simulado o gen√©rico prohibido
        frases_empaticas_simuladas = [
            "estoy aqu√≠ para ayudarte", "estoy aqu√≠ para ayudarle", "te puedo ayudar", 
            "estamos para ayudarte", "cuente conmigo", "puedo ayudarte", 
            "tranquilo", "no est√°s solo", "est√°s en buenas manos", 
            "todo va a estar bien", "puede contar conmigo"
        ]
        if any(frase in respuesta_ai.lower() for frase in frases_empaticas_simuladas):
            respuesta_ai = (
                "Gracias por tu mensaje. Si quer√©s, pod√©s contarme un poco m√°s sobre lo que est√°s atravesando "
                "para poder continuar con el an√°lisis cl√≠nico correspondiente."
            )
            try:
                registrar_historial_clinico(
                    user_id=user_id,
                    emociones=emociones_detectadas if 'emociones_detectadas' in locals() else [],
                    sintomas=[],
                    tema="Cl√≠nica - Lenguaje emp√°tico simulado",
                    respuesta_openai=respuesta_ai,
                    sugerencia="",
                    fase_evaluacion="respuesta_emp√°tica_simulada",
                    interaccion_id=int(time.time()),
                    fecha=datetime.now(),
                    fuente="web",
                    origen="filtro_empatia_simulada",          # o "filtro_empatico" si quer√©s m√°s detalle
                    eliminado=False,
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Error al registrar historial cl√≠nico desde respuesta emp√°tica simulada: {e}")
            
                            
            motivo = "Frase emp√°tica simulada detectada y reemplazada"

        
        # üîç Filtro para desv√≠os tem√°ticos (por si OpenAI habla de finanzas o cosas raras)
        temas_prohibidos = ["finanzas", "inversiones", "educaci√≥n financiera", "consultor√≠a financiera", "legal", "t√©cnico"]
        if any(tema in respuesta_ai.lower() for tema in temas_prohibidos):
            respuesta_ai = (
                "El Lic. Daniel O. Bustamante es psic√≥logo cl√≠nico. Si quer√©s saber m√°s sobre los servicios que ofrece, "
                + obtener_mensaje_contacto() +
                " y te brindar√° toda la informaci√≥n necesaria."
            )
            try:
                registrar_historial_clinico(
                    user_id=user_id,
                    emociones=emociones_detectadas if 'emociones_detectadas' in locals() else [],
                    sintomas=[],
                    tema="Cl√≠nica - Tema desviado",
                    respuesta_openai=respuesta_ai,
                    sugerencia="",
                    fase_evaluacion="respuesta_tematica_desviada",
                    interaccion_id=int(time.time()),
                    fecha=datetime.now(),
                    fuente="web",
                    origen="filtro_tematica_desviada",   # etiqueta de trazabilidad (opcional)
                    eliminado=False,
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Error al registrar historial cl√≠nico desde respuesta tem√°tica desviada: {e}")
            
                            

        # üîç Filtro para eliminar encabezados como ‚ÄúEstimado/a usuario/a‚Äù
        if respuesta_original.lower().startswith("estimado") or "estimado/a" in respuesta_original.lower():
            respuesta_original = re.sub(r"(?i)^estimado/a\s+usuario/a,?\s*", "", respuesta_original).strip()

        
        # üîç Reemplazo de marcador si qued√≥ en la respuesta
        respuesta_ai = respuesta_ai.replace("[Incluir n√∫mero de contacto]", "+54 911 3310-1186")

        # üõ°Ô∏è Filtrado de precios por si OpenAI menciona alg√∫n valor num√©rico
        if any(palabra in respuesta_ai.lower() for palabra in ["$", "usd", "euros", "‚Ç¨", "d√≥lares", "pesos", "cuesta", "sale", "vale", "precio", "tarifa", "honorario", "paga", "cobra", "cobro"]):
            respuesta_ai = (
                "Sobre los valores de la consulta, te sugiero contactar directamente al Lic. Daniel O. Bustamante. "
                + obtener_mensaje_contacto() +
                " para obtener esa informaci√≥n de manera personalizada."
            )
            try:
                registrar_historial_clinico(
                    user_id=user_id,
                    emociones=emociones_detectadas if 'emociones_detectadas' in locals() else [],
                    sintomas=[],
                    tema="Cl√≠nica - Tema desviado",
                    respuesta_openai=respuesta_ai,
                    sugerencia="",
                    fase_evaluacion="respuesta_tematica_desviada",
                    interaccion_id=int(time.time()),
                    fecha=datetime.now(),
                    fuente="web",
                    origen="filtro_precios",   # etiqueta de contexto
                    eliminado=False,
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Error al registrar historial cl√≠nico desde respuesta tem√°tica desviada: {e}")

                
            # üßæ Auditor√≠a: log si OpenAI intent√≥ responder con precios
            print("‚ö†Ô∏è Se intercept√≥ una respuesta con posible contenido de precios y fue reemplazada para evitar brindar esa informaci√≥n.")

        # ‚ùå Interceptar frases ambiguas que sugieran contacto antes de la interacci√≥n 5
        if contador <= 4:
            frases_implicitas = [
                "si lo desea puedo brindarle m√°s informaci√≥n",
                "si desea m√°s informaci√≥n",
                "puedo brindarle m√°s detalles si lo necesita",
                "si quiere puedo contarle m√°s",
                "estoy aqu√≠ para ayudarle",
                "podr√≠a ayudarle si lo desea",
                "si desea saber m√°s"
            ]
            if any(f in respuesta_ai.lower() for f in frases_implicitas):
                respuesta_ai = (
                    "Gracias por tu mensaje. En este espacio se brinda orientaci√≥n cl√≠nica general. "
                    "¬øQuer√©s contarme un poco m√°s sobre lo que est√°s sintiendo para poder ayudarte mejor?"
                )
                try:
                    registrar_historial_clinico(
                        user_id=user_id,
                        emociones=emociones_detectadas if 'emociones_detectadas' in locals() else [],
                        sintomas=[],
                        tema="Cl√≠nica - Tema desviado",
                        respuesta_openai=respuesta_ai,
                        sugerencia="",
                        fase_evaluacion="respuesta_tematica_desviada",
                        interaccion_id=int(time.time()),
                        fecha=datetime.now(),
                        fuente="web",
                        origen="filtro_contacto_temprano",  # <<< etiqueta de trazabilidad
                        eliminado=False,
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è Error al registrar historial cl√≠nico desde respuesta tem√°tica desviada: {e}")

                    
                motivo = "Frase ambigua de sugerencia de contacto detectada en interacci√≥n temprana"


        # Detectar modificaciones y registrar auditor√≠a
        if respuesta_original != respuesta_ai:
            motivo = "Respuesta modificada por contener lenguaje institucional, tem√°ticas no permitidas o precios"
            registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_ai, motivo)
        else:
            registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_ai)

        # Usar el ID de interacci√≥n previamente registrado para guardar la respuesta
        registrar_respuesta_openai(interaccion_id, respuesta_ai)

        # ‚ùå Filtrado final de menciones indebidas al Lic. Bustamante antes de interacci√≥n 5
        if "bustamante" in respuesta_ai.lower() and contador not in [5, 9] and contador < 10 and not es_consulta_contacto(mensaje_usuario, user_id, mensaje_original):
            respuesta_filtrada = re.sub(r"(?i)con (el )?Lic(\.|enciado)? Daniel O\.? Bustamante.*?(\.|\n|$)", "", respuesta_ai)
            motivo = "Se elimin√≥ menci√≥n indebida al Lic. Bustamante antes de interacci√≥n permitida"
            registrar_auditoria_respuesta(user_id, respuesta_original, respuesta_filtrada, motivo)
            session["ultimas_respuestas"].append(respuesta_filtrada)
            user_sessions[user_id] = session
            return {"respuesta": respuesta_filtrada}

        # ----------------------------- L√çMITE DE INTERACCIONES -----------------------------
        if contador >= LIMITE_INTERACCIONES:
            respuesta = (
                "Este canal ha alcanzado su l√≠mite de interacciones permitidas. "
                "Por razones cl√≠nicas y √©ticas, no es posible continuar. "
                "Te recomiendo que contactes directamente al Lic. Daniel O. Bustamante para el seguimiento profesional."
            )
        
            motivo = "Cierre autom√°tico por alcanzar el l√≠mite de interacciones permitidas"
            registrar_auditoria_respuesta(user_id, "L√≠mite alcanzado", respuesta, motivo)
        
            session.setdefault("interacciones_previas", []).append("CIERRE_LIMITE")
            user_sessions[user_id] = session  # ‚úÖ Persistencia del cambio
        
            session["ultimas_respuestas"].append(respuesta)
            user_sessions[user_id] = session  # Asegura persistencia en la sesi√≥n
            registrar_respuesta_openai(interaccion_id, respuesta)
            return {"respuesta": respuesta}
        
        return {"respuesta": respuesta_ai}


    


    except Exception as e:
        print(f"‚ùå Error inesperado en el endpoint /asistente: {repr(e)}")
        traceback.print_exc()
        return {
            "respuesta": (
                "Ocurri√≥ un error al procesar tu solicitud. Pod√©s intentarlo nuevamente m√°s tarde "
                "o escribirle al Lic. Bustamante por WhatsApp: +54 911 3310-1186."
            )
        }

