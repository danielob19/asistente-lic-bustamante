import random

# ------------------------ Selecci√≥n de estilo ------------------------

def seleccionar_estilo_redaccion() -> str:
    estilos = [
        "clasico",
        "inferencial",
        "estructural",
        "fenomenologico",
        "breve",
        "integrativo",
        "narrativo"  # ‚úÖ Nuevo estilo agregado
    ]
    return random.choice(estilos)

# ------------------------ Reformulaci√≥n narrativa ------------------------

def reformular_estilo_narrativo(base: str) -> str:
    return (
        "A lo largo de lo expresado, se configura un hilo emocional que podr√≠a estar atravesado por lo siguiente: "
        + base + " "
        + "Este relato, aunque fragmentario, permite entrever una vivencia que no ha sido plenamente significada, "
        + "pero que resuena como una constante interna que podr√≠a estar operando en silencio desde hace tiempo."
    )

# ------------------------ Reformulaci√≥n seg√∫n estilo ------------------------

def reformular_hipotesis(base: str, estilo: str) -> str:
    if estilo == "clasico":
        return base
    elif estilo == "inferencial":
        return base.replace("Podr√≠a estar operando", "Da la impresi√≥n de que se configura").replace("y el", "y un")
    elif estilo == "estructural":
        return "Se sugiere un conflicto estructural entre demandas internas y la vivencia de insuficiencia afectiva."
    elif estilo == "fenomenologico":
        return "La experiencia parece te√±ida por una oscilaci√≥n entre b√∫squeda de aprobaci√≥n y temor a no ser suficiente."
    elif estilo == "breve":
        return "Surge una tensi√≥n entre necesidad de validaci√≥n y miedo al rechazo."
    elif estilo == "integrativo":
        return "Podr√≠a tratarse de un patr√≥n donde el deseo de ser aceptado convive con el temor profundo a la desaprobaci√≥n."
    elif estilo == "narrativo":
        return reformular_estilo_narrativo(base)
    else:
        return base  # fallback

# ------------------------ Hip√≥tesis psicodin√°mica principal ------------------------

def generar_hipotesis_psicodinamica(emociones_detectadas: list, mensajes: list) -> str:
    """
    Genera una hip√≥tesis psicodin√°mica tentativa a partir de emociones acumuladas y mensajes previos.
    Incluye introducci√≥n narrativa variable + inferencia por combinaciones cl√≠nicas.
    """

    if not emociones_detectadas and not mensajes:
        return ""

    # üîÅ Variantes narrativas iniciales
    introducciones = [
        "A lo largo de lo expresado, se configura un hilo emocional que podr√≠a estar atravesado por lo siguiente:",
        "En lo que expresaste, se advierte una configuraci√≥n emocional que podr√≠a vincularse con:",
        "Lo mencionado permite suponer la presencia de un patr√≥n emocional compatible con lo siguiente:"
    ]
    intro = random.choice(introducciones)

    # üß† Combinaciones cl√≠nicas inferenciales
    combinaciones = {
        ("insuficiencia", "rechazo", "inseguridad"): "Podr√≠a estar operando un conflicto entre la necesidad de validaci√≥n y el temor a la desaprobaci√≥n.",
        ("soledad", "abandono", "desesperanza"): "Se advierte una posible vivencia de carencia vincular, con tendencia al retraimiento afectivo como forma de protecci√≥n.",
        ("culpa", "fracaso", "pesadez"): "Se manifiesta una lucha interna entre el ideal del yo y la percepci√≥n de fallas personales no toleradas.",
        ("apat√≠a", "vac√≠o", "desinter√©s"): "La sensaci√≥n de vac√≠o podr√≠a estar expresando una desconexi√≥n emocional como defensa frente al dolor ps√≠quico.",
        ("enojo", "irritabilidad", "aislamiento"): "Podr√≠a tratarse de una modalidad defensiva basada en el retraimiento hostil ante frustraciones relacionales no tramitadas.",
        ("tristeza", "apat√≠a", "desesperanza"): "Podr√≠a vincularse a una vivencia de agotamiento ps√≠quico o desvitalizaci√≥n, donde el deseo y la expectativa emocional se encuentran inhibidos.",
        ("culpa", "autocr√≠tica", "fracaso"): "Se observa un patr√≥n de autovaloraci√≥n cr√≠tica, posiblemente originando en mandatos internalizados que dificultan la autoaceptaci√≥n.",
        ("ansiedad", "inseguridad"): "Podr√≠a estar manifest√°ndose un conflicto entre la necesidad de pertenecer y el miedo a no ser valorado por el entorno.",
        ("enojo", "tristeza", "desilusi√≥n"): "Este conjunto podr√≠a estar expresando una vivencia de frustraci√≥n afectiva sostenida, donde el dolor no tramitado adopta una forma reactiva.",
        ("soledad", "desconfianza", "dolor"): "Se advierte un posible retraimiento afectivo como defensa ante experiencias relacionales vividas con amenaza o ruptura."
    }

    # üîç Normalizar emociones
    emociones_norm = [e.lower().strip().replace(".", "") for e in emociones_detectadas]

    # üîÑ Buscar hip√≥tesis por coincidencia
    for claves, hipotesis in combinaciones.items():
        if all(clave in emociones_norm for clave in claves):
            return f"{intro} {hipotesis}"

    # üß† Si no hay coincidencia cl√≠nica, usar plantilla general
    cuerpo_general = random.choice([
        "Podr√≠a tratarse de un patr√≥n donde el deseo de ser aceptado convive con el temor profundo a la desaprobaci√≥n.",
        "Se sugiere un conflicto estructural entre demandas internas y la vivencia de insuficiencia afectiva.",
        "Este relato permite entrever una vivencia que no ha sido plenamente significada, pero que resuena como una constante interna.",
        "Impresiona como una modalidad defensiva basada en el retraimiento hostil ante frustraciones relacionales no tramitadas."
    ])
    return f"{intro} {cuerpo_general}"


# ------------------------ Detecci√≥n de orientaci√≥n reflexiva ------------------------

def detectar_orientacion_reflexiva(mensajes: list) -> str:
    texto = " ".join(mensajes).lower()
    
    if any(palabra in texto for palabra in [
        "me doy cuenta", "a veces creo que", "entiendo que", "siento que esto viene",
        "creo que esto es por", "esto debe venir de"
    ]):
        return "insight"

    emociones_vinculo = {"rechazo", "abandono", "desaprobaci√≥n", "soledad", "temor al rechazo", "desconfianza"}
    emociones_autovaloracion = {"culpa", "fracaso", "autocr√≠tica", "insuficiencia", "inseguridad", "ansiedad"}

    emociones_detectadas = set(texto.split())

    if emociones_vinculo & emociones_detectadas:
        return "relacional"
    elif emociones_autovaloracion & emociones_detectadas:
        return "intrapersonal"
    
    return "general"
