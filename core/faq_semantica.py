import openai
import numpy as np
from numpy.linalg import norm

# üß† Base de intenciones con m√∫ltiples formulaciones por intenci√≥n
intenciones_faq = [
    {
        "intencion": "obras_sociales",
        "formulaciones": [
            "¬øTrabaja con obras sociales?",
            "¬øAcepta medicinas prepagas?",
            "¬øPuedo atenderme con mi obra social?",
            "¬øEst√° en mi cartilla?",
            "¬øAtiende por OSDE?",
            "¬øCubre mi plan de salud?",
            "atiende por obra social"
            "¬øLa consulta entra por prepaga?",
        ],
        "respuesta": (
            "El Lic. Daniel O. Bustamante no trabaja con obras sociales ni prepagas. Atiende √∫nicamente de manera particular.\n\n"
            "Si dese√°s iniciar un proceso terap√©utico, pod√©s escribirle directamente por WhatsApp al +54 911 3310-1186."
        )
    },
    {
        "intencion": "duracion_sesion",
        "formulaciones": [
            "¬øCu√°nto dura la sesi√≥n?",
            "¬øDe qu√© duraci√≥n son las consultas?",
            "¬øLas sesiones cu√°nto tiempo toman?",
            "¬øQu√© duraci√≥n tienen las sesiones?",
            "¬øSon sesiones largas o cortas?",
        ],
        "respuesta": (
            "Las sesiones con el Lic. Daniel O. Bustamante tienen una duraci√≥n aproximada de 50 minutos y se realizan por videoconsulta.\n\n"
            "La frecuencia puede variar seg√∫n cada caso, pero generalmente se recomienda un encuentro semanal para favorecer el proceso terap√©utico.\n\n"
            "Pod√©s contactarlo por WhatsApp al +54 911 3310-1186 si quer√©s coordinar una sesi√≥n."
        )
    },
    {
        "intencion": "servicios_ofrecidos",
        "formulaciones": [
            "¬øQu√© servicios ofrece?",
            "¬øEn qu√© puede ayudarme?",
            "¬øQu√© trata el Licenciado?",
            "¬øQu√© tipo de terapia brinda?",
            "¬øCon qu√© temas trabaja?",
        ],
        "respuesta": (
            "El Lic. Daniel O. Bustamante brinda atenci√≥n psicol√≥gica exclusivamente online, a trav√©s de videoconsultas.\n\n"
            "Entre los principales motivos de consulta que aborda se encuentran:\n"
            "- Psicoterapia individual para adultos (modalidad online)\n"
            "- Tratamiento de crisis emocionales\n"
            "- Abordaje de ansiedad, estr√©s y ataques de p√°nico\n"
            "- Procesos de duelo y cambios vitales\n"
            "- Estados an√≠micos depresivos\n"
            "- Problemas de autoestima y motivaci√≥n\n"
            "- Dificultades vinculares y emocionales\n"
            "- Terapia de pareja online\n\n"
            "En caso de que desees contactar al Lic. Daniel O. Bustamante, pod√©s hacerlo escribi√©ndole al WhatsApp +54 911 3310-1186, que con gusto responder√° a tus inquietudes."
        )
    }
]

def generar_embeddings_faq():
    for item in intenciones_faq:
        item["embeddings"] = []
        for frase in item["formulaciones"]:
            response = openai.Embedding.create(
                model="text-embedding-ada-002",
                input=frase
            )
            embedding = response["data"][0]["embedding"]
            item["embeddings"].append(np.array(embedding))

def buscar_respuesta_semantica(mensaje: str, umbral=0.88) -> str | None:
    try:
        emb_usuario = openai.Embedding.create(
            model="text-embedding-ada-002",
            input=mensaje
        )["data"][0]["embedding"]
        emb_usuario = np.array(emb_usuario)

        mejor_score = 0
        mejor_respuesta = None

        for item in intenciones_faq:
            for emb in item.get("embeddings", []):
                score = np.dot(emb_usuario, emb) / (norm(emb_usuario) * norm(emb))
                if score > mejor_score and score >= umbral:
                    mejor_score = score
                    mejor_respuesta = item["respuesta"]

        return mejor_respuesta
    except Exception as e:
        print(f"‚ùå Error en detecci√≥n sem√°ntica: {e}")
        return None

def buscar_respuesta_semantica_con_score(mensaje: str, umbral=0.88):
    try:
        emb_usuario = openai.Embedding.create(
            model="text-embedding-ada-002",
            input=mensaje
        )["data"][0]["embedding"]
        emb_usuario = np.array(emb_usuario)

        mejor_score = 0
        mejor_formulacion = None
        mejor_respuesta = None

        for item in intenciones_faq:
            for i, emb in enumerate(item.get("embeddings", [])):
                score = np.dot(emb_usuario, emb) / (norm(emb_usuario) * norm(emb))
                if score > mejor_score:
                    mejor_score = score
                    mejor_formulacion = item["formulaciones"][i]
                    mejor_respuesta = item["respuesta"]

        if mejor_score >= umbral:
            return mejor_formulacion, mejor_respuesta, mejor_score
        return None
    except Exception as e:
        print(f"‚ùå Error en buscar_respuesta_semantica_con_score: {e}")
        return None
