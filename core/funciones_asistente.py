# core/funciones_asistente.py

from core.db.sintomas import obtener_sintomas_existentes
from core.constantes import CLINICO, SALUDO, CORTESIA, ADMINISTRATIVO, CONSULTA_AGENDAR, CONSULTA_MODALIDAD
from core.utils_contacto import es_consulta_contacto
from core.utils_seguridad import contiene_elementos_peligrosos, contiene_frase_de_peligro
from core.db.registro import registrar_auditoria_input_original
from core.db.consulta import es_saludo, es_cortesia, contiene_expresion_administrativa
from core.db.sintomas import detectar_emociones_negativas
import openai
from collections import Counter
import psycopg2
from core.db.config import conn  # Asegurate de tener la conexi√≥n importada correctamente
import re

sintomas_cacheados = set()

def clasificar_input_inicial(texto: str) -> str:
    if not texto or not isinstance(texto, str):
        return "OTRO"

    texto = texto.lower().strip()

    # üß† Frases cl√≠nicas indirectas que expresan necesidad de iniciar terapia
    frases_necesidad_terapia = [
        "necesito hacer terapia", "quiero empezar terapia", "necesito un tratamiento", "buscar ayuda psicol√≥gica",
        "necesito hablar con alguien", "quisiera hacer terapia", "podr√≠a iniciar terapia", "empezar psicoterapia",
        "hacer terapia de pareja", "hacer psicoterapia", "necesito ayuda", "quiero tratarme", "buscar un terapeuta"
    ]
    if any(frase in texto for frase in frases_necesidad_terapia):
        return "CLINICO"
    

    # üß† Cargar s√≠ntomas desde la BD si el set global est√° vac√≠o
    global sintomas_cacheados
    if not sintomas_cacheados:
        try:
            sintomas_existentes = obtener_sintomas_existentes()
            sintomas_cacheados.update(sintomas_existentes)
        except Exception as e:
            print(f"‚ùå Error al cargar s√≠ntomas cacheados en clasificar_input_inicial: {e}")

    # üëã Saludos y detecci√≥n combinada con malestar cl√≠nico
    saludos = ["hola", "buenos d√≠as", "buenas tardes", "buenas noches", "qu√© tal", "como est√°s", "como esta"]
    if any(s in texto for s in saludos) and es_tema_clinico_o_emocional(texto):
        return "CLINICO"
    if texto in saludos:
        return "SALUDO"

    # üôè Frases de agradecimiento o cortes√≠a
    expresiones_cortesia = [
        "gracias", "muchas gracias", "muy amable", "ok gracias", "perfecto, gracias", "mil gracias",
        "te agradezco", "todo bien", "no necesito m√°s", "me qued√≥ claro", "nada m√°s"
    ]
    if texto in expresiones_cortesia:
        return "CORTESIA"

    # üîé Consultas sobre modalidad de atenci√≥n (ubicaci√≥n, virtualidad)
    consultas_modalidad = [
        "es presencial", "es online", "son online", "es virtual", "atiende por videollamada", "por zoom",
        "se hace por videollamada", "atenci√≥n virtual", "por llamada", "me tengo que presentar",
        "se hace presencial", "ubicaci√≥n", "d√≥nde atiende", "donde atiende", "donde queda",
        "d√≥nde est√°", "ciudad", "zona", "provincia", "en qu√© parte est√°s", "d√≥nde es la consulta",
        "direcci√≥n", "en qu√© lugar se atiende", "d√≥nde se realiza", "debo ir al consultorio",
        "se hace a distancia", "atenci√≥n remota", "consultorio", "atenci√≥n online"
    ]
    if any(frase in texto for frase in consultas_modalidad):
        return "CONSULTA_MODALIDAD"

    # üß† Malestar cl√≠nico directo (abstracciones y s√≠ntomas)
    clinicos_ampliados = [
        "nada me entusiasma", "nada me importa", "nada tiene sentido", "no tengo ganas", "no me interesa nada",
        "no me dan ganas", "no siento nada", "me quiero morir", "pienso en morirme", "me siento vac√≠o", "no le encuentro sentido",
        "todo me supera", "ya no disfruto", "siento un peso", "me cuesta levantarme", "lloro sin raz√≥n", "me duele el alma",
        "estoy muy triste", "me siento solo", "no puedo m√°s", "no puedo dormir", "siento ansiedad", "me siento mal conmigo"
    ]
    if any(frase in texto for frase in clinicos_ampliados):
        return "CLINICO"

    # üóíÔ∏è Consultas cl√≠nicas expl√≠citas disfrazadas de preguntas
    frases_consulta_directa = [
        "¬øatienden estos casos?", "¬øatiende estos casos?", "¬øatienden el caso?", "¬øatiende el caso?",
        "¬øtratan este tipo de temas?", "¬øtrata este tipo de temas?",
        "¬ømanejan este tipo de situaciones?", "¬ømanejan estos casos?",
        "¬øhacen tratamiento de esto?", "¬øhace tratamiento de esto?",
        "¬øel licenciado puede atender esto?", "¬øpueden ayudar con esto?",
        "¬øesto lo trata el profesional?", "¬øesto lo trabajan en terapia?",
        "¬øesto se trabaja en terapia?", "¬øeste tema lo abordan?"
    ]
    if any(frase in texto for frase in frases_consulta_directa):
        return "ADMINISTRATIVO"

    # üìã Consultas indirectas: verbo + tema cl√≠nico (frecuentes en landing pages)
    temas_clinicos_comunes = [
    "terapia de pareja", "psicoterapia", "tratamiento psicol√≥gico", "consultas psicol√≥gicas",
    "abordaje emocional", "tratamiento emocional", "atenci√≥n psicol√≥gica", "tratamiento de pareja"
    ]
    
    verbos_clinicos = [
        "hace", "hacen", "dan", "atiende", "atienden", "realiza", "realizan", "ofrece", "ofrecen",
        "trabaja con", "trabajan con", "brinda", "brindan"
    ]
    
    for verbo in verbos_clinicos:
        for tema in temas_clinicos_comunes:
            # üîÑ Ajuste espec√≠fico para tratamiento(s) de pareja
            if tema == "tratamiento de pareja":
                patron = rf"{verbo}\s*(el|la|los|las)?\s*tratamientos?\s+de\s+pareja"
            else:
                patron = rf"{verbo}\s*(el|la|los|las)?\s*{re.escape(tema)}"
    
            if re.search(patron, texto, re.IGNORECASE):
                registrar_auditoria_input_original(
                    user_id="sistema",
                    mensaje_original=texto,
                    mensaje_purificado=texto,
                    clasificacion="ADMINISTRATIVO (verbo + tema cl√≠nico com√∫n)"
                )
                return "ADMINISTRATIVO"

    
    # üÜï Captura directa de frases como ‚Äúatienden pareja‚Äù
    if re.search(r"\b(atiende|atienden|trabaja con|trabajan con|hace|hacen|dan|ofrece|ofrecen)\s+(una\s+)?pareja\b", texto, re.IGNORECASE):
        registrar_auditoria_input_original(
            user_id="sistema",
            mensaje_original=texto,
            mensaje_purificado=texto,
            clasificacion="ADMINISTRATIVO (menci√≥n directa a pareja)"
        )
        return "ADMINISTRATIVO"


    # üß† Consultas indirectas sobre s√≠ntomas mediante verbos + s√≠ntomas cacheados
    verbos_consulta = [
        "trata", "tratan", "atiende", "atienden", "aborda", "abordan",
        "se ocupa de", "se ocupan de", "interviene en", "intervienen en",
        "trabaja con", "trabajan con", "hace tratamiento de", "hacen tratamiento de",
        "realiza tratamiento de", "realizan tratamiento de",
        "da tratamiento a", "dan tratamiento a", "maneja", "manejan",
        "ayuda con", "ayudan con", "acompa√±a en", "acompa√±an en",
        "resuelve", "resuelven", "puede tratar", "pueden tratar",
        "puede ayudar con", "pueden ayudar con", "atiende el tema de", "trata el tema de",
        "puede atender", "pueden atender", "est√° capacitado para tratar", "est√°n capacitados para tratar"
    ]
    for verbo in verbos_consulta:
        for sintoma in sintomas_cacheados:
            if verbo in texto and sintoma in texto:
                return "ADMINISTRATIVO"

    # üß† Evaluaci√≥n final: si el mensaje contiene s√≠ntomas o malestar
    if es_tema_clinico_o_emocional(texto):
        return "CLINICO"

    return "OTRO"


def inferir_estado_emocional_predominante(emociones: list[str]) -> str | None:
    """
    Dada una lista de emociones o s√≠ntomas, infiere el estado emocional predominante
    a partir de coincidencias en la tabla `palabras_clave`.

    Retorna el estado emocional m√°s frecuente solo si hay 2 o m√°s coincidencias.
    """
    if not emociones:
        return None

    try:
        with conn.cursor() as cur:
            cur.execute(
                """
                SELECT estado_emocional
                FROM palabras_clave
                WHERE LOWER(sintoma) = ANY(%s)
                """,
                (emociones,)
            )
            resultados = cur.fetchall()

        estados = [fila[0].strip() for fila in resultados if fila[0]]

        if len(estados) < 2:
            return None

        conteo = Counter(estados)
        estado_predominante, _ = conteo.most_common(1)[0]
        return estado_predominante

    except Exception as e:
        print(f"Error al inferir estado emocional: {e}")
        return None

def purificar_input_clinico(texto: str) -> str:

    try:
        if not isinstance(texto, str):
            return ""

        texto_original = texto.strip().lower()
        texto = texto_original

        # üõ°Ô∏è Detectar negaci√≥n para no perder sentido cl√≠nico
        negadores_criticos = ["nada", "nadie", "ninguno", "ninguna", "no"]
        contiene_negador = any(re.search(rf'\b{n}\b', texto_original) for n in negadores_criticos)

        # üóëÔ∏è Limpieza de muletillas
        muletillas = [
            r'\b(este|eh+|mmm+|aj√°|tipo|digamos|sea|viste|bueno|a ver|me explico|ehh*)\b',
            r'\b(s√≠|si|claro)\b'
        ]
        for patron in muletillas:
            texto = re.sub(patron, '', texto, flags=re.IGNORECASE)

        texto = re.sub(r'\s{2,}', ' ', texto).strip()

        # ‚úÖ Coincidencias cl√≠nicas completas
        coincidencias_exactas = {
            "nada me entusiasma, ni siquiera lo que sol√≠a gustarme": "anhedonia",
            "nada me importa, ni lo que antes me importaba": "apat√≠a profunda",
            "no quiero ver a nadie ni salir de casa": "aislamiento",
            "pienso en morirme todo el tiempo": "ideaci√≥n suicida",
            "lloro sin raz√≥n y no s√© por qu√©": "llanto sin motivo"
        }
        for frase, valor in coincidencias_exactas.items():
            if frase in texto:
                texto = valor
                break

        # ‚úÇÔ∏è Limpieza final y estandarizaci√≥n gramatical
        texto = re.sub(r'\b(\w{1}) (\w+)', r'\1 \2', texto)
        texto = re.sub(r'(\.{2,})', '.', texto)
        texto = re.sub(r'(,{2,})', ',', texto)
        texto = re.sub(r'[\s\.,!?]+$', '', texto)
        texto = texto.strip()

        # Capitalizaci√≥n
        if texto:
            texto = texto[0].upper() + texto[1:]

        return texto

    except Exception as e:
        print(f"[Error] purificar_input_clinico: {e}")
        return ""

def es_tema_clinico_o_emocional(mensaje: str) -> bool:
    """
    Eval√∫a si un mensaje contiene contenido emocional o cl√≠nico mediante palabras clave o patrones frecuentes.

    Args:
        mensaje (str): El texto del usuario.

    Returns:
        bool: True si se detecta un contenido cl√≠nico o emocional, False en caso contrario.
    """
    if not mensaje or not isinstance(mensaje, str):
        return False

    mensaje = mensaje.lower().strip()

    # Palabras clave cl√≠nicas frecuentes
    palabras_clave = [
        "triste", "ansioso", "angustia", "ansiedad", "vac√≠o", "dolor", "sufrimiento",
        "miedo", "enojo", "culpa", "verg√ºenza", "desesperanza", "soledad", "estr√©s",
        "abandono", "apat√≠a", "insomnio", "despersonalizaci√≥n", "fobia", "ataques de p√°nico",
        "indecisi√≥n s√∫bita", "desborde", "desbordamiento", "nervioso", "desesperado",
        "indiferente", "ya no siento", "nada me entusiasma", "me quiero morir",
        "pienso en morirme", "no me reconozco", "todo me supera", "no puedo dormir"
    ]
    if any(palabra in mensaje for palabra in palabras_clave):
        return True

    # Patrones t√≠picos de malestar emocional
    patrones_emocionales = [
        r"me cuesta\s+(vivir|seguir|levant[a-z]+|encontrarle sentido)",
        r"no\s+(puedo|quiero|logro)\b.*",
        r"ya no\s+(disfruto|me interesa|me importa)",
        r"siento que\s+(todo est√° mal|no valgo|todo es en vano)",
        r"me siento\s+(perdido|vac√≠o|cansado|agotado|confundido|sin sentido)",
        r"no le encuentro sentido\s+(a la vida|a nada|a esto)",
        r"no tengo ganas", r"nada me importa", r"todo me cuesta", r"nada vale la pena",
        r"no sirvo para nada", r"siento que no sirvo", r"me cuesta\s+(vivir|seguir|todo)",
        r"no s√© si esto es normal", r"me siento perdido", r"siento que no puedo m√°s",
        r"me siento solo", r"todo me da igual", r"me tiene sin ganas",
        r"no duermo", r"no puedo dormir", r"no tengo energ√≠a",
    ]
    if any(re.search(p, mensaje) for p in patrones_emocionales):
        return True

    # ‚ö†Ô∏è Nuevos patrones de aislamiento o desinter√©s confundidos con cortes√≠a
    patrones_aislamiento = [
        r"\bno\s+me\s+interesa\s+hablar\s+con\s+nadie\b",
        r"\bno\s+quiero\s+hablar\s+con\s+nadie\b",
        r"\bno\s+quiero\s+ver\s+a\s+nadie\b",
        r"\bno\s+tengo\s+ganas\s+de\s+hablar\b",
        r"\bprefiero\s+estar\s+solo[a]?\b",
        r"\bquiero\s+aislarme\b"
    ]
    if any(re.search(p, mensaje) for p in patrones_aislamiento):
        return True

    return False


def detectar_emociones_negativas(mensaje):
    if not mensaje or not isinstance(mensaje, str):
        print("‚ö†Ô∏è Input inv√°lido para detectar emociones: no es string o es None")
        return []

    prompt = (
        "Analiz√° el siguiente mensaje desde una perspectiva cl√≠nica y detect√° exclusivamente emociones negativas o estados afectivos vinculados a malestar psicol√≥gico. "
        "Tu tarea es identificar manifestaciones emocionales que indiquen sufrimiento, alteraci√≥n afectiva o malestar cl√≠nico.\n\n"

        "Indicaciones:\n"
        "- Devolv√© una lista separada por comas, sin explicaciones ni texto adicional.\n"
        "- Si hay ambig√ºedad, asign√° la emoci√≥n negativa m√°s cercana desde el punto de vista cl√≠nico.\n"
        "- Si hay m√∫ltiples emociones, incluilas todas separadas por comas.\n"
        "- Si no se detectan emociones negativas, devolv√© √∫nicamente: ninguna.\n\n"

        "Ejemplos cl√≠nicamente v√°lidos:\n"
        "- Emociones simples: tristeza, ansiedad, culpa, verg√ºenza, impotencia, miedo, irritabilidad, angustia.\n"
        "- Estados complejos: vac√≠o emocional, desgaste emocional, desesperanza, sensaci√≥n de abandono, temor al rechazo, apat√≠a profunda.\n\n"
        f"Mensaje: {mensaje}"
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=50,
            temperature=0.0
        )
        emociones = response.choices[0].message.get("content", "").strip().lower()

        print("\n===== DEPURACI√ìN - DETECCI√ìN DE EMOCIONES =====")
        print(f"Mensaje analizado: {mensaje}")
        print(f"Respuesta de OpenAI: {emociones}")

        emociones = emociones.replace("emociones negativas detectadas:", "").strip()
        emociones = [emocion.strip() for emocion in emociones.split(",") if emocion.strip()]

        if "ninguna" in emociones:
            print("No se detectaron emociones negativas.\n")
            return []

        print(f"Emociones detectadas: {emociones}\n")
        return emociones

    except Exception as e:
        print(f"‚ùå Error al detectar emociones negativas: {e}")
        return []

